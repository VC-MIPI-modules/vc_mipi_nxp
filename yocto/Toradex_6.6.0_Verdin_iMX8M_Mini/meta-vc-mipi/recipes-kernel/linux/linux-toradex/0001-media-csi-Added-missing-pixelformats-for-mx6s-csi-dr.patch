From 114305a1146eb4b1f2b9ea59608b9038d65b68fe Mon Sep 17 00:00:00 2001
From: Peter Martienssen <peter.martienssen@liquify-consulting.de>
Date: Mon, 8 Jul 2024 15:59:52 +0200
Subject: [PATCH 1/8] media: csi: Added missing pixelformats for mx6s csi
 driver

---
 .../media/platform/mxc/capture/mx6s_capture.c | 120 ++++++++++++++++--
 .../media/platform/mxc/capture/mxc_mipi_csi.c |  49 +++++++
 2 files changed, 161 insertions(+), 8 deletions(-)

diff --git a/drivers/media/platform/mxc/capture/mx6s_capture.c b/drivers/media/platform/mxc/capture/mx6s_capture.c
index 84f0e40e4..140128371 100644
--- a/drivers/media/platform/mxc/capture/mx6s_capture.c
+++ b/drivers/media/platform/mxc/capture/mx6s_capture.c
@@ -131,6 +131,8 @@
 #define BIT_CSI_ENABLE			(0x1 << 31)
 #define BIT_MIPI_DATA_FORMAT_RAW8		(0x2a << 25)
 #define BIT_MIPI_DATA_FORMAT_RAW10		(0x2b << 25)
+#define BIT_MIPI_DATA_FORMAT_RAW12      (0x2c << 25)
+#define BIT_MIPI_DATA_FORMAT_RAW14      (0x2d << 25)
 #define BIT_MIPI_DATA_FORMAT_YUV422_8B	(0x1e << 25)
 #define BIT_MIPI_DATA_FORMAT_MASK	(0x3F << 25)
 #define BIT_MIPI_DATA_FORMAT_OFFSET	25
@@ -266,6 +268,78 @@ static struct mx6s_fmt formats[] = {
 		.pixelformat	= V4L2_PIX_FMT_SBGGR8,
 		.mbus_code	= MEDIA_BUS_FMT_SBGGR8_1X8,
 		.bpp		= 1,
+	}, {
+		.name		= "Gray8 (GREY)",
+		.fourcc		= V4L2_PIX_FMT_GREY,
+		.pixelformat	= V4L2_PIX_FMT_GREY,
+		.mbus_code	= MEDIA_BUS_FMT_Y8_1X8,
+		.bpp		= 1,
+	} ,{	
+		.name		= "Gray10 (Y10)",
+		.fourcc		= V4L2_PIX_FMT_Y10,
+		.pixelformat	= V4L2_PIX_FMT_Y10,
+		.mbus_code	= MEDIA_BUS_FMT_Y10_1X10,
+		.bpp		= 2,
+	} ,{	
+		.name		= "Gray12 (Y12)",
+		.fourcc		= V4L2_PIX_FMT_Y12,
+		.pixelformat	= V4L2_PIX_FMT_Y12,
+		.mbus_code	= MEDIA_BUS_FMT_Y12_1X12,
+		.bpp		= 2,
+	}, {	
+		.name		= "Gray14 (Y14)",
+		.fourcc		= V4L2_PIX_FMT_Y14,
+		.pixelformat	= V4L2_PIX_FMT_Y14,
+		.mbus_code	= MEDIA_BUS_FMT_Y14_1X14,
+		.bpp		= 2,
+	}, {
+		.name		= "RAWRGB8 (SRGGB8)",
+		.fourcc		= V4L2_PIX_FMT_SRGGB8,
+		.pixelformat	= V4L2_PIX_FMT_SRGGB8,
+		.mbus_code	= MEDIA_BUS_FMT_SRGGB8_1X8,
+		.bpp		= 1,
+	} ,{	
+		.name		= "RAWRGB10 (SRGGB10)",
+		.fourcc		= V4L2_PIX_FMT_SRGGB10,
+		.pixelformat	= V4L2_PIX_FMT_SRGGB10,
+		.mbus_code	= MEDIA_BUS_FMT_SRGGB10_1X10,
+		.bpp		= 2,
+	} ,{	
+		.name		= "RAWRGB12 (SRGGB12)",
+		.fourcc		= V4L2_PIX_FMT_SRGGB12,
+		.pixelformat	= V4L2_PIX_FMT_SRGGB12,
+		.mbus_code	= MEDIA_BUS_FMT_SRGGB12_1X12,
+		.bpp		= 2,
+	}, {	
+		.name		= "RAWRGB14 (SRGGB14)",
+		.fourcc		= V4L2_PIX_FMT_SRGGB14,
+		.pixelformat	= V4L2_PIX_FMT_SRGGB14,
+		.mbus_code	= MEDIA_BUS_FMT_SRGGB14_1X14,
+		.bpp		= 2,
+	}, {
+		.name		= "RAWRGB8 (SGBRG8)",
+		.fourcc		= V4L2_PIX_FMT_SGBRG8,
+		.pixelformat	= V4L2_PIX_FMT_SGBRG8,
+		.mbus_code	= MEDIA_BUS_FMT_SGBRG8_1X8,
+		.bpp		= 1,
+	} ,{
+		.name		= "RAWRGB10 (SGBRG10)",
+		.fourcc		= V4L2_PIX_FMT_SGBRG10,
+		.pixelformat	= V4L2_PIX_FMT_SGBRG10,
+		.mbus_code	= MEDIA_BUS_FMT_SGBRG10_1X10,
+		.bpp		= 2,
+	} ,{
+		.name		= "RAWRGB12 (SGBRG12)",
+		.fourcc		= V4L2_PIX_FMT_SGBRG12,
+		.pixelformat	= V4L2_PIX_FMT_SGBRG12,
+		.mbus_code	= MEDIA_BUS_FMT_SGBRG12_1X12,
+		.bpp		= 2,
+	} ,{
+		.name		= "RAWRGB14 (SGBRG14)",
+		.fourcc		= V4L2_PIX_FMT_SGBRG14,
+		.pixelformat	= V4L2_PIX_FMT_SGBRG14,
+		.mbus_code	= MEDIA_BUS_FMT_SGBRG14_1X14,
+		.bpp		= 2,
 	}
 };
 
@@ -580,8 +654,11 @@ static void csi_dmareq_rff_enable(struct mx6s_csi_dev *csi_dev)
 	cr3 |= BIT_HRESP_ERR_EN;
 	cr3 &= ~BIT_RXFF_LEVEL;
 	cr3 |= 0x2 << 4;
-	if (csi_dev->csi_two_8bit_sensor_mode)
+	if (csi_dev->csi_two_8bit_sensor_mode){
 		cr3 |= BIT_TWO_8BIT_SENSOR;
+    } else {
+        cr3 &= ~BIT_TWO_8BIT_SENSOR;
+    }
 
 	__raw_writel(cr3, csi_dev->regbase + CSI_CSICR3);
 	__raw_writel(cr2, csi_dev->regbase + CSI_CSICR2);
@@ -836,10 +913,6 @@ static int mx6s_configure_csi(struct mx6s_csi_dev *csi_dev)
 	}
 
 	switch (csi_dev->fmt->pixelformat) {
-	case V4L2_PIX_FMT_YUV32:
-	case V4L2_PIX_FMT_SBGGR8:
-		width = pix->width;
-		break;
 	case V4L2_PIX_FMT_UYVY:
 	case V4L2_PIX_FMT_YUYV:
 		if (csi_dev->csi_mipi_mode == true)
@@ -849,9 +922,22 @@ static int mx6s_configure_csi(struct mx6s_csi_dev *csi_dev)
 			width = pix->width * 2;
 		break;
 	default:
-		pr_debug("   case not supported\n");
-		return -EINVAL;
-	}
+		width = pix->width;
+		break;
+	}
+
+    switch (csi_dev->fmt->pixelformat) {
+    case V4L2_PIX_FMT_GREY:
+	case V4L2_PIX_FMT_SBGGR8:
+    case V4L2_PIX_FMT_SRGGB8:
+	case V4L2_PIX_FMT_SGBRG8:
+        csi_dev->csi_two_8bit_sensor_mode = false;
+        break;
+	default:
+		csi_dev->csi_two_8bit_sensor_mode = true;
+		break;
+	}
+
 	csi_set_imagpara(csi_dev, width, pix->height);
 
 	if (csi_dev->csi_mipi_mode == true) {
@@ -869,7 +955,25 @@ static int mx6s_configure_csi(struct mx6s_csi_dev *csi_dev)
 			cr18 |= BIT_MIPI_DATA_FORMAT_YUV422_8B;
 			break;
 		case V4L2_PIX_FMT_SBGGR8:
+		case V4L2_PIX_FMT_GREY:
+        case V4L2_PIX_FMT_SRGGB8:
+		case V4L2_PIX_FMT_SGBRG8:
 			cr18 |= BIT_MIPI_DATA_FORMAT_RAW8;
+            break;
+        case V4L2_PIX_FMT_Y10:
+        case V4L2_PIX_FMT_SRGGB10:
+        case V4L2_PIX_FMT_SGBRG10:
+            cr18 |= BIT_MIPI_DATA_FORMAT_RAW10;
+            break;
+        case V4L2_PIX_FMT_Y12:
+        case V4L2_PIX_FMT_SRGGB12:
+		case V4L2_PIX_FMT_SGBRG12:
+            cr18 |= BIT_MIPI_DATA_FORMAT_RAW12;
+			break;
+		case V4L2_PIX_FMT_Y14:
+        case V4L2_PIX_FMT_SRGGB14:
+		case V4L2_PIX_FMT_SGBRG14:
+            cr18 |= BIT_MIPI_DATA_FORMAT_RAW14;
 			break;
 		default:
 			pr_debug("   fmt not supported\n");
diff --git a/drivers/media/platform/mxc/capture/mxc_mipi_csi.c b/drivers/media/platform/mxc/capture/mxc_mipi_csi.c
index 636564a8a..3e586cb56 100644
--- a/drivers/media/platform/mxc/capture/mxc_mipi_csi.c
+++ b/drivers/media/platform/mxc/capture/mxc_mipi_csi.c
@@ -157,6 +157,7 @@ MODULE_PARM_DESC(debug, "Debug level (0-2)");
 #define MIPI_CSIS_ISPCFG_FMT_RAW8		(0x2a << 2)
 #define MIPI_CSIS_ISPCFG_FMT_RAW10		(0x2b << 2)
 #define MIPI_CSIS_ISPCFG_FMT_RAW12		(0x2c << 2)
+#define MIPI_CSIS_ISPCFG_FMT_RAW14		(0x2d << 2)
 /* User defined formats, x = 1...4 */
 #define MIPI_CSIS_ISPCFG_FMT_USER(x)	((0x30 + x - 1) << 2)
 #define MIPI_CSIS_ISPCFG_FMT_MASK		(0x3f << 2)
@@ -321,6 +322,54 @@ static const struct csis_pix_format mipi_csis_formats[] = {
 		.code = MEDIA_BUS_FMT_SBGGR8_1X8,
 		.fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW8,
 		.data_alignment = 8,
+	},  {	
+		.code = MEDIA_BUS_FMT_Y8_1X8,
+        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW8,
+        .data_alignment = 8,
+	},  {
+        .code = MEDIA_BUS_FMT_SRGGB8_1X8,
+        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW8,
+        .data_alignment = 8,
+    },  {
+        .code = MEDIA_BUS_FMT_SGBRG8_1X8,
+        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW8,
+        .data_alignment = 8,
+    },  {
+        .code = MEDIA_BUS_FMT_Y10_1X10,
+        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW10,
+        .data_alignment = 16,
+    },  {
+        .code = MEDIA_BUS_FMT_SRGGB10_1X10,
+        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW10,
+        .data_alignment = 16,
+    },  {
+        .code = MEDIA_BUS_FMT_SGBRG10_1X10,
+        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW10,
+        .data_alignment = 16,
+    },  {
+        .code = MEDIA_BUS_FMT_Y12_1X12,
+        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW12,
+        .data_alignment = 16,
+    },  {
+        .code = MEDIA_BUS_FMT_SRGGB12_1X12,
+        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW12,
+        .data_alignment = 16,
+    },  {
+        .code = MEDIA_BUS_FMT_SGBRG12_1X12,
+        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW12,
+        .data_alignment = 16,
+    },  {
+        .code = MEDIA_BUS_FMT_Y14_1X14,
+        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW14,
+        .data_alignment = 16,
+	},  {
+        .code = MEDIA_BUS_FMT_SRGGB14_1X14,
+        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW14,
+        .data_alignment = 16,
+	},  {
+        .code = MEDIA_BUS_FMT_SGBRG14_1X14,
+        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW14,
+        .data_alignment = 16,
 	}
 };
 
-- 
2.25.1

