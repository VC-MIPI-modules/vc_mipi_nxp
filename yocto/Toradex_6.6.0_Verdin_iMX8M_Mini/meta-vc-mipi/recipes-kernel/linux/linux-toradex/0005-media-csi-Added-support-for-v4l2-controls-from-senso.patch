From d4637f916b1e27bf725330507623548d932e66e1 Mon Sep 17 00:00:00 2001
From: Peter Martienssen <peter.martienssen@liquify-consulting.de>
Date: Tue, 9 Jul 2024 11:11:05 +0200
Subject: [PATCH 5/8] media: csi: Added support for v4l2 controls from sensor
 device

---
 .../media/platform/mxc/capture/mx6s_capture.c | 4303 +++++++++--------
 .../media/platform/mxc/capture/mxc_mipi_csi.c | 2750 +++++------
 2 files changed, 3533 insertions(+), 3520 deletions(-)

diff --git a/drivers/media/platform/mxc/capture/mx6s_capture.c b/drivers/media/platform/mxc/capture/mx6s_capture.c
index 8e61e5064..80f1440ab 100644
--- a/drivers/media/platform/mxc/capture/mx6s_capture.c
+++ b/drivers/media/platform/mxc/capture/mx6s_capture.c
@@ -1,2148 +1,2155 @@
-/* SPDX-License-Identifier: GPL-2.0-or-later */
-/*
- * Copyright (C) 2014-2016 Freescale Semiconductor, Inc. All Rights Reserved.
- * Copyright 2019 NXP
- */
-
-/*!
- * @file mx6s_csi.c
- *
- * @brief mx6sx CMOS Sensor interface functions
- *
- * @ingroup CSI
- */
-#include <asm/dma.h>
-#include <linux/busfreq-imx.h>
-#include <linux/clk.h>
-#include <linux/dma-mapping.h>
-#include <linux/delay.h>
-#include <linux/device.h>
-#include <linux/errno.h>
-#include <linux/fs.h>
-#include <linux/gcd.h>
-#include <linux/init.h>
-#include <linux/interrupt.h>
-#include <linux/io.h>
-#include <linux/kernel.h>
-#include <linux/math64.h>
-#include <linux/mfd/syscon.h>
-#include <linux/mm.h>
-#include <linux/module.h>
-#include <linux/moduleparam.h>
-#include <linux/of.h>
-#include <linux/of_device.h>
-#include <linux/of_graph.h>
-#include <linux/platform_device.h>
-#include <linux/pm_runtime.h>
-#include <linux/regmap.h>
-#include <linux/slab.h>
-#include <linux/time.h>
-#include <linux/media-bus-format.h>
-#include <media/v4l2-common.h>
-#include <media/v4l2-ctrls.h>
-#include <media/v4l2-dev.h>
-#include <media/v4l2-device.h>
-#include <media/v4l2-ioctl.h>
-#include <media/videobuf2-core.h>
-#include <media/videobuf2-dma-contig.h>
-
-#define MX6S_CAM_DRV_NAME "mx6s-csi"
-#define MX6S_CAM_VERSION "0.0.1"
-#define MX6S_CAM_DRIVER_DESCRIPTION "i.MX6S_CSI"
-
-#define MAX_VIDEO_MEM 256
-
-/* reset values */
-#define CSICR1_RESET_VAL	0x40000800
-#define CSICR2_RESET_VAL	0x0
-#define CSICR3_RESET_VAL	0x0
-
-/* csi control reg 1 */
-#define BIT_SWAP16_EN		(0x1 << 31)
-#define BIT_EXT_VSYNC		(0x1 << 30)
-#define BIT_EOF_INT_EN		(0x1 << 29)
-#define BIT_PRP_IF_EN		(0x1 << 28)
-#define BIT_CCIR_MODE		(0x1 << 27)
-#define BIT_COF_INT_EN		(0x1 << 26)
-#define BIT_SF_OR_INTEN		(0x1 << 25)
-#define BIT_RF_OR_INTEN		(0x1 << 24)
-#define BIT_SFF_DMA_DONE_INTEN  (0x1 << 22)
-#define BIT_STATFF_INTEN	(0x1 << 21)
-#define BIT_FB2_DMA_DONE_INTEN  (0x1 << 20)
-#define BIT_FB1_DMA_DONE_INTEN  (0x1 << 19)
-#define BIT_RXFF_INTEN		(0x1 << 18)
-#define BIT_SOF_POL		(0x1 << 17)
-#define BIT_SOF_INTEN		(0x1 << 16)
-#define BIT_MCLKDIV		(0xF << 12)
-#define BIT_HSYNC_POL		(0x1 << 11)
-#define BIT_CCIR_EN		(0x1 << 10)
-#define BIT_MCLKEN		(0x1 << 9)
-#define BIT_FCC			(0x1 << 8)
-#define BIT_PACK_DIR		(0x1 << 7)
-#define BIT_CLR_STATFIFO	(0x1 << 6)
-#define BIT_CLR_RXFIFO		(0x1 << 5)
-#define BIT_GCLK_MODE		(0x1 << 4)
-#define BIT_INV_DATA		(0x1 << 3)
-#define BIT_INV_PCLK		(0x1 << 2)
-#define BIT_REDGE		(0x1 << 1)
-#define BIT_PIXEL_BIT		(0x1 << 0)
-
-#define SHIFT_MCLKDIV		12
-
-/* control reg 3 */
-#define BIT_FRMCNT		(0xFFFF << 16)
-#define BIT_FRMCNT_RST		(0x1 << 15)
-#define BIT_DMA_REFLASH_RFF	(0x1 << 14)
-#define BIT_DMA_REFLASH_SFF	(0x1 << 13)
-#define BIT_DMA_REQ_EN_RFF	(0x1 << 12)
-#define BIT_DMA_REQ_EN_SFF	(0x1 << 11)
-#define BIT_STATFF_LEVEL	(0x7 << 8)
-#define BIT_HRESP_ERR_EN	(0x1 << 7)
-#define BIT_RXFF_LEVEL		(0x7 << 4)
-#define BIT_TWO_8BIT_SENSOR	(0x1 << 3)
-#define BIT_ZERO_PACK_EN	(0x1 << 2)
-#define BIT_ECC_INT_EN		(0x1 << 1)
-#define BIT_ECC_AUTO_EN		(0x1 << 0)
-
-#define SHIFT_FRMCNT		16
-#define SHIFT_RXFIFO_LEVEL	4
-
-/* csi status reg */
-#define BIT_ADDR_CH_ERR_INT (0x1 << 28)
-#define BIT_FIELD0_INT      (0x1 << 27)
-#define BIT_FIELD1_INT      (0x1 << 26)
-#define BIT_SFF_OR_INT		(0x1 << 25)
-#define BIT_RFF_OR_INT		(0x1 << 24)
-#define BIT_DMA_TSF_DONE_SFF	(0x1 << 22)
-#define BIT_STATFF_INT		(0x1 << 21)
-#define BIT_DMA_TSF_DONE_FB2	(0x1 << 20)
-#define BIT_DMA_TSF_DONE_FB1	(0x1 << 19)
-#define BIT_RXFF_INT		(0x1 << 18)
-#define BIT_EOF_INT		(0x1 << 17)
-#define BIT_SOF_INT		(0x1 << 16)
-#define BIT_F2_INT		(0x1 << 15)
-#define BIT_F1_INT		(0x1 << 14)
-#define BIT_COF_INT		(0x1 << 13)
-#define BIT_HRESP_ERR_INT	(0x1 << 7)
-#define BIT_ECC_INT		(0x1 << 1)
-#define BIT_DRDY		(0x1 << 0)
-
-/* csi control reg 18 */
-#define BIT_CSI_ENABLE			(0x1 << 31)
-#define BIT_MIPI_DATA_FORMAT_RAW8		(0x2a << 25)
-#define BIT_MIPI_DATA_FORMAT_RAW10		(0x2b << 25)
-#define BIT_MIPI_DATA_FORMAT_RAW12      (0x2c << 25)
-#define BIT_MIPI_DATA_FORMAT_RAW14      (0x2d << 25)
-#define BIT_MIPI_DATA_FORMAT_YUV422_8B	(0x1e << 25)
-#define BIT_MIPI_DATA_FORMAT_MASK	(0x3F << 25)
-#define BIT_MIPI_DATA_FORMAT_OFFSET	25
-#define BIT_DATA_FROM_MIPI		(0x1 << 22)
-#define BIT_MIPI_YU_SWAP		(0x1 << 21)
-#define BIT_MIPI_DOUBLE_CMPNT	(0x1 << 20)
-#define BIT_BASEADDR_CHG_ERR_EN	(0x1 << 9)
-#define BIT_BASEADDR_SWITCH_SEL	(0x1 << 5)
-#define BIT_BASEADDR_SWITCH_EN	(0x1 << 4)
-#define BIT_PARALLEL24_EN		(0x1 << 3)
-#define BIT_DEINTERLACE_EN		(0x1 << 2)
-#define BIT_TVDECODER_IN_EN		(0x1 << 1)
-#define BIT_NTSC_EN				(0x1 << 0)
-
-#define CSI_MCLK_VF		1
-#define CSI_MCLK_ENC		2
-#define CSI_MCLK_RAW		4
-#define CSI_MCLK_I2C		8
-
-#define CSI_CSICR1		0x0
-#define CSI_CSICR2		0x4
-#define CSI_CSICR3		0x8
-#define CSI_STATFIFO		0xC
-#define CSI_CSIRXFIFO		0x10
-#define CSI_CSIRXCNT		0x14
-#define CSI_CSISR		0x18
-
-#define CSI_CSIDBG		0x1C
-#define CSI_CSIDMASA_STATFIFO	0x20
-#define CSI_CSIDMATS_STATFIFO	0x24
-#define CSI_CSIDMASA_FB1	0x28
-#define CSI_CSIDMASA_FB2	0x2C
-#define CSI_CSIFBUF_PARA	0x30
-#define CSI_CSIIMAG_PARA	0x34
-
-#define CSI_CSICR18		0x48
-#define CSI_CSICR19		0x4c
-
-#define NUM_FORMATS ARRAY_SIZE(formats)
-#define MX6SX_MAX_SENSORS    1
-
-struct csi_signal_cfg_t {
-	unsigned data_width:3;
-	unsigned clk_mode:2;
-	unsigned ext_vsync:1;
-	unsigned Vsync_pol:1;
-	unsigned Hsync_pol:1;
-	unsigned pixclk_pol:1;
-	unsigned data_pol:1;
-	unsigned sens_clksrc:1;
-};
-
-struct csi_config_t {
-	/* control reg 1 */
-	unsigned int swap16_en:1;
-	unsigned int ext_vsync:1;
-	unsigned int eof_int_en:1;
-	unsigned int prp_if_en:1;
-	unsigned int ccir_mode:1;
-	unsigned int cof_int_en:1;
-	unsigned int sf_or_inten:1;
-	unsigned int rf_or_inten:1;
-	unsigned int sff_dma_done_inten:1;
-	unsigned int statff_inten:1;
-	unsigned int fb2_dma_done_inten:1;
-	unsigned int fb1_dma_done_inten:1;
-	unsigned int rxff_inten:1;
-	unsigned int sof_pol:1;
-	unsigned int sof_inten:1;
-	unsigned int mclkdiv:4;
-	unsigned int hsync_pol:1;
-	unsigned int ccir_en:1;
-	unsigned int mclken:1;
-	unsigned int fcc:1;
-	unsigned int pack_dir:1;
-	unsigned int gclk_mode:1;
-	unsigned int inv_data:1;
-	unsigned int inv_pclk:1;
-	unsigned int redge:1;
-	unsigned int pixel_bit:1;
-
-	/* control reg 3 */
-	unsigned int frmcnt:16;
-	unsigned int frame_reset:1;
-	unsigned int dma_reflash_rff:1;
-	unsigned int dma_reflash_sff:1;
-	unsigned int dma_req_en_rff:1;
-	unsigned int dma_req_en_sff:1;
-	unsigned int statff_level:3;
-	unsigned int hresp_err_en:1;
-	unsigned int rxff_level:3;
-	unsigned int two_8bit_sensor:1;
-	unsigned int zero_pack_en:1;
-	unsigned int ecc_int_en:1;
-	unsigned int ecc_auto_en:1;
-	/* fifo counter */
-	unsigned int rxcnt;
-};
-
-/*
- * Basic structures
- */
-struct mx6s_fmt {
-	char  name[32];
-	u32   fourcc;		/* v4l2 format id */
-	u32   pixelformat;
-	u32   mbus_code;
-	int   bpp;
-};
-
-static struct mx6s_fmt formats[] = {
-	{
-		.name		= "UYVY-16",
-		.fourcc		= V4L2_PIX_FMT_UYVY,
-		.pixelformat	= V4L2_PIX_FMT_UYVY,
-		.mbus_code	= MEDIA_BUS_FMT_UYVY8_2X8,
-		.bpp		= 2,
-	}, {
-		.name		= "YUYV-16",
-		.fourcc		= V4L2_PIX_FMT_YUYV,
-		.pixelformat	= V4L2_PIX_FMT_YUYV,
-		.mbus_code	= MEDIA_BUS_FMT_YUYV8_2X8,
-		.bpp		= 2,
-	}, {
-		.name		= "YUV32 (X-Y-U-V)",
-		.fourcc		= V4L2_PIX_FMT_YUV32,
-		.pixelformat	= V4L2_PIX_FMT_YUV32,
-		.mbus_code	= MEDIA_BUS_FMT_AYUV8_1X32,
-		.bpp		= 4,
-	}, {
-		.name		= "RAWRGB8 (SBGGR8)",
-		.fourcc		= V4L2_PIX_FMT_SBGGR8,
-		.pixelformat	= V4L2_PIX_FMT_SBGGR8,
-		.mbus_code	= MEDIA_BUS_FMT_SBGGR8_1X8,
-		.bpp		= 1,
-	}, {
-		.name		= "Gray8 (GREY)",
-		.fourcc		= V4L2_PIX_FMT_GREY,
-		.pixelformat	= V4L2_PIX_FMT_GREY,
-		.mbus_code	= MEDIA_BUS_FMT_Y8_1X8,
-		.bpp		= 1,
-	} ,{	
-		.name		= "Gray10 (Y10)",
-		.fourcc		= V4L2_PIX_FMT_Y10,
-		.pixelformat	= V4L2_PIX_FMT_Y10,
-		.mbus_code	= MEDIA_BUS_FMT_Y10_1X10,
-		.bpp		= 2,
-	} ,{	
-		.name		= "Gray12 (Y12)",
-		.fourcc		= V4L2_PIX_FMT_Y12,
-		.pixelformat	= V4L2_PIX_FMT_Y12,
-		.mbus_code	= MEDIA_BUS_FMT_Y12_1X12,
-		.bpp		= 2,
-	}, {	
-		.name		= "Gray14 (Y14)",
-		.fourcc		= V4L2_PIX_FMT_Y14,
-		.pixelformat	= V4L2_PIX_FMT_Y14,
-		.mbus_code	= MEDIA_BUS_FMT_Y14_1X14,
-		.bpp		= 2,
-	}, {
-		.name		= "RAWRGB8 (SRGGB8)",
-		.fourcc		= V4L2_PIX_FMT_SRGGB8,
-		.pixelformat	= V4L2_PIX_FMT_SRGGB8,
-		.mbus_code	= MEDIA_BUS_FMT_SRGGB8_1X8,
-		.bpp		= 1,
-	} ,{	
-		.name		= "RAWRGB10 (SRGGB10)",
-		.fourcc		= V4L2_PIX_FMT_SRGGB10,
-		.pixelformat	= V4L2_PIX_FMT_SRGGB10,
-		.mbus_code	= MEDIA_BUS_FMT_SRGGB10_1X10,
-		.bpp		= 2,
-	} ,{	
-		.name		= "RAWRGB12 (SRGGB12)",
-		.fourcc		= V4L2_PIX_FMT_SRGGB12,
-		.pixelformat	= V4L2_PIX_FMT_SRGGB12,
-		.mbus_code	= MEDIA_BUS_FMT_SRGGB12_1X12,
-		.bpp		= 2,
-	}, {	
-		.name		= "RAWRGB14 (SRGGB14)",
-		.fourcc		= V4L2_PIX_FMT_SRGGB14,
-		.pixelformat	= V4L2_PIX_FMT_SRGGB14,
-		.mbus_code	= MEDIA_BUS_FMT_SRGGB14_1X14,
-		.bpp		= 2,
-	}, {
-		.name		= "RAWRGB8 (SGBRG8)",
-		.fourcc		= V4L2_PIX_FMT_SGBRG8,
-		.pixelformat	= V4L2_PIX_FMT_SGBRG8,
-		.mbus_code	= MEDIA_BUS_FMT_SGBRG8_1X8,
-		.bpp		= 1,
-	} ,{
-		.name		= "RAWRGB10 (SGBRG10)",
-		.fourcc		= V4L2_PIX_FMT_SGBRG10,
-		.pixelformat	= V4L2_PIX_FMT_SGBRG10,
-		.mbus_code	= MEDIA_BUS_FMT_SGBRG10_1X10,
-		.bpp		= 2,
-	} ,{
-		.name		= "RAWRGB12 (SGBRG12)",
-		.fourcc		= V4L2_PIX_FMT_SGBRG12,
-		.pixelformat	= V4L2_PIX_FMT_SGBRG12,
-		.mbus_code	= MEDIA_BUS_FMT_SGBRG12_1X12,
-		.bpp		= 2,
-	} ,{
-		.name		= "RAWRGB14 (SGBRG14)",
-		.fourcc		= V4L2_PIX_FMT_SGBRG14,
-		.pixelformat	= V4L2_PIX_FMT_SGBRG14,
-		.mbus_code	= MEDIA_BUS_FMT_SGBRG14_1X14,
-		.bpp		= 2,
-	}
-};
-
-struct mx6s_buf_internal {
-	struct list_head	queue;
-	int					bufnum;
-	bool				discard;
-};
-
-/* buffer for one video frame */
-struct mx6s_buffer {
-	/* common v4l buffer stuff -- must be first */
-	struct vb2_v4l2_buffer			vb;
-	struct mx6s_buf_internal	internal;
-};
-
-struct mx6s_csi_mux {
-	struct regmap *gpr;
-	u8 req_gpr;
-	u8 req_bit;
-};
-
-struct mx6s_csi_soc {
-	bool rx_fifo_rst;
-	int baseaddr_switch;
-};
-
-struct mx6s_csi_dev {
-	struct device		*dev;
-	struct video_device *vdev;
-	struct v4l2_subdev	*sd;
-	struct v4l2_device	v4l2_dev;
-
-	struct vb2_queue			vb2_vidq;
-	struct v4l2_ctrl_handler	ctrl_handler;
-
-	struct mutex		lock;
-	spinlock_t			slock;
-
-	int open_count;
-
-	/* clock */
-	struct clk	*clk_disp_axi;
-	struct clk	*clk_disp_dcic;
-	struct clk	*clk_csi_mclk;
-
-	void __iomem *regbase;
-	int irq;
-
-	u32      nextfb;
-	u32      skipframe;
-	u32	 type;
-	u32 bytesperline;
-	v4l2_std_id std;
-	struct mx6s_fmt		*fmt;
-	struct v4l2_pix_format pix;
-	u32 mbus_code;
-
-	unsigned int frame_count;
-
-	struct list_head	capture;
-	struct list_head	active_bufs;
-	struct list_head	discard;
-
-	void						*discard_buffer;
-	dma_addr_t					discard_buffer_dma;
-	size_t						discard_size;
-	struct mx6s_buf_internal	buf_discard[2];
-
-	struct fwnode_handle *fwnode;
-	struct v4l2_async_notifier	subdev_notifier;
-
-	bool csi_mipi_mode;
-	bool csi_two_8bit_sensor_mode;
-	const struct mx6s_csi_soc *soc;
-	struct mx6s_csi_mux csi_mux;
-};
-
-static const struct of_device_id mx6s_csi_dt_ids[];
-
-static inline int csi_read(struct mx6s_csi_dev *csi, unsigned int offset)
-{
-	return __raw_readl(csi->regbase + offset);
-}
-static inline void csi_write(struct mx6s_csi_dev *csi, unsigned int value,
-			     unsigned int offset)
-{
-	__raw_writel(value, csi->regbase + offset);
-}
-
-static inline struct mx6s_csi_dev
-				*notifier_to_mx6s_dev(struct v4l2_async_notifier *n)
-{
-	return container_of(n, struct mx6s_csi_dev, subdev_notifier);
-}
-
-struct mx6s_fmt *format_by_fourcc(int fourcc)
-{
-	int i;
-
-	for (i = 0; i < NUM_FORMATS; i++) {
-		if (formats[i].pixelformat == fourcc)
-			return formats + i;
-	}
-
-	pr_err("unknown pixelformat:'%4.4s'\n", (char *)&fourcc);
-	return NULL;
-}
-
-struct mx6s_fmt *format_by_mbus(u32 code)
-{
-	int i;
-
-	for (i = 0; i < NUM_FORMATS; i++) {
-		if (formats[i].mbus_code == code)
-			return formats + i;
-	}
-
-	pr_err("unknown mbus:0x%x\n", code);
-	return NULL;
-}
-
-static struct mx6s_buffer *mx6s_ibuf_to_buf(struct mx6s_buf_internal *int_buf)
-{
-	return container_of(int_buf, struct mx6s_buffer, internal);
-}
-
-void csi_clk_enable(struct mx6s_csi_dev *csi_dev)
-{
-	clk_prepare_enable(csi_dev->clk_disp_axi);
-	clk_prepare_enable(csi_dev->clk_disp_dcic);
-	clk_prepare_enable(csi_dev->clk_csi_mclk);
-}
-
-void csi_clk_disable(struct mx6s_csi_dev *csi_dev)
-{
-	clk_disable_unprepare(csi_dev->clk_csi_mclk);
-	clk_disable_unprepare(csi_dev->clk_disp_dcic);
-	clk_disable_unprepare(csi_dev->clk_disp_axi);
-}
-
-static void csihw_reset(struct mx6s_csi_dev *csi_dev)
-{
-	__raw_writel(__raw_readl(csi_dev->regbase + CSI_CSICR3)
-			| BIT_FRMCNT_RST,
-			csi_dev->regbase + CSI_CSICR3);
-
-	__raw_writel(CSICR1_RESET_VAL, csi_dev->regbase + CSI_CSICR1);
-	__raw_writel(CSICR2_RESET_VAL, csi_dev->regbase + CSI_CSICR2);
-	__raw_writel(CSICR3_RESET_VAL, csi_dev->regbase + CSI_CSICR3);
-}
-
-static void csisw_reset(struct mx6s_csi_dev *csi_dev)
-{
-	int cr1, cr3, cr18, isr;
-
-	/* Disable csi  */
-	cr18 = csi_read(csi_dev, CSI_CSICR18);
-	cr18 &= ~BIT_CSI_ENABLE;
-	csi_write(csi_dev, cr18, CSI_CSICR18);
-
-	/* Clear RX FIFO */
-	cr1 = csi_read(csi_dev, CSI_CSICR1);
-	csi_write(csi_dev, cr1 & ~BIT_FCC, CSI_CSICR1);
-	cr1 = csi_read(csi_dev, CSI_CSICR1);
-	csi_write(csi_dev, cr1 | BIT_CLR_RXFIFO, CSI_CSICR1);
-
-	/* DMA reflash */
-	cr3 = csi_read(csi_dev, CSI_CSICR3);
-	cr3 |= BIT_DMA_REFLASH_RFF | BIT_FRMCNT_RST;
-	csi_write(csi_dev, cr3, CSI_CSICR3);
-
-	msleep(2);
-
-	cr1 = csi_read(csi_dev, CSI_CSICR1);
-	csi_write(csi_dev, cr1 | BIT_FCC, CSI_CSICR1);
-
-	isr = csi_read(csi_dev, CSI_CSISR);
-	csi_write(csi_dev, isr, CSI_CSISR);
-
-	cr18 |= csi_dev->soc->baseaddr_switch;
-
-	/* Enable csi  */
-	cr18 |= BIT_CSI_ENABLE;
-	csi_write(csi_dev, cr18, CSI_CSICR18);
-}
-
-/*!
- * csi_init_interface
- *    Init csi interface
- */
-static void csi_init_interface(struct mx6s_csi_dev *csi_dev)
-{
-	unsigned int val = 0;
-	unsigned int imag_para;
-
-	val |= BIT_SOF_POL;
-	val |= BIT_REDGE;
-	val |= BIT_GCLK_MODE;
-	val |= BIT_HSYNC_POL;
-	val |= BIT_FCC;
-	val |= 1 << SHIFT_MCLKDIV;
-	val |= BIT_MCLKEN;
-	__raw_writel(val, csi_dev->regbase + CSI_CSICR1);
-
-	imag_para = (640 << 16) | 960;
-	__raw_writel(imag_para, csi_dev->regbase + CSI_CSIIMAG_PARA);
-
-	val = BIT_DMA_REFLASH_RFF;
-	__raw_writel(val, csi_dev->regbase + CSI_CSICR3);
-}
-
-static void csi_enable_int(struct mx6s_csi_dev *csi_dev, int arg)
-{
-	unsigned long cr1 = __raw_readl(csi_dev->regbase + CSI_CSICR1);
-
-	cr1 |= BIT_SOF_INTEN;
-	cr1 |= BIT_RFF_OR_INT;
-	if (arg == 1) {
-		/* still capture needs DMA intterrupt */
-		cr1 |= BIT_FB1_DMA_DONE_INTEN;
-		cr1 |= BIT_FB2_DMA_DONE_INTEN;
-	}
-	__raw_writel(cr1, csi_dev->regbase + CSI_CSICR1);
-}
-
-static void csi_disable_int(struct mx6s_csi_dev *csi_dev)
-{
-	unsigned long cr1 = __raw_readl(csi_dev->regbase + CSI_CSICR1);
-
-	cr1 &= ~BIT_SOF_INTEN;
-	cr1 &= ~BIT_RFF_OR_INT;
-	cr1 &= ~BIT_FB1_DMA_DONE_INTEN;
-	cr1 &= ~BIT_FB2_DMA_DONE_INTEN;
-	__raw_writel(cr1, csi_dev->regbase + CSI_CSICR1);
-}
-
-static void csi_enable(struct mx6s_csi_dev *csi_dev, int arg)
-{
-	unsigned long cr = __raw_readl(csi_dev->regbase + CSI_CSICR18);
-
-	if (arg == 1)
-		cr |= BIT_CSI_ENABLE;
-	else
-		cr &= ~BIT_CSI_ENABLE;
-	__raw_writel(cr, csi_dev->regbase + CSI_CSICR18);
-}
-
-static void csi_buf_stride_set(struct mx6s_csi_dev *csi_dev, u32 stride)
-{
-	__raw_writel(stride, csi_dev->regbase + CSI_CSIFBUF_PARA);
-}
-
-static void csi_deinterlace_enable(struct mx6s_csi_dev *csi_dev, bool enable)
-{
-	unsigned long cr18 = __raw_readl(csi_dev->regbase + CSI_CSICR18);
-
-	if (enable == true)
-		cr18 |= BIT_DEINTERLACE_EN;
-	else
-		cr18 &= ~BIT_DEINTERLACE_EN;
-
-	__raw_writel(cr18, csi_dev->regbase + CSI_CSICR18);
-}
-
-static void csi_deinterlace_mode(struct mx6s_csi_dev *csi_dev, int mode)
-{
-	unsigned long cr18 = __raw_readl(csi_dev->regbase + CSI_CSICR18);
-
-	if (mode == V4L2_STD_NTSC)
-		cr18 |= BIT_NTSC_EN;
-	else
-		cr18 &= ~BIT_NTSC_EN;
-
-	__raw_writel(cr18, csi_dev->regbase + CSI_CSICR18);
-}
-
-static void csi_tvdec_enable(struct mx6s_csi_dev *csi_dev, bool enable)
-{
-	unsigned long cr18 = __raw_readl(csi_dev->regbase + CSI_CSICR18);
-	unsigned long cr1 = __raw_readl(csi_dev->regbase + CSI_CSICR1);
-
-	if (enable == true) {
-		cr18 |= (BIT_TVDECODER_IN_EN |
-				BIT_BASEADDR_SWITCH_EN |
-				BIT_BASEADDR_SWITCH_SEL |
-				BIT_BASEADDR_CHG_ERR_EN);
-		cr1 |= BIT_CCIR_MODE;
-		cr1 &= ~(BIT_SOF_POL | BIT_REDGE);
-	} else {
-		cr18 &= ~(BIT_TVDECODER_IN_EN |
-				BIT_BASEADDR_SWITCH_EN |
-				BIT_BASEADDR_SWITCH_SEL |
-				BIT_BASEADDR_CHG_ERR_EN);
-		cr1 &= ~BIT_CCIR_MODE;
-		cr1 |= BIT_SOF_POL | BIT_REDGE;
-	}
-
-	__raw_writel(cr18, csi_dev->regbase + CSI_CSICR18);
-	__raw_writel(cr1, csi_dev->regbase + CSI_CSICR1);
-}
-
-static void csi_dmareq_rff_enable(struct mx6s_csi_dev *csi_dev)
-{
-	unsigned long cr3 = __raw_readl(csi_dev->regbase + CSI_CSICR3);
-	unsigned long cr2 = __raw_readl(csi_dev->regbase + CSI_CSICR2);
-
-	/* Burst Type of DMA Transfer from RxFIFO. INCR16 */
-	cr2 |= 0xC0000000;
-
-	cr3 |= BIT_DMA_REQ_EN_RFF;
-	cr3 |= BIT_HRESP_ERR_EN;
-	cr3 &= ~BIT_RXFF_LEVEL;
-	cr3 |= 0x2 << 4;
-	if (csi_dev->csi_two_8bit_sensor_mode){
-		cr3 |= BIT_TWO_8BIT_SENSOR;
-    } else {
-        cr3 &= ~BIT_TWO_8BIT_SENSOR;
-    }
-
-	__raw_writel(cr3, csi_dev->regbase + CSI_CSICR3);
-	__raw_writel(cr2, csi_dev->regbase + CSI_CSICR2);
-}
-
-static void csi_dmareq_rff_disable(struct mx6s_csi_dev *csi_dev)
-{
-	unsigned long cr3 = __raw_readl(csi_dev->regbase + CSI_CSICR3);
-
-	cr3 &= ~BIT_DMA_REQ_EN_RFF;
-	cr3 &= ~BIT_HRESP_ERR_EN;
-	__raw_writel(cr3, csi_dev->regbase + CSI_CSICR3);
-}
-
-static void csi_set_imagpara(struct mx6s_csi_dev *csi,
-					int width, int height)
-{
-	int imag_para = 0;
-	unsigned long cr3 = __raw_readl(csi->regbase + CSI_CSICR3);
-
-	imag_para = (width << 16) | height;
-	__raw_writel(imag_para, csi->regbase + CSI_CSIIMAG_PARA);
-
-	/* reflash the embeded DMA controller */
-	__raw_writel(cr3 | BIT_DMA_REFLASH_RFF, csi->regbase + CSI_CSICR3);
-}
-
-static void csi_error_recovery(struct mx6s_csi_dev *csi_dev)
-{
-	u32 cr1, cr3, cr18;
-	/* software reset */
-
-	/* Disable csi  */
-	cr18 = csi_read(csi_dev, CSI_CSICR18);
-	cr18 &= ~BIT_CSI_ENABLE;
-	csi_write(csi_dev, cr18, CSI_CSICR18);
-
-	/* Clear RX FIFO */
-	cr1 = csi_read(csi_dev, CSI_CSICR1);
-	csi_write(csi_dev, cr1 & ~BIT_FCC, CSI_CSICR1);
-	cr1 = csi_read(csi_dev, CSI_CSICR1);
-	csi_write(csi_dev, cr1 | BIT_CLR_RXFIFO, CSI_CSICR1);
-
-	cr1 = csi_read(csi_dev, CSI_CSICR1);
-	csi_write(csi_dev, cr1 | BIT_FCC, CSI_CSICR1);
-
-	/* DMA reflash */
-	cr3 = csi_read(csi_dev, CSI_CSICR3);
-	cr3 |= BIT_DMA_REFLASH_RFF;
-	csi_write(csi_dev, cr3, CSI_CSICR3);
-
-	/* Ensable csi  */
-	cr18 |= BIT_CSI_ENABLE;
-	csi_write(csi_dev, cr18, CSI_CSICR18);
-}
-
-/*
- *  Videobuf operations
- */
-static int mx6s_videobuf_setup(struct vb2_queue *vq,
-			unsigned int *count, unsigned int *num_planes,
-			unsigned int sizes[], struct device *alloc_devs[])
-{
-	struct mx6s_csi_dev *csi_dev = vb2_get_drv_priv(vq);
-
-	dev_dbg(csi_dev->dev, "count=%d, size=%d\n", *count, sizes[0]);
-
-	alloc_devs[0] = csi_dev->dev;
-
-	sizes[0] = csi_dev->pix.sizeimage;
-
-	pr_debug("size=%d\n", sizes[0]);
-	if (0 == *count)
-		*count = 32;
-	if (!*num_planes &&
-	    sizes[0] * *count > MAX_VIDEO_MEM * 1024 * 1024)
-		*count = (MAX_VIDEO_MEM * 1024 * 1024) / sizes[0];
-
-	*num_planes = 1;
-
-	return 0;
-}
-
-static int mx6s_videobuf_prepare(struct vb2_buffer *vb)
-{
-	struct mx6s_csi_dev *csi_dev = vb2_get_drv_priv(vb->vb2_queue);
-	int ret = 0;
-
-	dev_dbg(csi_dev->dev, "%s (vb=0x%p) 0x%p %lu\n", __func__,
-		vb, vb2_plane_vaddr(vb, 0), vb2_get_plane_payload(vb, 0));
-
-#ifdef DEBUG
-	/*
-	 * This can be useful if you want to see if we actually fill
-	 * the buffer with something
-	 */
-	if (vb2_plane_vaddr(vb, 0))
-		memset((void *)vb2_plane_vaddr(vb, 0),
-		       0xaa, vb2_get_plane_payload(vb, 0));
-#endif
-
-	vb2_set_plane_payload(vb, 0, csi_dev->pix.sizeimage);
-	if (vb2_plane_vaddr(vb, 0) &&
-	    vb2_get_plane_payload(vb, 0) > vb2_plane_size(vb, 0)) {
-		ret = -EINVAL;
-		goto out;
-	}
-
-	return 0;
-
-out:
-	return ret;
-}
-
-static void mx6s_videobuf_queue(struct vb2_buffer *vb)
-{
-	struct vb2_v4l2_buffer *vbuf = to_vb2_v4l2_buffer(vb);
-	struct mx6s_csi_dev *csi_dev = vb2_get_drv_priv(vb->vb2_queue);
-	struct mx6s_buffer *buf = container_of(vbuf, struct mx6s_buffer, vb);
-	unsigned long flags;
-
-	dev_dbg(csi_dev->dev, "%s (vb=0x%p) 0x%p %lu\n", __func__,
-		vb, vb2_plane_vaddr(vb, 0), vb2_get_plane_payload(vb, 0));
-
-	spin_lock_irqsave(&csi_dev->slock, flags);
-
-	list_add_tail(&buf->internal.queue, &csi_dev->capture);
-
-	spin_unlock_irqrestore(&csi_dev->slock, flags);
-}
-
-static void mx6s_update_csi_buf(struct mx6s_csi_dev *csi_dev,
-				 unsigned long phys, int bufnum)
-{
-	if (bufnum == 1)
-		csi_write(csi_dev, phys, CSI_CSIDMASA_FB2);
-	else
-		csi_write(csi_dev, phys, CSI_CSIDMASA_FB1);
-}
-
-static void mx6s_csi_init(struct mx6s_csi_dev *csi_dev)
-{
-	csi_clk_enable(csi_dev);
-	csihw_reset(csi_dev);
-	csi_init_interface(csi_dev);
-	csi_dmareq_rff_disable(csi_dev);
-}
-
-static void mx6s_csi_deinit(struct mx6s_csi_dev *csi_dev)
-{
-	csihw_reset(csi_dev);
-	csi_init_interface(csi_dev);
-	csi_dmareq_rff_disable(csi_dev);
-	csi_clk_disable(csi_dev);
-}
-
-static int mx6s_csi_enable(struct mx6s_csi_dev *csi_dev)
-{
-	struct v4l2_pix_format *pix = &csi_dev->pix;
-	unsigned long flags;
-	unsigned long val;
-	int timeout, timeout2;
-
-    csi_dev->skipframe = 3;
-	csisw_reset(csi_dev);
-
-	if (pix->field == V4L2_FIELD_INTERLACED)
-		csi_tvdec_enable(csi_dev, true);
-
-	/* For mipi csi input only */
-	if (csi_dev->csi_mipi_mode == true) {
-		csi_dmareq_rff_enable(csi_dev);
-		csi_enable_int(csi_dev, 1);
-		csi_enable(csi_dev, 1);
-		return 0;
-	}
-
-	local_irq_save(flags);
-    for (timeout = 10000000; timeout > 0; timeout--) {
-		if (csi_read(csi_dev, CSI_CSISR) & BIT_SOF_INT) {
-			val = csi_read(csi_dev, CSI_CSICR3);
-			csi_write(csi_dev, val | BIT_DMA_REFLASH_RFF,
-					CSI_CSICR3);
-			/* Wait DMA reflash done */
-            for (timeout2 = 1000000; timeout2 > 0; timeout2--) {
-				if (csi_read(csi_dev, CSI_CSICR3) &
-					BIT_DMA_REFLASH_RFF)
-					cpu_relax();
-				else
-					break;
-			}
-			if (timeout2 <= 0) {
-				pr_err("timeout when wait for reflash done.\n");
-				local_irq_restore(flags);
-				return -ETIME;
-			}
-			/* For imx6sl csi, DMA FIFO will auto start when sensor ready to work,
-			 * so DMA should enable right after FIFO reset, otherwise dma will lost data
-			 * and image will split.
-			 */
-			csi_dmareq_rff_enable(csi_dev);
-			csi_enable_int(csi_dev, 1);
-			csi_enable(csi_dev, 1);
-			break;
-		} else
-			cpu_relax();
-	}
-	if (timeout <= 0) {
-		pr_err("timeout when wait for SOF\n");
-		local_irq_restore(flags);
-		return -ETIME;
-	}
-	local_irq_restore(flags);
-
-	return 0;
-}
-
-static void mx6s_csi_disable(struct mx6s_csi_dev *csi_dev)
-{
-	struct v4l2_pix_format *pix = &csi_dev->pix;
-
-	csi_dmareq_rff_disable(csi_dev);
-	csi_disable_int(csi_dev);
-
-	/* set CSI_CSIDMASA_FB1 and CSI_CSIDMASA_FB2 to default value */
-	csi_write(csi_dev, 0, CSI_CSIDMASA_FB1);
-	csi_write(csi_dev, 0, CSI_CSIDMASA_FB2);
-
-	csi_buf_stride_set(csi_dev, 0);
-
-	if (pix->field == V4L2_FIELD_INTERLACED) {
-		csi_deinterlace_enable(csi_dev, false);
-		csi_tvdec_enable(csi_dev, false);
-	}
-
-	csi_enable(csi_dev, 0);
-}
-
-static int mx6s_configure_csi(struct mx6s_csi_dev *csi_dev)
-{
-	struct v4l2_pix_format *pix = &csi_dev->pix;
-	u32 cr1, cr18;
-	u32 width;
-
-	if (pix->field == V4L2_FIELD_INTERLACED) {
-		csi_deinterlace_enable(csi_dev, true);
-		csi_buf_stride_set(csi_dev, csi_dev->pix.width);
-		csi_deinterlace_mode(csi_dev, csi_dev->std);
-	} else {
-		csi_deinterlace_enable(csi_dev, false);
-		csi_buf_stride_set(csi_dev, 0);
-	}
-
-	switch (csi_dev->fmt->pixelformat) {
-	case V4L2_PIX_FMT_UYVY:
-	case V4L2_PIX_FMT_YUYV:
-		if (csi_dev->csi_mipi_mode == true)
-			width = pix->width;
-		else
-			/* For parallel 8-bit sensor input */
-			width = pix->width * 2;
-		break;
-	default:
-		width = pix->width;
-		break;
-	}
-
-    switch (csi_dev->fmt->pixelformat) {
-    case V4L2_PIX_FMT_GREY:
-	case V4L2_PIX_FMT_SBGGR8:
-    case V4L2_PIX_FMT_SRGGB8:
-	case V4L2_PIX_FMT_SGBRG8:
-        csi_dev->csi_two_8bit_sensor_mode = false;
-        break;
-	default:
-		csi_dev->csi_two_8bit_sensor_mode = true;
-		break;
-	}
-
-	csi_set_imagpara(csi_dev, width, pix->height);
-
-	if (csi_dev->csi_mipi_mode == true) {
-		cr1 = csi_read(csi_dev, CSI_CSICR1);
-		cr1 &= ~BIT_GCLK_MODE;
-		csi_write(csi_dev, cr1, CSI_CSICR1);
-
-		cr18 = csi_read(csi_dev, CSI_CSICR18);
-		cr18 &= ~BIT_MIPI_DATA_FORMAT_MASK;
-		cr18 |= BIT_DATA_FROM_MIPI;
-
-		switch (csi_dev->fmt->pixelformat) {
-		case V4L2_PIX_FMT_UYVY:
-		case V4L2_PIX_FMT_YUYV:
-			cr18 |= BIT_MIPI_DATA_FORMAT_YUV422_8B;
-			break;
-		case V4L2_PIX_FMT_SBGGR8:
-		case V4L2_PIX_FMT_GREY:
-        case V4L2_PIX_FMT_SRGGB8:
-		case V4L2_PIX_FMT_SGBRG8:
-			cr18 |= BIT_MIPI_DATA_FORMAT_RAW8;
-            break;
-        case V4L2_PIX_FMT_Y10:
-        case V4L2_PIX_FMT_SRGGB10:
-        case V4L2_PIX_FMT_SGBRG10:
-            cr18 |= BIT_MIPI_DATA_FORMAT_RAW10;
-            break;
-        case V4L2_PIX_FMT_Y12:
-        case V4L2_PIX_FMT_SRGGB12:
-		case V4L2_PIX_FMT_SGBRG12:
-            cr18 |= BIT_MIPI_DATA_FORMAT_RAW12;
-			break;
-		case V4L2_PIX_FMT_Y14:
-        case V4L2_PIX_FMT_SRGGB14:
-		case V4L2_PIX_FMT_SGBRG14:
-            cr18 |= BIT_MIPI_DATA_FORMAT_RAW14;
-			break;
-		default:
-			pr_debug("   fmt not supported\n");
-			return -EINVAL;
-		}
-
-		csi_write(csi_dev, cr18, CSI_CSICR18);
-	}
-	return 0;
-}
-
-static int mx6s_start_streaming(struct vb2_queue *vq, unsigned int count)
-{
-	struct mx6s_csi_dev *csi_dev = vb2_get_drv_priv(vq);
-	struct vb2_buffer *vb;
-	struct mx6s_buffer *buf;
-	unsigned long phys;
-	unsigned long flags;
-
-	if (count < 2)
-		return -ENOBUFS;
-
-	/*
-	 * I didn't manage to properly enable/disable
-	 * a per frame basis during running transfers,
-	 * thus we allocate a buffer here and use it to
-	 * discard frames when no buffer is available.
-	 * Feel free to work on this ;)
-	 */
-	csi_dev->discard_size = csi_dev->pix.sizeimage;
-	csi_dev->discard_buffer = dma_alloc_coherent(csi_dev->v4l2_dev.dev,
-					PAGE_ALIGN(csi_dev->discard_size),
-					&csi_dev->discard_buffer_dma,
-					GFP_DMA | GFP_KERNEL);
-	if (!csi_dev->discard_buffer)
-		return -ENOMEM;
-
-	spin_lock_irqsave(&csi_dev->slock, flags);
-
-	csi_dev->buf_discard[0].discard = true;
-	list_add_tail(&csi_dev->buf_discard[0].queue,
-		      &csi_dev->discard);
-
-	csi_dev->buf_discard[1].discard = true;
-	list_add_tail(&csi_dev->buf_discard[1].queue,
-		      &csi_dev->discard);
-
-	/* csi buf 0 */
-	buf = list_first_entry(&csi_dev->capture, struct mx6s_buffer,
-			       internal.queue);
-	buf->internal.bufnum = 0;
-	vb = &buf->vb.vb2_buf;
-	vb->state = VB2_BUF_STATE_ACTIVE;
-
-	phys = vb2_dma_contig_plane_dma_addr(vb, 0);
-
-	mx6s_update_csi_buf(csi_dev, phys, buf->internal.bufnum);
-	list_move_tail(csi_dev->capture.next, &csi_dev->active_bufs);
-
-	/* csi buf 1 */
-	buf = list_first_entry(&csi_dev->capture, struct mx6s_buffer,
-			       internal.queue);
-	buf->internal.bufnum = 1;
-	vb = &buf->vb.vb2_buf;
-	vb->state = VB2_BUF_STATE_ACTIVE;
-
-	phys = vb2_dma_contig_plane_dma_addr(vb, 0);
-	mx6s_update_csi_buf(csi_dev, phys, buf->internal.bufnum);
-	list_move_tail(csi_dev->capture.next, &csi_dev->active_bufs);
-
-	csi_dev->nextfb = 0;
-
-	spin_unlock_irqrestore(&csi_dev->slock, flags);
-
-	return mx6s_csi_enable(csi_dev);
-}
-
-static void mx6s_stop_streaming(struct vb2_queue *vq)
-{
-	struct mx6s_csi_dev *csi_dev = vb2_get_drv_priv(vq);
-	unsigned long flags;
-	struct mx6s_buffer *buf, *tmp;
-	void *b;
-
-	mx6s_csi_disable(csi_dev);
-
-	spin_lock_irqsave(&csi_dev->slock, flags);
-
-	list_for_each_entry_safe(buf, tmp,
-				&csi_dev->active_bufs, internal.queue) {
-		list_del_init(&buf->internal.queue);
-		if (buf->internal.discard == false &&
-		    buf->vb.vb2_buf.state == VB2_BUF_STATE_ACTIVE)
-			vb2_buffer_done(&buf->vb.vb2_buf, VB2_BUF_STATE_ERROR);
-	}
-
-	list_for_each_entry_safe(buf, tmp,
-				&csi_dev->capture, internal.queue) {
-		list_del_init(&buf->internal.queue);
-		if (buf->vb.vb2_buf.state == VB2_BUF_STATE_ACTIVE)
-			vb2_buffer_done(&buf->vb.vb2_buf, VB2_BUF_STATE_ERROR);
-	}
-
-	INIT_LIST_HEAD(&csi_dev->capture);
-	INIT_LIST_HEAD(&csi_dev->active_bufs);
-	INIT_LIST_HEAD(&csi_dev->discard);
-
-	b = csi_dev->discard_buffer;
-	csi_dev->discard_buffer = NULL;
-
-	spin_unlock_irqrestore(&csi_dev->slock, flags);
-
-	dma_free_coherent(csi_dev->v4l2_dev.dev,
-				csi_dev->discard_size, b,
-				csi_dev->discard_buffer_dma);
-}
-
-static struct vb2_ops mx6s_videobuf_ops = {
-	.queue_setup     = mx6s_videobuf_setup,
-	.buf_prepare     = mx6s_videobuf_prepare,
-	.buf_queue       = mx6s_videobuf_queue,
-	.wait_prepare    = vb2_ops_wait_prepare,
-	.wait_finish     = vb2_ops_wait_finish,
-	.start_streaming = mx6s_start_streaming,
-	.stop_streaming	 = mx6s_stop_streaming,
-};
-
-static void mx6s_csi_frame_done(struct mx6s_csi_dev *csi_dev,
-		int bufnum, bool err)
-{
-	struct mx6s_buf_internal *ibuf;
-	struct mx6s_buffer *buf;
-	struct vb2_buffer *vb;
-	unsigned long phys;
-	unsigned int phys_fb1;
-	unsigned int phys_fb2;
-
-	ibuf = list_first_entry(&csi_dev->active_bufs, struct mx6s_buf_internal,
-			       queue);
-
-	if (ibuf->discard) {
-		/*
-		 * Discard buffer must not be returned to user space.
-		 * Just return it to the discard queue.
-		 */
-		list_move_tail(csi_dev->active_bufs.next, &csi_dev->discard);
-	} else {
-		buf = mx6s_ibuf_to_buf(ibuf);
-
-		vb = &buf->vb.vb2_buf;
-		phys = vb2_dma_contig_plane_dma_addr(vb, 0);
-		if (bufnum == 1) {
-			phys_fb2 = csi_read(csi_dev, CSI_CSIDMASA_FB2);
-			if (phys_fb2 != (u32)phys) {
-				dev_err(csi_dev->dev, "%lx != %x\n", phys,
-					phys_fb2);
-			}
-		} else {
-			phys_fb1 = csi_read(csi_dev, CSI_CSIDMASA_FB1);
-			if (phys_fb1 != (u32)phys) {
-				dev_err(csi_dev->dev, "%lx != %x\n", phys,
-					phys_fb1);
-			}
-		}
-		dev_dbg(csi_dev->dev, "%s (vb=0x%p) 0x%p %lu\n", __func__, vb,
-				vb2_plane_vaddr(vb, 0),
-				vb2_get_plane_payload(vb, 0));
-
-		list_del_init(&buf->internal.queue);
-		vb->timestamp =ktime_get_ns();
-		to_vb2_v4l2_buffer(vb)->sequence = csi_dev->frame_count;
-		if (err)
-			vb2_buffer_done(vb, VB2_BUF_STATE_ERROR);
-		else
-			vb2_buffer_done(vb, VB2_BUF_STATE_DONE);
-	}
-
-	csi_dev->frame_count++;
-	csi_dev->nextfb = (bufnum == 0 ? 1 : 0);
-
-	/* Config discard buffer to active_bufs */
-	if (list_empty(&csi_dev->capture)) {
-		if (list_empty(&csi_dev->discard)) {
-			dev_warn(csi_dev->dev,
-					"%s: trying to access empty discard list\n",
-					__func__);
-			return;
-		}
-
-		ibuf = list_first_entry(&csi_dev->discard,
-					struct mx6s_buf_internal, queue);
-		ibuf->bufnum = bufnum;
-
-		list_move_tail(csi_dev->discard.next, &csi_dev->active_bufs);
-
-		mx6s_update_csi_buf(csi_dev,
-					csi_dev->discard_buffer_dma, bufnum);
-		return;
-	}
-
-	buf = list_first_entry(&csi_dev->capture, struct mx6s_buffer,
-			       internal.queue);
-
-	buf->internal.bufnum = bufnum;
-
-	list_move_tail(csi_dev->capture.next, &csi_dev->active_bufs);
-
-	vb = &buf->vb.vb2_buf;
-	vb->state = VB2_BUF_STATE_ACTIVE;
-
-	phys = vb2_dma_contig_plane_dma_addr(vb, 0);
-	mx6s_update_csi_buf(csi_dev, phys, bufnum);
-}
-
-static irqreturn_t mx6s_csi_irq_handler(int irq, void *data)
-{
-	struct mx6s_csi_dev *csi_dev =  data;
-	unsigned long status;
-	u32 cr3, cr18;
-
-	spin_lock(&csi_dev->slock);
-
-	status = csi_read(csi_dev, CSI_CSISR);
-	csi_write(csi_dev, status, CSI_CSISR);
-
-	if (list_empty(&csi_dev->active_bufs)) {
-		dev_warn(csi_dev->dev,
-				"%s: called while active list is empty\n",
-				__func__);
-
-		spin_unlock(&csi_dev->slock);
-		return IRQ_HANDLED;
-	}
-
-	if (status & BIT_RFF_OR_INT) {
-		dev_warn(csi_dev->dev, "%s Rx fifo overflow\n", __func__);
-		if (csi_dev->soc->rx_fifo_rst)
-			csi_error_recovery(csi_dev);
-	}
-
-	if (status & BIT_HRESP_ERR_INT) {
-		dev_warn(csi_dev->dev, "%s Hresponse error detected\n",
-			__func__);
-		csi_error_recovery(csi_dev);
-	}
-
-	if (status & BIT_ADDR_CH_ERR_INT) {
-		/* Disable csi  */
-		cr18 = csi_read(csi_dev, CSI_CSICR18);
-		cr18 &= ~BIT_CSI_ENABLE;
-		csi_write(csi_dev, cr18, CSI_CSICR18);
-
-		/* DMA reflash */
-		cr3 = csi_read(csi_dev, CSI_CSICR3);
-		cr3 |= BIT_DMA_REFLASH_RFF;
-		csi_write(csi_dev, cr3, CSI_CSICR3);
-
-		/* Ensable csi  */
-		cr18 |= BIT_CSI_ENABLE;
-		csi_write(csi_dev, cr18, CSI_CSICR18);
-
-		csi_dev->skipframe++;
-		pr_debug("base address switching Change Err.\n");
-	}
-
-	if ((status & BIT_DMA_TSF_DONE_FB1) &&
-		(status & BIT_DMA_TSF_DONE_FB2)) {
-		/* For both FB1 and FB2 interrupter bits set case,
-		 * CSI DMA is work in one of FB1 and FB2 buffer,
-		 * but software can not know the state.
-		 * Skip it to avoid base address updated
-		 * when csi work in field0 and field1 will write to
-		 * new base address.
-		 * PDM TKT230775 */
-        pr_debug("Skip two frames\n");
-	} else if (status & BIT_DMA_TSF_DONE_FB1) {
-		if (csi_dev->nextfb == 0) {
-			if (csi_dev->skipframe > 0)
-				csi_dev->skipframe--;
-			else
-				mx6s_csi_frame_done(csi_dev, 0, false);
-		} else
-			pr_warn("skip frame 0\n");
-
-	} else if (status & BIT_DMA_TSF_DONE_FB2) {
-		if (csi_dev->nextfb == 1) {
-			if (csi_dev->skipframe > 0)
-				csi_dev->skipframe--;
-			else
-				mx6s_csi_frame_done(csi_dev, 1, false);
-		} else
-			pr_warn("skip frame 1\n");
-	}
-
-	spin_unlock(&csi_dev->slock);
-
-	return IRQ_HANDLED;
-}
-
-/*
- * File operations for the device
- */
-static int mx6s_csi_open(struct file *file)
-{
-	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
-	struct v4l2_subdev *sd = csi_dev->sd;
-	struct vb2_queue *q = &csi_dev->vb2_vidq;
-	int ret = 0;
-
-	file->private_data = csi_dev;
-
-	if (mutex_lock_interruptible(&csi_dev->lock))
-		return -ERESTARTSYS;
-
-	if (csi_dev->open_count++ == 0) {
-		q->type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
-		q->io_modes = VB2_MMAP | VB2_USERPTR;
-		q->drv_priv = csi_dev;
-		q->ops = &mx6s_videobuf_ops;
-		q->mem_ops = &vb2_dma_contig_memops;
-		q->buf_struct_size = sizeof(struct mx6s_buffer);
-		q->timestamp_flags = V4L2_BUF_FLAG_TIMESTAMP_MONOTONIC;
-		q->lock = &csi_dev->lock;
-
-		ret = vb2_queue_init(q);
-		if (ret < 0)
-			goto unlock;
-
-		pm_runtime_get_sync(csi_dev->dev);
-
-		request_bus_freq(BUS_FREQ_HIGH);
-
-		v4l2_subdev_call(sd, core, s_power, 1);
-		mx6s_csi_init(csi_dev);
-
-	}
-	mutex_unlock(&csi_dev->lock);
-
-	return ret;
-unlock:
-	mutex_unlock(&csi_dev->lock);
-	return ret;
-}
-
-static int mx6s_csi_close(struct file *file)
-{
-	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
-	struct v4l2_subdev *sd = csi_dev->sd;
-
-	mutex_lock(&csi_dev->lock);
-
-	if (--csi_dev->open_count == 0) {
-		vb2_queue_release(&csi_dev->vb2_vidq);
-
-		mx6s_csi_deinit(csi_dev);
-		v4l2_subdev_call(sd, core, s_power, 0);
-
-		file->private_data = NULL;
-
-		release_bus_freq(BUS_FREQ_HIGH);
-
-		pm_runtime_put_sync_suspend(csi_dev->dev);
-	}
-	mutex_unlock(&csi_dev->lock);
-
-	return 0;
-}
-
-static ssize_t mx6s_csi_read(struct file *file, char __user *buf,
-			       size_t count, loff_t *ppos)
-{
-	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
-	int ret;
-
-	dev_dbg(csi_dev->dev, "read called, buf %p\n", buf);
-
-	mutex_lock(&csi_dev->lock);
-	ret = vb2_read(&csi_dev->vb2_vidq, buf, count, ppos,
-				file->f_flags & O_NONBLOCK);
-	mutex_unlock(&csi_dev->lock);
-	return ret;
-}
-
-static struct v4l2_file_operations mx6s_csi_fops = {
-	.owner		= THIS_MODULE,
-	.open		= mx6s_csi_open,
-	.release	= mx6s_csi_close,
-	.read		= mx6s_csi_read,
-	.poll		= vb2_fop_poll,
-	.unlocked_ioctl	= video_ioctl2, /* V4L2 ioctl handler */
-	.mmap		= vb2_fop_mmap,
-};
-
-/*
- * Video node IOCTLs
- */
-static int mx6s_vidioc_enum_input(struct file *file, void *priv,
-				 struct v4l2_input *inp)
-{
-	if (inp->index != 0)
-		return -EINVAL;
-
-	/* default is camera */
-	inp->type = V4L2_INPUT_TYPE_CAMERA;
-	strcpy(inp->name, "Camera");
-
-	return 0;
-}
-
-static int mx6s_vidioc_g_input(struct file *file, void *priv, unsigned int *i)
-{
-	*i = 0;
-
-	return 0;
-}
-
-static int mx6s_vidioc_s_input(struct file *file, void *priv, unsigned int i)
-{
-	if (i > 0)
-		return -EINVAL;
-
-	return 0;
-}
-
-static int mx6s_vidioc_querystd(struct file *file, void *priv, v4l2_std_id *a)
-{
-	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
-	struct v4l2_subdev *sd = csi_dev->sd;
-
-	return v4l2_subdev_call(sd, video, querystd, a);
-}
-
-static int mx6s_vidioc_s_std(struct file *file, void *priv, v4l2_std_id a)
-{
-	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
-	struct v4l2_subdev *sd = csi_dev->sd;
-
-	return v4l2_subdev_call(sd, video, s_std, a);
-}
-
-static int mx6s_vidioc_g_std(struct file *file, void *priv, v4l2_std_id *a)
-{
-	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
-	struct v4l2_subdev *sd = csi_dev->sd;
-
-	return v4l2_subdev_call(sd, video, g_std, a);
-}
-
-static int mx6s_vidioc_reqbufs(struct file *file, void *priv,
-			      struct v4l2_requestbuffers *p)
-{
-	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
-
-	WARN_ON(priv != file->private_data);
-
-	return vb2_reqbufs(&csi_dev->vb2_vidq, p);
-}
-
-static int mx6s_vidioc_querybuf(struct file *file, void *priv,
-			       struct v4l2_buffer *p)
-{
-	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
-	int ret;
-
-	WARN_ON(priv != file->private_data);
-
-	ret = vb2_querybuf(&csi_dev->vb2_vidq, p);
-
-	if (!ret) {
-		/* return physical address */
-		struct vb2_buffer *vb = csi_dev->vb2_vidq.bufs[p->index];
-		if (p->flags & V4L2_BUF_FLAG_MAPPED)
-			p->m.offset = vb2_dma_contig_plane_dma_addr(vb, 0);
-	}
-	return ret;
-}
-
-static int mx6s_vidioc_qbuf(struct file *file, void *priv,
-			   struct v4l2_buffer *p)
-{
-	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
-
-	WARN_ON(priv != file->private_data);
-
-	return vb2_qbuf(&csi_dev->vb2_vidq, NULL, p);
-}
-
-static int mx6s_vidioc_dqbuf(struct file *file, void *priv,
-			    struct v4l2_buffer *p)
-{
-	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
-
-	WARN_ON(priv != file->private_data);
-
-	return vb2_dqbuf(&csi_dev->vb2_vidq, p, file->f_flags & O_NONBLOCK);
-}
-
-static int mx6s_vidioc_enum_fmt_vid_cap(struct file *file, void  *priv,
-				       struct v4l2_fmtdesc *f)
-{
-	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
-	struct v4l2_subdev *sd = csi_dev->sd;
-	struct v4l2_subdev_mbus_code_enum code = {
-		.which = V4L2_SUBDEV_FORMAT_ACTIVE,
-		.index = f->index,
-	};
-	struct mx6s_fmt *fmt;
-	int ret;
-
-	WARN_ON(priv != file->private_data);
-
-	ret = v4l2_subdev_call(sd, pad, enum_mbus_code, NULL, &code);
-	if (ret < 0) {
-		/* no more formats */
-		dev_dbg(csi_dev->dev, "No more fmt\n");
-		return -EINVAL;
-	}
-
-	fmt = format_by_mbus(code.code);
-	if (!fmt) {
-		dev_err(csi_dev->dev, "mbus (0x%08x) invalid.\n", code.code);
-		return -EINVAL;
-	}
-
-	strlcpy(f->description, fmt->name, sizeof(f->description));
-	f->pixelformat = fmt->pixelformat;
-
-	return 0;
-}
-
-static int mx6s_vidioc_try_fmt_vid_cap(struct file *file, void *priv,
-				      struct v4l2_format *f)
-{
-	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
-	struct v4l2_subdev *sd = csi_dev->sd;
-	struct v4l2_pix_format *pix = &f->fmt.pix;
-	struct v4l2_subdev_format format = {
-		.which = V4L2_SUBDEV_FORMAT_ACTIVE,
-	};
-	struct mx6s_fmt *fmt;
-	int ret;
-
-	fmt = format_by_fourcc(f->fmt.pix.pixelformat);
-	if (!fmt) {
-		dev_err(csi_dev->dev, "Fourcc format (0x%08x) invalid.",
-			f->fmt.pix.pixelformat);
-		return -EINVAL;
-	}
-
-	if (f->fmt.pix.width == 0 || f->fmt.pix.height == 0) {
-		dev_err(csi_dev->dev, "width %d, height %d is too small.\n",
-			f->fmt.pix.width, f->fmt.pix.height);
-		return -EINVAL;
-	}
-
-	v4l2_fill_mbus_format(&format.format, pix, fmt->mbus_code);
-	ret = v4l2_subdev_call(sd, pad, set_fmt, NULL, &format);
-	v4l2_fill_pix_format(pix, &format.format);
-
-	if (pix->field != V4L2_FIELD_INTERLACED)
-		pix->field = V4L2_FIELD_NONE;
-
-	pix->sizeimage = fmt->bpp * pix->height * pix->width;
-	pix->bytesperline = fmt->bpp * pix->width;
-
-	pix->colorspace = V4L2_COLORSPACE_SRGB;
-	pix->ycbcr_enc = V4L2_MAP_YCBCR_ENC_DEFAULT(pix->colorspace);
-	pix->quantization = V4L2_QUANTIZATION_FULL_RANGE;
-
-	return ret;
-}
-
-/*
- * The real work of figuring out a workable format.
- */
-
-static int mx6s_vidioc_s_fmt_vid_cap(struct file *file, void *priv,
-				    struct v4l2_format *f)
-{
-	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
-	int ret;
-
-	ret = mx6s_vidioc_try_fmt_vid_cap(file, csi_dev, f);
-	if (ret < 0)
-		return ret;
-
-	csi_dev->fmt              = format_by_fourcc(f->fmt.pix.pixelformat);
-	csi_dev->mbus_code        = csi_dev->fmt->mbus_code;
-	csi_dev->pix.width        = f->fmt.pix.width;
-	csi_dev->pix.height       = f->fmt.pix.height;
-	csi_dev->pix.sizeimage    = f->fmt.pix.sizeimage;
-    csi_dev->pix.bytesperline = f->fmt.pix.bytesperline;
-    csi_dev->pix.pixelformat  = f->fmt.pix.pixelformat;
-	csi_dev->pix.field        = f->fmt.pix.field;
-	csi_dev->type             = f->type;
-
-	dev_dbg(csi_dev->dev, "set to pixelformat '%4.6s'\n",
-			(char *)&csi_dev->fmt->name);
-
-	/* Config csi */
-	mx6s_configure_csi(csi_dev);
-
-	return 0;
-}
-
-static int mx6s_vidioc_g_fmt_vid_cap(struct file *file, void *priv,
-				    struct v4l2_format *f)
-{
-	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
-
-	WARN_ON(priv != file->private_data);
-
-	f->fmt.pix = csi_dev->pix;
-
-	return 0;
-}
-
-static int mx6s_vidioc_querycap(struct file *file, void  *priv,
-			       struct v4l2_capability *cap)
-{
-	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
-
-	WARN_ON(priv != file->private_data);
-
-	/* cap->name is set by the friendly caller:-> */
-	strlcpy(cap->driver, MX6S_CAM_DRV_NAME, sizeof(cap->driver));
-	strlcpy(cap->card, MX6S_CAM_DRIVER_DESCRIPTION, sizeof(cap->card));
-	snprintf(cap->bus_info, sizeof(cap->bus_info), "platform:%s",
-		 dev_name(csi_dev->dev));
-
-	cap->device_caps = V4L2_CAP_VIDEO_CAPTURE | V4L2_CAP_STREAMING;
-	cap->capabilities = cap->device_caps | V4L2_CAP_DEVICE_CAPS;
-	return 0;
-}
-
-static int mx6s_vidioc_expbuf(struct file *file, void *priv,
-			     struct v4l2_exportbuffer *eb)
-{
-	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
-
-	if (eb->type == V4L2_BUF_TYPE_VIDEO_CAPTURE)
-		return vb2_expbuf(&csi_dev->vb2_vidq, eb);
-
-	return -EINVAL;
-}
-
-static int mx6s_vidioc_streamon(struct file *file, void *priv,
-			       enum v4l2_buf_type i)
-{
-	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
-	struct v4l2_subdev *sd = csi_dev->sd;
-	int ret;
-
-	WARN_ON(priv != file->private_data);
-
-	if (i != V4L2_BUF_TYPE_VIDEO_CAPTURE)
-		return -EINVAL;
-
-	ret = vb2_streamon(&csi_dev->vb2_vidq, i);
-	if (!ret)
-		v4l2_subdev_call(sd, video, s_stream, 1);
-
-	return ret;
-}
-
-static int mx6s_vidioc_streamoff(struct file *file, void *priv,
-				enum v4l2_buf_type i)
-{
-	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
-	struct v4l2_subdev *sd = csi_dev->sd;
-	int ret;
-
-	WARN_ON(priv != file->private_data);
-
-	if (i != V4L2_BUF_TYPE_VIDEO_CAPTURE)
-		return -EINVAL;
-
-	/*
-	 * This calls buf_release from host driver's videobuf_queue_ops for all
-	 * remaining buffers. When the last buffer is freed, stop capture
-	 */
-	ret = vb2_streamoff(&csi_dev->vb2_vidq, i);
-	if (!ret)
-		v4l2_subdev_call(sd, video, s_stream, 0);
-
-	return ret;
-}
-
-static int mx6s_vidioc_g_pixelaspect(struct file *file, void *fh,
-			       int type, struct v4l2_fract *f)
-{
-	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
-
-	if (type != V4L2_BUF_TYPE_VIDEO_CAPTURE)
-		return -EINVAL;
-	dev_dbg(csi_dev->dev, "G_PIXELASPECT not implemented\n");
-
-	return 0;
-}
-
-static int mx6s_vidioc_g_selection(struct file *file, void *priv,
-			     struct v4l2_selection *s)
-{
-	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
-
-	if (s->type != V4L2_BUF_TYPE_VIDEO_CAPTURE)
-		return -EINVAL;
-	dev_dbg(csi_dev->dev, "VIDIOC_G_SELECTION not implemented\n");
-
-	return 0;
-}
-
-static int mx6s_vidioc_s_selection(struct file *file, void *priv,
-			     struct v4l2_selection *s)
-{
-	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
-
-	if (s->type != V4L2_BUF_TYPE_VIDEO_CAPTURE)
-		return -EINVAL;
-
-	dev_dbg(csi_dev->dev, "VIDIOC_S_SELECTION not implemented\n");
-
-	return 0;
-}
-
-static int mx6s_vidioc_g_parm(struct file *file, void *priv,
-			     struct v4l2_streamparm *a)
-{
-	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
-	struct v4l2_subdev *sd = csi_dev->sd;
-
-	return v4l2_subdev_call(sd, video, g_parm, a);
-}
-
-static int mx6s_vidioc_s_parm(struct file *file, void *priv,
-				struct v4l2_streamparm *a)
-{
-	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
-	struct v4l2_subdev *sd = csi_dev->sd;
-
-	return v4l2_subdev_call(sd, video, s_parm, a);
-}
-
-static int mx6s_vidioc_enum_framesizes(struct file *file, void *priv,
-					 struct v4l2_frmsizeenum *fsize)
-{
-	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
-	struct v4l2_subdev *sd = csi_dev->sd;
-	struct mx6s_fmt *fmt;
-	struct v4l2_subdev_frame_size_enum fse = {
-		.index = fsize->index,
-		.which = V4L2_SUBDEV_FORMAT_ACTIVE,
-	};
-	int ret;
-
-	fmt = format_by_fourcc(fsize->pixel_format);
-	if (fmt->pixelformat != fsize->pixel_format)
-		return -EINVAL;
-	fse.code = fmt->mbus_code;
-
-	ret = v4l2_subdev_call(sd, pad, enum_frame_size, NULL, &fse);
-	if (ret)
-		return ret;
-
-	if (fse.min_width == fse.max_width &&
-	    fse.min_height == fse.max_height) {
-		fsize->type = V4L2_FRMSIZE_TYPE_DISCRETE;
-		fsize->discrete.width = fse.min_width;
-		fsize->discrete.height = fse.min_height;
-		return 0;
-	}
-
-	fsize->type = V4L2_FRMSIZE_TYPE_DISCRETE;
-	fsize->stepwise.min_width = fse.min_width;
-	fsize->stepwise.max_width = fse.max_width;
-	fsize->stepwise.min_height = fse.min_height;
-	fsize->stepwise.max_height = fse.max_height;
-	fsize->stepwise.step_width = 1;
-	fsize->stepwise.step_height = 1;
-
-	return 0;
-}
-
-static int mx6s_vidioc_enum_frameintervals(struct file *file, void *priv,
-		struct v4l2_frmivalenum *interval)
-{
-	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
-	struct v4l2_subdev *sd = csi_dev->sd;
-	struct mx6s_fmt *fmt;
-	struct v4l2_subdev_frame_interval_enum fie = {
-		.index = interval->index,
-		.width = interval->width,
-		.height = interval->height,
-		.which = V4L2_SUBDEV_FORMAT_ACTIVE,
-	};
-	int ret;
-
-	fmt = format_by_fourcc(interval->pixel_format);
-	if (fmt->pixelformat != interval->pixel_format)
-		return -EINVAL;
-	fie.code = fmt->mbus_code;
-
-	ret = v4l2_subdev_call(sd, pad, enum_frame_interval, NULL, &fie);
-	if (ret)
-		return ret;
-	interval->type = V4L2_FRMIVAL_TYPE_DISCRETE;
-	interval->discrete = fie.interval;
-	return 0;
-}
-
-static const struct v4l2_ioctl_ops mx6s_csi_ioctl_ops = {
-	.vidioc_querycap          = mx6s_vidioc_querycap,
-	.vidioc_enum_fmt_vid_cap  = mx6s_vidioc_enum_fmt_vid_cap,
-	.vidioc_try_fmt_vid_cap   = mx6s_vidioc_try_fmt_vid_cap,
-	.vidioc_g_fmt_vid_cap     = mx6s_vidioc_g_fmt_vid_cap,
-	.vidioc_s_fmt_vid_cap     = mx6s_vidioc_s_fmt_vid_cap,
-	.vidioc_g_pixelaspect     = mx6s_vidioc_g_pixelaspect,
-	.vidioc_s_selection   = mx6s_vidioc_s_selection,
-	.vidioc_g_selection   = mx6s_vidioc_g_selection,
-	.vidioc_reqbufs       = mx6s_vidioc_reqbufs,
-	.vidioc_querybuf      = mx6s_vidioc_querybuf,
-	.vidioc_qbuf          = mx6s_vidioc_qbuf,
-	.vidioc_dqbuf         = mx6s_vidioc_dqbuf,
-	.vidioc_g_std         = mx6s_vidioc_g_std,
-	.vidioc_s_std         = mx6s_vidioc_s_std,
-	.vidioc_querystd      = mx6s_vidioc_querystd,
-	.vidioc_enum_input    = mx6s_vidioc_enum_input,
-	.vidioc_g_input       = mx6s_vidioc_g_input,
-	.vidioc_s_input       = mx6s_vidioc_s_input,
-	.vidioc_expbuf        = mx6s_vidioc_expbuf,
-	.vidioc_streamon      = mx6s_vidioc_streamon,
-	.vidioc_streamoff     = mx6s_vidioc_streamoff,
-	.vidioc_g_parm        = mx6s_vidioc_g_parm,
-	.vidioc_s_parm        = mx6s_vidioc_s_parm,
-	.vidioc_enum_framesizes = mx6s_vidioc_enum_framesizes,
-	.vidioc_enum_frameintervals = mx6s_vidioc_enum_frameintervals,
-};
-
-static int subdev_notifier_bound(struct v4l2_async_notifier *notifier,
-			    struct v4l2_subdev *subdev,
-			    struct v4l2_async_subdev *asd)
-{
-	struct mx6s_csi_dev *csi_dev = notifier_to_mx6s_dev(notifier);
-
-	if (subdev == NULL)
-		return -EINVAL;
-
-	/* Find platform data for this sensor subdev */
-	if (csi_dev->fwnode == dev_fwnode(subdev->dev))
-		csi_dev->sd = subdev;
-
-	v4l2_info(&csi_dev->v4l2_dev, "Registered sensor subdevice: %s\n",
-		  subdev->name);
-
-	return 0;
-}
-
-static int mx6s_csi_mode_sel(struct mx6s_csi_dev *csi_dev)
-{
-	struct device_node *np = csi_dev->dev->of_node;
-	struct device_node *node;
-	phandle phandle;
-	u32 out_val[3];
-	int ret = 0;
-
-	if (of_get_property(np, "fsl,mipi-mode", NULL))
-		csi_dev->csi_mipi_mode = true;
-	else {
-		csi_dev->csi_mipi_mode = false;
-		return ret;
-	}
-
-	ret = of_property_read_u32_array(np, "csi-mux-mipi", out_val, 3);
-	if (ret) {
-		dev_dbg(csi_dev->dev, "no csi-mux-mipi property found\n");
-	} else {
-		phandle = *out_val;
-
-		node = of_find_node_by_phandle(phandle);
-		if (!node) {
-			dev_dbg(csi_dev->dev, "not find gpr node by phandle\n");
-			ret = PTR_ERR(node);
-		}
-		csi_dev->csi_mux.gpr = syscon_node_to_regmap(node);
-		if (IS_ERR(csi_dev->csi_mux.gpr)) {
-			dev_err(csi_dev->dev, "failed to get gpr regmap\n");
-			ret = PTR_ERR(csi_dev->csi_mux.gpr);
-		}
-		of_node_put(node);
-		if (ret < 0)
-			return ret;
-
-		csi_dev->csi_mux.req_gpr = out_val[1];
-		csi_dev->csi_mux.req_bit = out_val[2];
-
-		regmap_update_bits(csi_dev->csi_mux.gpr, csi_dev->csi_mux.req_gpr,
-			1 << csi_dev->csi_mux.req_bit, 1 << csi_dev->csi_mux.req_bit);
-	}
-	return ret;
-}
-
-static const struct v4l2_async_notifier_operations mx6s_capture_async_ops = {
-	.bound = subdev_notifier_bound,
-};
-
-static int mx6s_csi_two_8bit_sensor_mode_sel(struct mx6s_csi_dev *csi_dev)
-{
-	struct device_node *np = csi_dev->dev->of_node;
-
-	if (of_get_property(np, "fsl,two-8bit-sensor-mode", NULL))
-		csi_dev->csi_two_8bit_sensor_mode = true;
-	else {
-		csi_dev->csi_two_8bit_sensor_mode = false;
-	}
-
-	return 0;
-}
-
-static int mx6sx_register_subdevs(struct mx6s_csi_dev *csi_dev)
-{
-	struct device_node *parent = csi_dev->dev->of_node;
-	struct device_node *node, *port, *rem;
-	struct v4l2_async_subdev *asd;
-	int ret;
-
-	v4l2_async_notifier_init(&csi_dev->subdev_notifier);
-
-	/* Attach sensors linked to csi receivers */
-	for_each_available_child_of_node(parent, node) {
-		if (of_node_cmp(node->name, "port"))
-			continue;
-
-		/* The csi node can have only port subnode. */
-		port = of_get_next_child(node, NULL);
-		if (!port)
-			continue;
-		rem = of_graph_get_remote_port_parent(port);
-		of_node_put(port);
-		if (rem == NULL) {
-			v4l2_info(&csi_dev->v4l2_dev,
-						"Remote device at %s not found\n",
-						port->full_name);
-			return -1;
-		}
-
-		csi_dev->fwnode = of_fwnode_handle(rem);
-		asd = v4l2_async_notifier_add_fwnode_subdev(
-					&csi_dev->subdev_notifier,
-					csi_dev->fwnode,
-					struct v4l2_async_subdev);
-		of_node_put(rem);
-		break;
-	}
-
-	csi_dev->subdev_notifier.ops = &mx6s_capture_async_ops;
-
-	ret = v4l2_async_notifier_register(&csi_dev->v4l2_dev,
-					&csi_dev->subdev_notifier);
-	if (ret)
-		dev_err(csi_dev->dev,
-					"Error register async notifier regoster\n");
-
-	return ret;
-}
-
-static int mx6s_csi_probe(struct platform_device *pdev)
-{
-	struct device *dev = &pdev->dev;
-	const struct of_device_id *of_id;
-	struct mx6s_csi_dev *csi_dev;
-	struct video_device *vdev;
-	struct resource *res;
-	int ret = 0;
-
-	dev_info(dev, "initialising\n");
-
-	/* Prepare our private structure */
-	csi_dev = devm_kzalloc(dev, sizeof(struct mx6s_csi_dev), GFP_ATOMIC);
-	if (!csi_dev) {
-		dev_err(dev, "Can't allocate private structure\n");
-		return -ENODEV;
-	}
-
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	csi_dev->irq = platform_get_irq(pdev, 0);
-	if (res == NULL || csi_dev->irq < 0) {
-		dev_err(dev, "Missing platform resources data\n");
-		return -ENODEV;
-	}
-
-	csi_dev->regbase = devm_ioremap_resource(dev, res);
-	if (IS_ERR(csi_dev->regbase)) {
-		dev_err(dev, "Failed platform resources map\n");
-		return -ENODEV;
-	}
-
-	/* init video dma queues */
-	INIT_LIST_HEAD(&csi_dev->capture);
-	INIT_LIST_HEAD(&csi_dev->active_bufs);
-	INIT_LIST_HEAD(&csi_dev->discard);
-
-	csi_dev->clk_disp_axi = devm_clk_get(dev, "disp-axi");
-	if (IS_ERR(csi_dev->clk_disp_axi)) {
-		dev_err(dev, "Could not get csi axi clock\n");
-		return -ENODEV;
-	}
-
-	csi_dev->clk_disp_dcic = devm_clk_get(dev, "disp_dcic");
-	if (IS_ERR(csi_dev->clk_disp_dcic)) {
-		dev_err(dev, "Could not get disp dcic clock\n");
-		return -ENODEV;
-	}
-
-	csi_dev->clk_csi_mclk = devm_clk_get(dev, "csi_mclk");
-	if (IS_ERR(csi_dev->clk_csi_mclk)) {
-		dev_err(dev, "Could not get csi mclk clock\n");
-		return -ENODEV;
-	}
-
-	csi_dev->dev = dev;
-
-	mx6s_csi_mode_sel(csi_dev);
-	mx6s_csi_two_8bit_sensor_mode_sel(csi_dev);
-
-	of_id = of_match_node(mx6s_csi_dt_ids, csi_dev->dev->of_node);
-	if (!of_id)
-		return -EINVAL;
-	csi_dev->soc = of_id->data;
-
-	snprintf(csi_dev->v4l2_dev.name,
-		 sizeof(csi_dev->v4l2_dev.name), "CSI");
-
-	ret = v4l2_device_register(dev, &csi_dev->v4l2_dev);
-	if (ret < 0) {
-		dev_err(dev, "v4l2_device_register() failed: %d\n", ret);
-		return -ENODEV;
-	}
-
-	/* initialize locks */
-	mutex_init(&csi_dev->lock);
-	spin_lock_init(&csi_dev->slock);
-
-	/* Allocate memory for video device */
-	vdev = video_device_alloc();
-	if (vdev == NULL) {
-		ret = -ENOMEM;
-		goto err_vdev;
-	}
-
-	snprintf(vdev->name, sizeof(vdev->name), "mx6s-csi");
-
-	vdev->v4l2_dev		= &csi_dev->v4l2_dev;
-	vdev->fops			= &mx6s_csi_fops;
-	vdev->ioctl_ops		= &mx6s_csi_ioctl_ops;
-	vdev->release		= video_device_release;
-	vdev->lock			= &csi_dev->lock;
-	vdev->device_caps = V4L2_CAP_VIDEO_CAPTURE | V4L2_CAP_STREAMING;
-
-	vdev->queue = &csi_dev->vb2_vidq;
-
-	csi_dev->vdev = vdev;
-
-	video_set_drvdata(csi_dev->vdev, csi_dev);
-	mutex_lock(&csi_dev->lock);
-
-	ret = video_register_device(csi_dev->vdev, VFL_TYPE_VIDEO, -1);
-	if (ret < 0) {
-		video_device_release(csi_dev->vdev);
-		mutex_unlock(&csi_dev->lock);
-		goto err_vdev;
-	}
-
-	/* install interrupt handler */
-	if (devm_request_irq(dev, csi_dev->irq, mx6s_csi_irq_handler,
-				0, "csi", (void *)csi_dev)) {
-		mutex_unlock(&csi_dev->lock);
-		dev_err(dev, "Request CSI IRQ failed.\n");
-		ret = -ENODEV;
-		goto err_irq;
-	}
-
-	mutex_unlock(&csi_dev->lock);
-
-	ret = mx6sx_register_subdevs(csi_dev);
-	if (ret < 0)
-		goto err_irq;
-
-	pm_runtime_enable(csi_dev->dev);
-	return 0;
-
-err_irq:
-	video_unregister_device(csi_dev->vdev);
-err_vdev:
-	v4l2_device_unregister(&csi_dev->v4l2_dev);
-	return ret;
-}
-
-static int mx6s_csi_remove(struct platform_device *pdev)
-{
-	struct v4l2_device *v4l2_dev = dev_get_drvdata(&pdev->dev);
-	struct mx6s_csi_dev *csi_dev =
-				container_of(v4l2_dev, struct mx6s_csi_dev, v4l2_dev);
-
-	v4l2_async_notifier_cleanup(&csi_dev->subdev_notifier);
-	v4l2_async_notifier_unregister(&csi_dev->subdev_notifier);
-
-	video_unregister_device(csi_dev->vdev);
-	v4l2_device_unregister(&csi_dev->v4l2_dev);
-
-	pm_runtime_disable(csi_dev->dev);
-	return 0;
-}
-
-static int mx6s_csi_runtime_suspend(struct device *dev)
-{
-	dev_dbg(dev, "csi v4l2 busfreq high release.\n");
-	return 0;
-}
-
-static int mx6s_csi_runtime_resume(struct device *dev)
-{
-	dev_dbg(dev, "csi v4l2 busfreq high request.\n");
-	return 0;
-}
-
-static const struct dev_pm_ops mx6s_csi_pm_ops = {
-	SET_RUNTIME_PM_OPS(mx6s_csi_runtime_suspend, mx6s_csi_runtime_resume, NULL)
-};
-
-static const struct mx6s_csi_soc mx6s_soc = {
-	.rx_fifo_rst = true,
-	.baseaddr_switch = 0,
-};
-static const struct mx6s_csi_soc mx6sl_soc = {
-	.rx_fifo_rst = false,
-	.baseaddr_switch = 0,
-};
-static const struct mx6s_csi_soc mx8mq_soc = {
-	.rx_fifo_rst = true,
-	.baseaddr_switch = 0x80030,
-};
-
-static const struct of_device_id mx6s_csi_dt_ids[] = {
-	{ .compatible = "fsl,imx6s-csi",
-	  .data = &mx6s_soc,
-	},
-	{ .compatible = "fsl,imx6sl-csi",
-	  .data = &mx6sl_soc,
-	},
-	{ .compatible = "fsl,imx8mq-csi",
-	  .data = &mx8mq_soc,
-	},
-	{ /* sentinel */ }
-};
-MODULE_DEVICE_TABLE(of, mx6s_csi_dt_ids);
-
-static struct platform_driver mx6s_csi_driver = {
-	.driver		= {
-		.name	= MX6S_CAM_DRV_NAME,
-		.of_match_table = of_match_ptr(mx6s_csi_dt_ids),
-		.pm = &mx6s_csi_pm_ops,
-	},
-	.probe	= mx6s_csi_probe,
-	.remove	= mx6s_csi_remove,
-};
-
-module_platform_driver(mx6s_csi_driver);
-
-MODULE_DESCRIPTION("i.MX6Sx SoC Camera Host driver");
-MODULE_AUTHOR("Freescale Semiconductor, Inc.");
-MODULE_LICENSE("GPL");
-MODULE_VERSION(MX6S_CAM_VERSION);
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * Copyright (C) 2014-2016 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2019 NXP
+ */
+
+/*!
+ * @file mx6s_csi.c
+ *
+ * @brief mx6sx CMOS Sensor interface functions
+ *
+ * @ingroup CSI
+ */
+#include <asm/dma.h>
+#include <linux/busfreq-imx.h>
+#include <linux/clk.h>
+#include <linux/dma-mapping.h>
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/errno.h>
+#include <linux/fs.h>
+#include <linux/gcd.h>
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/io.h>
+#include <linux/kernel.h>
+#include <linux/math64.h>
+#include <linux/mfd/syscon.h>
+#include <linux/mm.h>
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/of_graph.h>
+#include <linux/platform_device.h>
+#include <linux/pm_runtime.h>
+#include <linux/regmap.h>
+#include <linux/slab.h>
+#include <linux/time.h>
+#include <linux/media-bus-format.h>
+#include <media/v4l2-common.h>
+#include <media/v4l2-ctrls.h>
+#include <media/v4l2-dev.h>
+#include <media/v4l2-device.h>
+#include <media/v4l2-ioctl.h>
+#include <media/videobuf2-core.h>
+#include <media/videobuf2-dma-contig.h>
+
+#define MX6S_CAM_DRV_NAME "mx6s-csi"
+#define MX6S_CAM_VERSION "0.0.1"
+#define MX6S_CAM_DRIVER_DESCRIPTION "i.MX6S_CSI"
+
+#define MAX_VIDEO_MEM 256
+
+/* reset values */
+#define CSICR1_RESET_VAL	0x40000800
+#define CSICR2_RESET_VAL	0x0
+#define CSICR3_RESET_VAL	0x0
+
+/* csi control reg 1 */
+#define BIT_SWAP16_EN		(0x1 << 31)
+#define BIT_EXT_VSYNC		(0x1 << 30)
+#define BIT_EOF_INT_EN		(0x1 << 29)
+#define BIT_PRP_IF_EN		(0x1 << 28)
+#define BIT_CCIR_MODE		(0x1 << 27)
+#define BIT_COF_INT_EN		(0x1 << 26)
+#define BIT_SF_OR_INTEN		(0x1 << 25)
+#define BIT_RF_OR_INTEN		(0x1 << 24)
+#define BIT_SFF_DMA_DONE_INTEN  (0x1 << 22)
+#define BIT_STATFF_INTEN	(0x1 << 21)
+#define BIT_FB2_DMA_DONE_INTEN  (0x1 << 20)
+#define BIT_FB1_DMA_DONE_INTEN  (0x1 << 19)
+#define BIT_RXFF_INTEN		(0x1 << 18)
+#define BIT_SOF_POL		(0x1 << 17)
+#define BIT_SOF_INTEN		(0x1 << 16)
+#define BIT_MCLKDIV		(0xF << 12)
+#define BIT_HSYNC_POL		(0x1 << 11)
+#define BIT_CCIR_EN		(0x1 << 10)
+#define BIT_MCLKEN		(0x1 << 9)
+#define BIT_FCC			(0x1 << 8)
+#define BIT_PACK_DIR		(0x1 << 7)
+#define BIT_CLR_STATFIFO	(0x1 << 6)
+#define BIT_CLR_RXFIFO		(0x1 << 5)
+#define BIT_GCLK_MODE		(0x1 << 4)
+#define BIT_INV_DATA		(0x1 << 3)
+#define BIT_INV_PCLK		(0x1 << 2)
+#define BIT_REDGE		(0x1 << 1)
+#define BIT_PIXEL_BIT		(0x1 << 0)
+
+#define SHIFT_MCLKDIV		12
+
+/* control reg 3 */
+#define BIT_FRMCNT		(0xFFFF << 16)
+#define BIT_FRMCNT_RST		(0x1 << 15)
+#define BIT_DMA_REFLASH_RFF	(0x1 << 14)
+#define BIT_DMA_REFLASH_SFF	(0x1 << 13)
+#define BIT_DMA_REQ_EN_RFF	(0x1 << 12)
+#define BIT_DMA_REQ_EN_SFF	(0x1 << 11)
+#define BIT_STATFF_LEVEL	(0x7 << 8)
+#define BIT_HRESP_ERR_EN	(0x1 << 7)
+#define BIT_RXFF_LEVEL		(0x7 << 4)
+#define BIT_TWO_8BIT_SENSOR	(0x1 << 3)
+#define BIT_ZERO_PACK_EN	(0x1 << 2)
+#define BIT_ECC_INT_EN		(0x1 << 1)
+#define BIT_ECC_AUTO_EN		(0x1 << 0)
+
+#define SHIFT_FRMCNT		16
+#define SHIFT_RXFIFO_LEVEL	4
+
+/* csi status reg */
+#define BIT_ADDR_CH_ERR_INT (0x1 << 28)
+#define BIT_FIELD0_INT      (0x1 << 27)
+#define BIT_FIELD1_INT      (0x1 << 26)
+#define BIT_SFF_OR_INT		(0x1 << 25)
+#define BIT_RFF_OR_INT		(0x1 << 24)
+#define BIT_DMA_TSF_DONE_SFF	(0x1 << 22)
+#define BIT_STATFF_INT		(0x1 << 21)
+#define BIT_DMA_TSF_DONE_FB2	(0x1 << 20)
+#define BIT_DMA_TSF_DONE_FB1	(0x1 << 19)
+#define BIT_RXFF_INT		(0x1 << 18)
+#define BIT_EOF_INT		(0x1 << 17)
+#define BIT_SOF_INT		(0x1 << 16)
+#define BIT_F2_INT		(0x1 << 15)
+#define BIT_F1_INT		(0x1 << 14)
+#define BIT_COF_INT		(0x1 << 13)
+#define BIT_HRESP_ERR_INT	(0x1 << 7)
+#define BIT_ECC_INT		(0x1 << 1)
+#define BIT_DRDY		(0x1 << 0)
+
+/* csi control reg 18 */
+#define BIT_CSI_ENABLE			(0x1 << 31)
+#define BIT_MIPI_DATA_FORMAT_RAW8		(0x2a << 25)
+#define BIT_MIPI_DATA_FORMAT_RAW10		(0x2b << 25)
+#define BIT_MIPI_DATA_FORMAT_RAW12      (0x2c << 25)
+#define BIT_MIPI_DATA_FORMAT_RAW14      (0x2d << 25)
+#define BIT_MIPI_DATA_FORMAT_YUV422_8B	(0x1e << 25)
+#define BIT_MIPI_DATA_FORMAT_MASK	(0x3F << 25)
+#define BIT_MIPI_DATA_FORMAT_OFFSET	25
+#define BIT_DATA_FROM_MIPI		(0x1 << 22)
+#define BIT_MIPI_YU_SWAP		(0x1 << 21)
+#define BIT_MIPI_DOUBLE_CMPNT	(0x1 << 20)
+#define BIT_BASEADDR_CHG_ERR_EN	(0x1 << 9)
+#define BIT_BASEADDR_SWITCH_SEL	(0x1 << 5)
+#define BIT_BASEADDR_SWITCH_EN	(0x1 << 4)
+#define BIT_PARALLEL24_EN		(0x1 << 3)
+#define BIT_DEINTERLACE_EN		(0x1 << 2)
+#define BIT_TVDECODER_IN_EN		(0x1 << 1)
+#define BIT_NTSC_EN				(0x1 << 0)
+
+#define CSI_MCLK_VF		1
+#define CSI_MCLK_ENC		2
+#define CSI_MCLK_RAW		4
+#define CSI_MCLK_I2C		8
+
+#define CSI_CSICR1		0x0
+#define CSI_CSICR2		0x4
+#define CSI_CSICR3		0x8
+#define CSI_STATFIFO		0xC
+#define CSI_CSIRXFIFO		0x10
+#define CSI_CSIRXCNT		0x14
+#define CSI_CSISR		0x18
+
+#define CSI_CSIDBG		0x1C
+#define CSI_CSIDMASA_STATFIFO	0x20
+#define CSI_CSIDMATS_STATFIFO	0x24
+#define CSI_CSIDMASA_FB1	0x28
+#define CSI_CSIDMASA_FB2	0x2C
+#define CSI_CSIFBUF_PARA	0x30
+#define CSI_CSIIMAG_PARA	0x34
+
+#define CSI_CSICR18		0x48
+#define CSI_CSICR19		0x4c
+
+#define NUM_FORMATS ARRAY_SIZE(formats)
+#define MX6SX_MAX_SENSORS    1
+
+struct csi_signal_cfg_t {
+	unsigned data_width:3;
+	unsigned clk_mode:2;
+	unsigned ext_vsync:1;
+	unsigned Vsync_pol:1;
+	unsigned Hsync_pol:1;
+	unsigned pixclk_pol:1;
+	unsigned data_pol:1;
+	unsigned sens_clksrc:1;
+};
+
+struct csi_config_t {
+	/* control reg 1 */
+	unsigned int swap16_en:1;
+	unsigned int ext_vsync:1;
+	unsigned int eof_int_en:1;
+	unsigned int prp_if_en:1;
+	unsigned int ccir_mode:1;
+	unsigned int cof_int_en:1;
+	unsigned int sf_or_inten:1;
+	unsigned int rf_or_inten:1;
+	unsigned int sff_dma_done_inten:1;
+	unsigned int statff_inten:1;
+	unsigned int fb2_dma_done_inten:1;
+	unsigned int fb1_dma_done_inten:1;
+	unsigned int rxff_inten:1;
+	unsigned int sof_pol:1;
+	unsigned int sof_inten:1;
+	unsigned int mclkdiv:4;
+	unsigned int hsync_pol:1;
+	unsigned int ccir_en:1;
+	unsigned int mclken:1;
+	unsigned int fcc:1;
+	unsigned int pack_dir:1;
+	unsigned int gclk_mode:1;
+	unsigned int inv_data:1;
+	unsigned int inv_pclk:1;
+	unsigned int redge:1;
+	unsigned int pixel_bit:1;
+
+	/* control reg 3 */
+	unsigned int frmcnt:16;
+	unsigned int frame_reset:1;
+	unsigned int dma_reflash_rff:1;
+	unsigned int dma_reflash_sff:1;
+	unsigned int dma_req_en_rff:1;
+	unsigned int dma_req_en_sff:1;
+	unsigned int statff_level:3;
+	unsigned int hresp_err_en:1;
+	unsigned int rxff_level:3;
+	unsigned int two_8bit_sensor:1;
+	unsigned int zero_pack_en:1;
+	unsigned int ecc_int_en:1;
+	unsigned int ecc_auto_en:1;
+	/* fifo counter */
+	unsigned int rxcnt;
+};
+
+/*
+ * Basic structures
+ */
+struct mx6s_fmt {
+	char  name[32];
+	u32   fourcc;		/* v4l2 format id */
+	u32   pixelformat;
+	u32   mbus_code;
+	int   bpp;
+};
+
+static struct mx6s_fmt formats[] = {
+	{
+		.name		= "UYVY-16",
+		.fourcc		= V4L2_PIX_FMT_UYVY,
+		.pixelformat	= V4L2_PIX_FMT_UYVY,
+		.mbus_code	= MEDIA_BUS_FMT_UYVY8_2X8,
+		.bpp		= 2,
+	}, {
+		.name		= "YUYV-16",
+		.fourcc		= V4L2_PIX_FMT_YUYV,
+		.pixelformat	= V4L2_PIX_FMT_YUYV,
+		.mbus_code	= MEDIA_BUS_FMT_YUYV8_2X8,
+		.bpp		= 2,
+	}, {
+		.name		= "YUV32 (X-Y-U-V)",
+		.fourcc		= V4L2_PIX_FMT_YUV32,
+		.pixelformat	= V4L2_PIX_FMT_YUV32,
+		.mbus_code	= MEDIA_BUS_FMT_AYUV8_1X32,
+		.bpp		= 4,
+	}, {
+		.name		= "RAWRGB8 (SBGGR8)",
+		.fourcc		= V4L2_PIX_FMT_SBGGR8,
+		.pixelformat	= V4L2_PIX_FMT_SBGGR8,
+		.mbus_code	= MEDIA_BUS_FMT_SBGGR8_1X8,
+		.bpp		= 1,
+	}, {
+		.name		= "Gray8 (GREY)",
+		.fourcc		= V4L2_PIX_FMT_GREY,
+		.pixelformat	= V4L2_PIX_FMT_GREY,
+		.mbus_code	= MEDIA_BUS_FMT_Y8_1X8,
+		.bpp		= 1,
+	} ,{	
+		.name		= "Gray10 (Y10)",
+		.fourcc		= V4L2_PIX_FMT_Y10,
+		.pixelformat	= V4L2_PIX_FMT_Y10,
+		.mbus_code	= MEDIA_BUS_FMT_Y10_1X10,
+		.bpp		= 2,
+	} ,{	
+		.name		= "Gray12 (Y12)",
+		.fourcc		= V4L2_PIX_FMT_Y12,
+		.pixelformat	= V4L2_PIX_FMT_Y12,
+		.mbus_code	= MEDIA_BUS_FMT_Y12_1X12,
+		.bpp		= 2,
+	}, {	
+		.name		= "Gray14 (Y14)",
+		.fourcc		= V4L2_PIX_FMT_Y14,
+		.pixelformat	= V4L2_PIX_FMT_Y14,
+		.mbus_code	= MEDIA_BUS_FMT_Y14_1X14,
+		.bpp		= 2,
+	}, {
+		.name		= "RAWRGB8 (SRGGB8)",
+		.fourcc		= V4L2_PIX_FMT_SRGGB8,
+		.pixelformat	= V4L2_PIX_FMT_SRGGB8,
+		.mbus_code	= MEDIA_BUS_FMT_SRGGB8_1X8,
+		.bpp		= 1,
+	} ,{	
+		.name		= "RAWRGB10 (SRGGB10)",
+		.fourcc		= V4L2_PIX_FMT_SRGGB10,
+		.pixelformat	= V4L2_PIX_FMT_SRGGB10,
+		.mbus_code	= MEDIA_BUS_FMT_SRGGB10_1X10,
+		.bpp		= 2,
+	} ,{	
+		.name		= "RAWRGB12 (SRGGB12)",
+		.fourcc		= V4L2_PIX_FMT_SRGGB12,
+		.pixelformat	= V4L2_PIX_FMT_SRGGB12,
+		.mbus_code	= MEDIA_BUS_FMT_SRGGB12_1X12,
+		.bpp		= 2,
+	}, {	
+		.name		= "RAWRGB14 (SRGGB14)",
+		.fourcc		= V4L2_PIX_FMT_SRGGB14,
+		.pixelformat	= V4L2_PIX_FMT_SRGGB14,
+		.mbus_code	= MEDIA_BUS_FMT_SRGGB14_1X14,
+		.bpp		= 2,
+	}, {
+		.name		= "RAWRGB8 (SGBRG8)",
+		.fourcc		= V4L2_PIX_FMT_SGBRG8,
+		.pixelformat	= V4L2_PIX_FMT_SGBRG8,
+		.mbus_code	= MEDIA_BUS_FMT_SGBRG8_1X8,
+		.bpp		= 1,
+	} ,{
+		.name		= "RAWRGB10 (SGBRG10)",
+		.fourcc		= V4L2_PIX_FMT_SGBRG10,
+		.pixelformat	= V4L2_PIX_FMT_SGBRG10,
+		.mbus_code	= MEDIA_BUS_FMT_SGBRG10_1X10,
+		.bpp		= 2,
+	} ,{
+		.name		= "RAWRGB12 (SGBRG12)",
+		.fourcc		= V4L2_PIX_FMT_SGBRG12,
+		.pixelformat	= V4L2_PIX_FMT_SGBRG12,
+		.mbus_code	= MEDIA_BUS_FMT_SGBRG12_1X12,
+		.bpp		= 2,
+	} ,{
+		.name		= "RAWRGB14 (SGBRG14)",
+		.fourcc		= V4L2_PIX_FMT_SGBRG14,
+		.pixelformat	= V4L2_PIX_FMT_SGBRG14,
+		.mbus_code	= MEDIA_BUS_FMT_SGBRG14_1X14,
+		.bpp		= 2,
+	}
+};
+
+struct mx6s_buf_internal {
+	struct list_head	queue;
+	int					bufnum;
+	bool				discard;
+};
+
+/* buffer for one video frame */
+struct mx6s_buffer {
+	/* common v4l buffer stuff -- must be first */
+	struct vb2_v4l2_buffer			vb;
+	struct mx6s_buf_internal	internal;
+};
+
+struct mx6s_csi_mux {
+	struct regmap *gpr;
+	u8 req_gpr;
+	u8 req_bit;
+};
+
+struct mx6s_csi_soc {
+	bool rx_fifo_rst;
+	int baseaddr_switch;
+};
+
+struct mx6s_csi_dev {
+	struct device		*dev;
+	struct video_device *vdev;
+	struct v4l2_subdev	*sd;
+	struct v4l2_device	v4l2_dev;
+
+	struct vb2_queue			vb2_vidq;
+	struct v4l2_ctrl_handler	ctrl_handler;
+
+	struct mutex		lock;
+	spinlock_t			slock;
+
+	int open_count;
+
+	/* clock */
+	struct clk	*clk_disp_axi;
+	struct clk	*clk_disp_dcic;
+	struct clk	*clk_csi_mclk;
+
+	void __iomem *regbase;
+	int irq;
+
+	u32      nextfb;
+	u32      skipframe;
+	u32	 type;
+	u32 bytesperline;
+	v4l2_std_id std;
+	struct mx6s_fmt		*fmt;
+	struct v4l2_pix_format pix;
+	u32 mbus_code;
+
+	unsigned int frame_count;
+
+	struct list_head	capture;
+	struct list_head	active_bufs;
+	struct list_head	discard;
+
+	void						*discard_buffer;
+	dma_addr_t					discard_buffer_dma;
+	size_t						discard_size;
+	struct mx6s_buf_internal	buf_discard[2];
+
+	struct fwnode_handle *fwnode;
+	struct v4l2_async_notifier	subdev_notifier;
+
+	bool csi_mipi_mode;
+	bool csi_two_8bit_sensor_mode;
+	const struct mx6s_csi_soc *soc;
+	struct mx6s_csi_mux csi_mux;
+};
+
+static const struct of_device_id mx6s_csi_dt_ids[];
+
+static inline int csi_read(struct mx6s_csi_dev *csi, unsigned int offset)
+{
+	return __raw_readl(csi->regbase + offset);
+}
+static inline void csi_write(struct mx6s_csi_dev *csi, unsigned int value,
+			     unsigned int offset)
+{
+	__raw_writel(value, csi->regbase + offset);
+}
+
+static inline struct mx6s_csi_dev
+				*notifier_to_mx6s_dev(struct v4l2_async_notifier *n)
+{
+	return container_of(n, struct mx6s_csi_dev, subdev_notifier);
+}
+
+struct mx6s_fmt *format_by_fourcc(int fourcc)
+{
+	int i;
+
+	for (i = 0; i < NUM_FORMATS; i++) {
+		if (formats[i].pixelformat == fourcc)
+			return formats + i;
+	}
+
+	pr_err("unknown pixelformat:'%4.4s'\n", (char *)&fourcc);
+	return NULL;
+}
+
+struct mx6s_fmt *format_by_mbus(u32 code)
+{
+	int i;
+
+	for (i = 0; i < NUM_FORMATS; i++) {
+		if (formats[i].mbus_code == code)
+			return formats + i;
+	}
+
+	pr_err("unknown mbus:0x%x\n", code);
+	return NULL;
+}
+
+static struct mx6s_buffer *mx6s_ibuf_to_buf(struct mx6s_buf_internal *int_buf)
+{
+	return container_of(int_buf, struct mx6s_buffer, internal);
+}
+
+void csi_clk_enable(struct mx6s_csi_dev *csi_dev)
+{
+	clk_prepare_enable(csi_dev->clk_disp_axi);
+	clk_prepare_enable(csi_dev->clk_disp_dcic);
+	clk_prepare_enable(csi_dev->clk_csi_mclk);
+}
+
+void csi_clk_disable(struct mx6s_csi_dev *csi_dev)
+{
+	clk_disable_unprepare(csi_dev->clk_csi_mclk);
+	clk_disable_unprepare(csi_dev->clk_disp_dcic);
+	clk_disable_unprepare(csi_dev->clk_disp_axi);
+}
+
+static void csihw_reset(struct mx6s_csi_dev *csi_dev)
+{
+	__raw_writel(__raw_readl(csi_dev->regbase + CSI_CSICR3)
+			| BIT_FRMCNT_RST,
+			csi_dev->regbase + CSI_CSICR3);
+
+	__raw_writel(CSICR1_RESET_VAL, csi_dev->regbase + CSI_CSICR1);
+	__raw_writel(CSICR2_RESET_VAL, csi_dev->regbase + CSI_CSICR2);
+	__raw_writel(CSICR3_RESET_VAL, csi_dev->regbase + CSI_CSICR3);
+}
+
+static void csisw_reset(struct mx6s_csi_dev *csi_dev)
+{
+	int cr1, cr3, cr18, isr;
+
+	/* Disable csi  */
+	cr18 = csi_read(csi_dev, CSI_CSICR18);
+	cr18 &= ~BIT_CSI_ENABLE;
+	csi_write(csi_dev, cr18, CSI_CSICR18);
+
+	/* Clear RX FIFO */
+	cr1 = csi_read(csi_dev, CSI_CSICR1);
+	csi_write(csi_dev, cr1 & ~BIT_FCC, CSI_CSICR1);
+	cr1 = csi_read(csi_dev, CSI_CSICR1);
+	csi_write(csi_dev, cr1 | BIT_CLR_RXFIFO, CSI_CSICR1);
+
+	/* DMA reflash */
+	cr3 = csi_read(csi_dev, CSI_CSICR3);
+	cr3 |= BIT_DMA_REFLASH_RFF | BIT_FRMCNT_RST;
+	csi_write(csi_dev, cr3, CSI_CSICR3);
+
+	msleep(2);
+
+	cr1 = csi_read(csi_dev, CSI_CSICR1);
+	csi_write(csi_dev, cr1 | BIT_FCC, CSI_CSICR1);
+
+	isr = csi_read(csi_dev, CSI_CSISR);
+	csi_write(csi_dev, isr, CSI_CSISR);
+
+	cr18 |= csi_dev->soc->baseaddr_switch;
+
+	/* Enable csi  */
+	cr18 |= BIT_CSI_ENABLE;
+	csi_write(csi_dev, cr18, CSI_CSICR18);
+}
+
+/*!
+ * csi_init_interface
+ *    Init csi interface
+ */
+static void csi_init_interface(struct mx6s_csi_dev *csi_dev)
+{
+	unsigned int val = 0;
+	unsigned int imag_para;
+
+	val |= BIT_SOF_POL;
+	val |= BIT_REDGE;
+	val |= BIT_GCLK_MODE;
+	val |= BIT_HSYNC_POL;
+	val |= BIT_FCC;
+	val |= 1 << SHIFT_MCLKDIV;
+	val |= BIT_MCLKEN;
+	__raw_writel(val, csi_dev->regbase + CSI_CSICR1);
+
+	imag_para = (640 << 16) | 960;
+	__raw_writel(imag_para, csi_dev->regbase + CSI_CSIIMAG_PARA);
+
+	val = BIT_DMA_REFLASH_RFF;
+	__raw_writel(val, csi_dev->regbase + CSI_CSICR3);
+}
+
+static void csi_enable_int(struct mx6s_csi_dev *csi_dev, int arg)
+{
+	unsigned long cr1 = __raw_readl(csi_dev->regbase + CSI_CSICR1);
+
+	cr1 |= BIT_SOF_INTEN;
+	cr1 |= BIT_RFF_OR_INT;
+	if (arg == 1) {
+		/* still capture needs DMA intterrupt */
+		cr1 |= BIT_FB1_DMA_DONE_INTEN;
+		cr1 |= BIT_FB2_DMA_DONE_INTEN;
+	}
+	__raw_writel(cr1, csi_dev->regbase + CSI_CSICR1);
+}
+
+static void csi_disable_int(struct mx6s_csi_dev *csi_dev)
+{
+	unsigned long cr1 = __raw_readl(csi_dev->regbase + CSI_CSICR1);
+
+	cr1 &= ~BIT_SOF_INTEN;
+	cr1 &= ~BIT_RFF_OR_INT;
+	cr1 &= ~BIT_FB1_DMA_DONE_INTEN;
+	cr1 &= ~BIT_FB2_DMA_DONE_INTEN;
+	__raw_writel(cr1, csi_dev->regbase + CSI_CSICR1);
+}
+
+static void csi_enable(struct mx6s_csi_dev *csi_dev, int arg)
+{
+	unsigned long cr = __raw_readl(csi_dev->regbase + CSI_CSICR18);
+
+	if (arg == 1)
+		cr |= BIT_CSI_ENABLE;
+	else
+		cr &= ~BIT_CSI_ENABLE;
+	__raw_writel(cr, csi_dev->regbase + CSI_CSICR18);
+}
+
+static void csi_buf_stride_set(struct mx6s_csi_dev *csi_dev, u32 stride)
+{
+	__raw_writel(stride, csi_dev->regbase + CSI_CSIFBUF_PARA);
+}
+
+static void csi_deinterlace_enable(struct mx6s_csi_dev *csi_dev, bool enable)
+{
+	unsigned long cr18 = __raw_readl(csi_dev->regbase + CSI_CSICR18);
+
+	if (enable == true)
+		cr18 |= BIT_DEINTERLACE_EN;
+	else
+		cr18 &= ~BIT_DEINTERLACE_EN;
+
+	__raw_writel(cr18, csi_dev->regbase + CSI_CSICR18);
+}
+
+static void csi_deinterlace_mode(struct mx6s_csi_dev *csi_dev, int mode)
+{
+	unsigned long cr18 = __raw_readl(csi_dev->regbase + CSI_CSICR18);
+
+	if (mode == V4L2_STD_NTSC)
+		cr18 |= BIT_NTSC_EN;
+	else
+		cr18 &= ~BIT_NTSC_EN;
+
+	__raw_writel(cr18, csi_dev->regbase + CSI_CSICR18);
+}
+
+static void csi_tvdec_enable(struct mx6s_csi_dev *csi_dev, bool enable)
+{
+	unsigned long cr18 = __raw_readl(csi_dev->regbase + CSI_CSICR18);
+	unsigned long cr1 = __raw_readl(csi_dev->regbase + CSI_CSICR1);
+
+	if (enable == true) {
+		cr18 |= (BIT_TVDECODER_IN_EN |
+				BIT_BASEADDR_SWITCH_EN |
+				BIT_BASEADDR_SWITCH_SEL |
+				BIT_BASEADDR_CHG_ERR_EN);
+		cr1 |= BIT_CCIR_MODE;
+		cr1 &= ~(BIT_SOF_POL | BIT_REDGE);
+	} else {
+		cr18 &= ~(BIT_TVDECODER_IN_EN |
+				BIT_BASEADDR_SWITCH_EN |
+				BIT_BASEADDR_SWITCH_SEL |
+				BIT_BASEADDR_CHG_ERR_EN);
+		cr1 &= ~BIT_CCIR_MODE;
+		cr1 |= BIT_SOF_POL | BIT_REDGE;
+	}
+
+	__raw_writel(cr18, csi_dev->regbase + CSI_CSICR18);
+	__raw_writel(cr1, csi_dev->regbase + CSI_CSICR1);
+}
+
+static void csi_dmareq_rff_enable(struct mx6s_csi_dev *csi_dev)
+{
+	unsigned long cr3 = __raw_readl(csi_dev->regbase + CSI_CSICR3);
+	unsigned long cr2 = __raw_readl(csi_dev->regbase + CSI_CSICR2);
+
+	/* Burst Type of DMA Transfer from RxFIFO. INCR16 */
+	cr2 |= 0xC0000000;
+
+	cr3 |= BIT_DMA_REQ_EN_RFF;
+	cr3 |= BIT_HRESP_ERR_EN;
+	cr3 &= ~BIT_RXFF_LEVEL;
+	cr3 |= 0x2 << 4;
+	if (csi_dev->csi_two_8bit_sensor_mode){
+		cr3 |= BIT_TWO_8BIT_SENSOR;
+    } else {
+        cr3 &= ~BIT_TWO_8BIT_SENSOR;
+    }
+
+	__raw_writel(cr3, csi_dev->regbase + CSI_CSICR3);
+	__raw_writel(cr2, csi_dev->regbase + CSI_CSICR2);
+}
+
+static void csi_dmareq_rff_disable(struct mx6s_csi_dev *csi_dev)
+{
+	unsigned long cr3 = __raw_readl(csi_dev->regbase + CSI_CSICR3);
+
+	cr3 &= ~BIT_DMA_REQ_EN_RFF;
+	cr3 &= ~BIT_HRESP_ERR_EN;
+	__raw_writel(cr3, csi_dev->regbase + CSI_CSICR3);
+}
+
+static void csi_set_imagpara(struct mx6s_csi_dev *csi,
+					int width, int height)
+{
+	int imag_para = 0;
+	unsigned long cr3 = __raw_readl(csi->regbase + CSI_CSICR3);
+
+	imag_para = (width << 16) | height;
+	__raw_writel(imag_para, csi->regbase + CSI_CSIIMAG_PARA);
+
+	/* reflash the embeded DMA controller */
+	__raw_writel(cr3 | BIT_DMA_REFLASH_RFF, csi->regbase + CSI_CSICR3);
+}
+
+static void csi_error_recovery(struct mx6s_csi_dev *csi_dev)
+{
+	u32 cr1, cr3, cr18;
+	/* software reset */
+
+	/* Disable csi  */
+	cr18 = csi_read(csi_dev, CSI_CSICR18);
+	cr18 &= ~BIT_CSI_ENABLE;
+	csi_write(csi_dev, cr18, CSI_CSICR18);
+
+	/* Clear RX FIFO */
+	cr1 = csi_read(csi_dev, CSI_CSICR1);
+	csi_write(csi_dev, cr1 & ~BIT_FCC, CSI_CSICR1);
+	cr1 = csi_read(csi_dev, CSI_CSICR1);
+	csi_write(csi_dev, cr1 | BIT_CLR_RXFIFO, CSI_CSICR1);
+
+	cr1 = csi_read(csi_dev, CSI_CSICR1);
+	csi_write(csi_dev, cr1 | BIT_FCC, CSI_CSICR1);
+
+	/* DMA reflash */
+	cr3 = csi_read(csi_dev, CSI_CSICR3);
+	cr3 |= BIT_DMA_REFLASH_RFF;
+	csi_write(csi_dev, cr3, CSI_CSICR3);
+
+	/* Ensable csi  */
+	cr18 |= BIT_CSI_ENABLE;
+	csi_write(csi_dev, cr18, CSI_CSICR18);
+}
+
+/*
+ *  Videobuf operations
+ */
+static int mx6s_videobuf_setup(struct vb2_queue *vq,
+			unsigned int *count, unsigned int *num_planes,
+			unsigned int sizes[], struct device *alloc_devs[])
+{
+	struct mx6s_csi_dev *csi_dev = vb2_get_drv_priv(vq);
+
+	dev_dbg(csi_dev->dev, "count=%d, size=%d\n", *count, sizes[0]);
+
+	alloc_devs[0] = csi_dev->dev;
+
+	sizes[0] = csi_dev->pix.sizeimage;
+
+	pr_debug("size=%d\n", sizes[0]);
+	if (0 == *count)
+		*count = 32;
+	if (!*num_planes &&
+	    sizes[0] * *count > MAX_VIDEO_MEM * 1024 * 1024)
+		*count = (MAX_VIDEO_MEM * 1024 * 1024) / sizes[0];
+
+	*num_planes = 1;
+
+	return 0;
+}
+
+static int mx6s_videobuf_prepare(struct vb2_buffer *vb)
+{
+	struct mx6s_csi_dev *csi_dev = vb2_get_drv_priv(vb->vb2_queue);
+	int ret = 0;
+
+	dev_dbg(csi_dev->dev, "%s (vb=0x%p) 0x%p %lu\n", __func__,
+		vb, vb2_plane_vaddr(vb, 0), vb2_get_plane_payload(vb, 0));
+
+#ifdef DEBUG
+	/*
+	 * This can be useful if you want to see if we actually fill
+	 * the buffer with something
+	 */
+	if (vb2_plane_vaddr(vb, 0))
+		memset((void *)vb2_plane_vaddr(vb, 0),
+		       0xaa, vb2_get_plane_payload(vb, 0));
+#endif
+
+	vb2_set_plane_payload(vb, 0, csi_dev->pix.sizeimage);
+	if (vb2_plane_vaddr(vb, 0) &&
+	    vb2_get_plane_payload(vb, 0) > vb2_plane_size(vb, 0)) {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	return 0;
+
+out:
+	return ret;
+}
+
+static void mx6s_videobuf_queue(struct vb2_buffer *vb)
+{
+	struct vb2_v4l2_buffer *vbuf = to_vb2_v4l2_buffer(vb);
+	struct mx6s_csi_dev *csi_dev = vb2_get_drv_priv(vb->vb2_queue);
+	struct mx6s_buffer *buf = container_of(vbuf, struct mx6s_buffer, vb);
+	unsigned long flags;
+
+	dev_dbg(csi_dev->dev, "%s (vb=0x%p) 0x%p %lu\n", __func__,
+		vb, vb2_plane_vaddr(vb, 0), vb2_get_plane_payload(vb, 0));
+
+	spin_lock_irqsave(&csi_dev->slock, flags);
+
+	list_add_tail(&buf->internal.queue, &csi_dev->capture);
+
+	spin_unlock_irqrestore(&csi_dev->slock, flags);
+}
+
+static void mx6s_update_csi_buf(struct mx6s_csi_dev *csi_dev,
+				 unsigned long phys, int bufnum)
+{
+	if (bufnum == 1)
+		csi_write(csi_dev, phys, CSI_CSIDMASA_FB2);
+	else
+		csi_write(csi_dev, phys, CSI_CSIDMASA_FB1);
+}
+
+static void mx6s_csi_init(struct mx6s_csi_dev *csi_dev)
+{
+	csi_clk_enable(csi_dev);
+	csihw_reset(csi_dev);
+	csi_init_interface(csi_dev);
+	csi_dmareq_rff_disable(csi_dev);
+}
+
+static void mx6s_csi_deinit(struct mx6s_csi_dev *csi_dev)
+{
+	csihw_reset(csi_dev);
+	csi_init_interface(csi_dev);
+	csi_dmareq_rff_disable(csi_dev);
+	csi_clk_disable(csi_dev);
+}
+
+static int mx6s_csi_enable(struct mx6s_csi_dev *csi_dev)
+{
+	struct v4l2_pix_format *pix = &csi_dev->pix;
+	unsigned long flags;
+	unsigned long val;
+	int timeout, timeout2;
+
+    csi_dev->skipframe = 3;
+	csisw_reset(csi_dev);
+
+	if (pix->field == V4L2_FIELD_INTERLACED)
+		csi_tvdec_enable(csi_dev, true);
+
+	/* For mipi csi input only */
+	if (csi_dev->csi_mipi_mode == true) {
+		csi_dmareq_rff_enable(csi_dev);
+		csi_enable_int(csi_dev, 1);
+		csi_enable(csi_dev, 1);
+		return 0;
+	}
+
+	local_irq_save(flags);
+    for (timeout = 10000000; timeout > 0; timeout--) {
+		if (csi_read(csi_dev, CSI_CSISR) & BIT_SOF_INT) {
+			val = csi_read(csi_dev, CSI_CSICR3);
+			csi_write(csi_dev, val | BIT_DMA_REFLASH_RFF,
+					CSI_CSICR3);
+			/* Wait DMA reflash done */
+            for (timeout2 = 1000000; timeout2 > 0; timeout2--) {
+				if (csi_read(csi_dev, CSI_CSICR3) &
+					BIT_DMA_REFLASH_RFF)
+					cpu_relax();
+				else
+					break;
+			}
+			if (timeout2 <= 0) {
+				pr_err("timeout when wait for reflash done.\n");
+				local_irq_restore(flags);
+				return -ETIME;
+			}
+			/* For imx6sl csi, DMA FIFO will auto start when sensor ready to work,
+			 * so DMA should enable right after FIFO reset, otherwise dma will lost data
+			 * and image will split.
+			 */
+			csi_dmareq_rff_enable(csi_dev);
+			csi_enable_int(csi_dev, 1);
+			csi_enable(csi_dev, 1);
+			break;
+		} else
+			cpu_relax();
+	}
+	if (timeout <= 0) {
+		pr_err("timeout when wait for SOF\n");
+		local_irq_restore(flags);
+		return -ETIME;
+	}
+	local_irq_restore(flags);
+
+	return 0;
+}
+
+static void mx6s_csi_disable(struct mx6s_csi_dev *csi_dev)
+{
+	struct v4l2_pix_format *pix = &csi_dev->pix;
+
+	csi_dmareq_rff_disable(csi_dev);
+	csi_disable_int(csi_dev);
+
+	/* set CSI_CSIDMASA_FB1 and CSI_CSIDMASA_FB2 to default value */
+	csi_write(csi_dev, 0, CSI_CSIDMASA_FB1);
+	csi_write(csi_dev, 0, CSI_CSIDMASA_FB2);
+
+	csi_buf_stride_set(csi_dev, 0);
+
+	if (pix->field == V4L2_FIELD_INTERLACED) {
+		csi_deinterlace_enable(csi_dev, false);
+		csi_tvdec_enable(csi_dev, false);
+	}
+
+	csi_enable(csi_dev, 0);
+}
+
+static int mx6s_configure_csi(struct mx6s_csi_dev *csi_dev)
+{
+	struct v4l2_pix_format *pix = &csi_dev->pix;
+	u32 cr1, cr18;
+	u32 width;
+
+	if (pix->field == V4L2_FIELD_INTERLACED) {
+		csi_deinterlace_enable(csi_dev, true);
+		csi_buf_stride_set(csi_dev, csi_dev->pix.width);
+		csi_deinterlace_mode(csi_dev, csi_dev->std);
+	} else {
+		csi_deinterlace_enable(csi_dev, false);
+		csi_buf_stride_set(csi_dev, 0);
+	}
+
+	switch (csi_dev->fmt->pixelformat) {
+	case V4L2_PIX_FMT_UYVY:
+	case V4L2_PIX_FMT_YUYV:
+		if (csi_dev->csi_mipi_mode == true)
+			width = pix->width;
+		else
+			/* For parallel 8-bit sensor input */
+			width = pix->width * 2;
+		break;
+	default:
+		width = pix->width;
+		break;
+	}
+
+    switch (csi_dev->fmt->pixelformat) {
+    case V4L2_PIX_FMT_GREY:
+	case V4L2_PIX_FMT_SBGGR8:
+    case V4L2_PIX_FMT_SRGGB8:
+	case V4L2_PIX_FMT_SGBRG8:
+        csi_dev->csi_two_8bit_sensor_mode = false;
+        break;
+	default:
+		csi_dev->csi_two_8bit_sensor_mode = true;
+		break;
+	}
+
+	csi_set_imagpara(csi_dev, width, pix->height);
+
+	if (csi_dev->csi_mipi_mode == true) {
+		cr1 = csi_read(csi_dev, CSI_CSICR1);
+		cr1 &= ~BIT_GCLK_MODE;
+		csi_write(csi_dev, cr1, CSI_CSICR1);
+
+		cr18 = csi_read(csi_dev, CSI_CSICR18);
+		cr18 &= ~BIT_MIPI_DATA_FORMAT_MASK;
+		cr18 |= BIT_DATA_FROM_MIPI;
+
+		switch (csi_dev->fmt->pixelformat) {
+		case V4L2_PIX_FMT_UYVY:
+		case V4L2_PIX_FMT_YUYV:
+			cr18 |= BIT_MIPI_DATA_FORMAT_YUV422_8B;
+			break;
+		case V4L2_PIX_FMT_SBGGR8:
+		case V4L2_PIX_FMT_GREY:
+        case V4L2_PIX_FMT_SRGGB8:
+		case V4L2_PIX_FMT_SGBRG8:
+			cr18 |= BIT_MIPI_DATA_FORMAT_RAW8;
+            break;
+        case V4L2_PIX_FMT_Y10:
+        case V4L2_PIX_FMT_SRGGB10:
+        case V4L2_PIX_FMT_SGBRG10:
+            cr18 |= BIT_MIPI_DATA_FORMAT_RAW10;
+            break;
+        case V4L2_PIX_FMT_Y12:
+        case V4L2_PIX_FMT_SRGGB12:
+		case V4L2_PIX_FMT_SGBRG12:
+            cr18 |= BIT_MIPI_DATA_FORMAT_RAW12;
+			break;
+		case V4L2_PIX_FMT_Y14:
+        case V4L2_PIX_FMT_SRGGB14:
+		case V4L2_PIX_FMT_SGBRG14:
+            cr18 |= BIT_MIPI_DATA_FORMAT_RAW14;
+			break;
+		default:
+			pr_debug("   fmt not supported\n");
+			return -EINVAL;
+		}
+
+		csi_write(csi_dev, cr18, CSI_CSICR18);
+	}
+	return 0;
+}
+
+static int mx6s_start_streaming(struct vb2_queue *vq, unsigned int count)
+{
+	struct mx6s_csi_dev *csi_dev = vb2_get_drv_priv(vq);
+	struct vb2_buffer *vb;
+	struct mx6s_buffer *buf;
+	unsigned long phys;
+	unsigned long flags;
+
+	if (count < 2)
+		return -ENOBUFS;
+
+	/*
+	 * I didn't manage to properly enable/disable
+	 * a per frame basis during running transfers,
+	 * thus we allocate a buffer here and use it to
+	 * discard frames when no buffer is available.
+	 * Feel free to work on this ;)
+	 */
+	csi_dev->discard_size = csi_dev->pix.sizeimage;
+	csi_dev->discard_buffer = dma_alloc_coherent(csi_dev->v4l2_dev.dev,
+					PAGE_ALIGN(csi_dev->discard_size),
+					&csi_dev->discard_buffer_dma,
+					GFP_DMA | GFP_KERNEL);
+	if (!csi_dev->discard_buffer)
+		return -ENOMEM;
+
+	spin_lock_irqsave(&csi_dev->slock, flags);
+
+	csi_dev->buf_discard[0].discard = true;
+	list_add_tail(&csi_dev->buf_discard[0].queue,
+		      &csi_dev->discard);
+
+	csi_dev->buf_discard[1].discard = true;
+	list_add_tail(&csi_dev->buf_discard[1].queue,
+		      &csi_dev->discard);
+
+	/* csi buf 0 */
+	buf = list_first_entry(&csi_dev->capture, struct mx6s_buffer,
+			       internal.queue);
+	buf->internal.bufnum = 0;
+	vb = &buf->vb.vb2_buf;
+	vb->state = VB2_BUF_STATE_ACTIVE;
+
+	phys = vb2_dma_contig_plane_dma_addr(vb, 0);
+
+	mx6s_update_csi_buf(csi_dev, phys, buf->internal.bufnum);
+	list_move_tail(csi_dev->capture.next, &csi_dev->active_bufs);
+
+	/* csi buf 1 */
+	buf = list_first_entry(&csi_dev->capture, struct mx6s_buffer,
+			       internal.queue);
+	buf->internal.bufnum = 1;
+	vb = &buf->vb.vb2_buf;
+	vb->state = VB2_BUF_STATE_ACTIVE;
+
+	phys = vb2_dma_contig_plane_dma_addr(vb, 0);
+	mx6s_update_csi_buf(csi_dev, phys, buf->internal.bufnum);
+	list_move_tail(csi_dev->capture.next, &csi_dev->active_bufs);
+
+	csi_dev->nextfb = 0;
+
+	spin_unlock_irqrestore(&csi_dev->slock, flags);
+
+	return mx6s_csi_enable(csi_dev);
+}
+
+static void mx6s_stop_streaming(struct vb2_queue *vq)
+{
+	struct mx6s_csi_dev *csi_dev = vb2_get_drv_priv(vq);
+	unsigned long flags;
+	struct mx6s_buffer *buf, *tmp;
+	void *b;
+
+	mx6s_csi_disable(csi_dev);
+
+	spin_lock_irqsave(&csi_dev->slock, flags);
+
+	list_for_each_entry_safe(buf, tmp,
+				&csi_dev->active_bufs, internal.queue) {
+		list_del_init(&buf->internal.queue);
+		if (buf->internal.discard == false &&
+		    buf->vb.vb2_buf.state == VB2_BUF_STATE_ACTIVE)
+			vb2_buffer_done(&buf->vb.vb2_buf, VB2_BUF_STATE_ERROR);
+	}
+
+	list_for_each_entry_safe(buf, tmp,
+				&csi_dev->capture, internal.queue) {
+		list_del_init(&buf->internal.queue);
+		if (buf->vb.vb2_buf.state == VB2_BUF_STATE_ACTIVE)
+			vb2_buffer_done(&buf->vb.vb2_buf, VB2_BUF_STATE_ERROR);
+	}
+
+	INIT_LIST_HEAD(&csi_dev->capture);
+	INIT_LIST_HEAD(&csi_dev->active_bufs);
+	INIT_LIST_HEAD(&csi_dev->discard);
+
+	b = csi_dev->discard_buffer;
+	csi_dev->discard_buffer = NULL;
+
+	spin_unlock_irqrestore(&csi_dev->slock, flags);
+
+	dma_free_coherent(csi_dev->v4l2_dev.dev,
+				csi_dev->discard_size, b,
+				csi_dev->discard_buffer_dma);
+}
+
+static struct vb2_ops mx6s_videobuf_ops = {
+	.queue_setup     = mx6s_videobuf_setup,
+	.buf_prepare     = mx6s_videobuf_prepare,
+	.buf_queue       = mx6s_videobuf_queue,
+	.wait_prepare    = vb2_ops_wait_prepare,
+	.wait_finish     = vb2_ops_wait_finish,
+	.start_streaming = mx6s_start_streaming,
+	.stop_streaming	 = mx6s_stop_streaming,
+};
+
+static void mx6s_csi_frame_done(struct mx6s_csi_dev *csi_dev,
+		int bufnum, bool err)
+{
+	struct mx6s_buf_internal *ibuf;
+	struct mx6s_buffer *buf;
+	struct vb2_buffer *vb;
+	unsigned long phys;
+	unsigned int phys_fb1;
+	unsigned int phys_fb2;
+
+	ibuf = list_first_entry(&csi_dev->active_bufs, struct mx6s_buf_internal,
+			       queue);
+
+	if (ibuf->discard) {
+		/*
+		 * Discard buffer must not be returned to user space.
+		 * Just return it to the discard queue.
+		 */
+		list_move_tail(csi_dev->active_bufs.next, &csi_dev->discard);
+	} else {
+		buf = mx6s_ibuf_to_buf(ibuf);
+
+		vb = &buf->vb.vb2_buf;
+		phys = vb2_dma_contig_plane_dma_addr(vb, 0);
+		if (bufnum == 1) {
+			phys_fb2 = csi_read(csi_dev, CSI_CSIDMASA_FB2);
+			if (phys_fb2 != (u32)phys) {
+				dev_err(csi_dev->dev, "%lx != %x\n", phys,
+					phys_fb2);
+			}
+		} else {
+			phys_fb1 = csi_read(csi_dev, CSI_CSIDMASA_FB1);
+			if (phys_fb1 != (u32)phys) {
+				dev_err(csi_dev->dev, "%lx != %x\n", phys,
+					phys_fb1);
+			}
+		}
+		dev_dbg(csi_dev->dev, "%s (vb=0x%p) 0x%p %lu\n", __func__, vb,
+				vb2_plane_vaddr(vb, 0),
+				vb2_get_plane_payload(vb, 0));
+
+		list_del_init(&buf->internal.queue);
+		vb->timestamp =ktime_get_ns();
+		to_vb2_v4l2_buffer(vb)->sequence = csi_dev->frame_count;
+		if (err)
+			vb2_buffer_done(vb, VB2_BUF_STATE_ERROR);
+		else
+			vb2_buffer_done(vb, VB2_BUF_STATE_DONE);
+	}
+
+	csi_dev->frame_count++;
+	csi_dev->nextfb = (bufnum == 0 ? 1 : 0);
+
+	/* Config discard buffer to active_bufs */
+	if (list_empty(&csi_dev->capture)) {
+		if (list_empty(&csi_dev->discard)) {
+			dev_warn(csi_dev->dev,
+					"%s: trying to access empty discard list\n",
+					__func__);
+			return;
+		}
+
+		ibuf = list_first_entry(&csi_dev->discard,
+					struct mx6s_buf_internal, queue);
+		ibuf->bufnum = bufnum;
+
+		list_move_tail(csi_dev->discard.next, &csi_dev->active_bufs);
+
+		mx6s_update_csi_buf(csi_dev,
+					csi_dev->discard_buffer_dma, bufnum);
+		return;
+	}
+
+	buf = list_first_entry(&csi_dev->capture, struct mx6s_buffer,
+			       internal.queue);
+
+	buf->internal.bufnum = bufnum;
+
+	list_move_tail(csi_dev->capture.next, &csi_dev->active_bufs);
+
+	vb = &buf->vb.vb2_buf;
+	vb->state = VB2_BUF_STATE_ACTIVE;
+
+	phys = vb2_dma_contig_plane_dma_addr(vb, 0);
+	mx6s_update_csi_buf(csi_dev, phys, bufnum);
+}
+
+static irqreturn_t mx6s_csi_irq_handler(int irq, void *data)
+{
+	struct mx6s_csi_dev *csi_dev =  data;
+	unsigned long status;
+	u32 cr3, cr18;
+
+	spin_lock(&csi_dev->slock);
+
+	status = csi_read(csi_dev, CSI_CSISR);
+	csi_write(csi_dev, status, CSI_CSISR);
+
+	if (list_empty(&csi_dev->active_bufs)) {
+		dev_warn(csi_dev->dev,
+				"%s: called while active list is empty\n",
+				__func__);
+
+		spin_unlock(&csi_dev->slock);
+		return IRQ_HANDLED;
+	}
+
+	if (status & BIT_RFF_OR_INT) {
+		dev_warn(csi_dev->dev, "%s Rx fifo overflow\n", __func__);
+		if (csi_dev->soc->rx_fifo_rst)
+			csi_error_recovery(csi_dev);
+	}
+
+	if (status & BIT_HRESP_ERR_INT) {
+		dev_warn(csi_dev->dev, "%s Hresponse error detected\n",
+			__func__);
+		csi_error_recovery(csi_dev);
+	}
+
+	if (status & BIT_ADDR_CH_ERR_INT) {
+		/* Disable csi  */
+		cr18 = csi_read(csi_dev, CSI_CSICR18);
+		cr18 &= ~BIT_CSI_ENABLE;
+		csi_write(csi_dev, cr18, CSI_CSICR18);
+
+		/* DMA reflash */
+		cr3 = csi_read(csi_dev, CSI_CSICR3);
+		cr3 |= BIT_DMA_REFLASH_RFF;
+		csi_write(csi_dev, cr3, CSI_CSICR3);
+
+		/* Ensable csi  */
+		cr18 |= BIT_CSI_ENABLE;
+		csi_write(csi_dev, cr18, CSI_CSICR18);
+
+		csi_dev->skipframe++;
+		pr_debug("base address switching Change Err.\n");
+	}
+
+	if ((status & BIT_DMA_TSF_DONE_FB1) &&
+		(status & BIT_DMA_TSF_DONE_FB2)) {
+		/* For both FB1 and FB2 interrupter bits set case,
+		 * CSI DMA is work in one of FB1 and FB2 buffer,
+		 * but software can not know the state.
+		 * Skip it to avoid base address updated
+		 * when csi work in field0 and field1 will write to
+		 * new base address.
+		 * PDM TKT230775 */
+        pr_debug("Skip two frames\n");
+	} else if (status & BIT_DMA_TSF_DONE_FB1) {
+		if (csi_dev->nextfb == 0) {
+			if (csi_dev->skipframe > 0)
+				csi_dev->skipframe--;
+			else
+				mx6s_csi_frame_done(csi_dev, 0, false);
+		} else
+			pr_warn("skip frame 0\n");
+
+	} else if (status & BIT_DMA_TSF_DONE_FB2) {
+		if (csi_dev->nextfb == 1) {
+			if (csi_dev->skipframe > 0)
+				csi_dev->skipframe--;
+			else
+				mx6s_csi_frame_done(csi_dev, 1, false);
+		} else
+			pr_warn("skip frame 1\n");
+	}
+
+	spin_unlock(&csi_dev->slock);
+
+	return IRQ_HANDLED;
+}
+
+/*
+ * File operations for the device
+ */
+static int mx6s_csi_open(struct file *file)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+	struct vb2_queue *q = &csi_dev->vb2_vidq;
+	int ret = 0;
+
+	file->private_data = csi_dev;
+
+	if (mutex_lock_interruptible(&csi_dev->lock))
+		return -ERESTARTSYS;
+
+	if (csi_dev->open_count++ == 0) {
+		q->type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+		q->io_modes = VB2_MMAP | VB2_USERPTR;
+		q->drv_priv = csi_dev;
+		q->ops = &mx6s_videobuf_ops;
+		q->mem_ops = &vb2_dma_contig_memops;
+		q->buf_struct_size = sizeof(struct mx6s_buffer);
+		q->timestamp_flags = V4L2_BUF_FLAG_TIMESTAMP_MONOTONIC;
+		q->lock = &csi_dev->lock;
+
+		ret = vb2_queue_init(q);
+		if (ret < 0)
+			goto unlock;
+
+		pm_runtime_get_sync(csi_dev->dev);
+
+		request_bus_freq(BUS_FREQ_HIGH);
+
+		v4l2_subdev_call(sd, core, s_power, 1);
+		mx6s_csi_init(csi_dev);
+
+	}
+	mutex_unlock(&csi_dev->lock);
+
+	return ret;
+unlock:
+	mutex_unlock(&csi_dev->lock);
+	return ret;
+}
+
+static int mx6s_csi_close(struct file *file)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+
+	mutex_lock(&csi_dev->lock);
+
+	if (--csi_dev->open_count == 0) {
+		vb2_queue_release(&csi_dev->vb2_vidq);
+
+		mx6s_csi_deinit(csi_dev);
+		v4l2_subdev_call(sd, core, s_power, 0);
+
+		file->private_data = NULL;
+
+		release_bus_freq(BUS_FREQ_HIGH);
+
+		pm_runtime_put_sync_suspend(csi_dev->dev);
+	}
+	mutex_unlock(&csi_dev->lock);
+
+	return 0;
+}
+
+static ssize_t mx6s_csi_read(struct file *file, char __user *buf,
+			       size_t count, loff_t *ppos)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	int ret;
+
+	dev_dbg(csi_dev->dev, "read called, buf %p\n", buf);
+
+	mutex_lock(&csi_dev->lock);
+	ret = vb2_read(&csi_dev->vb2_vidq, buf, count, ppos,
+				file->f_flags & O_NONBLOCK);
+	mutex_unlock(&csi_dev->lock);
+	return ret;
+}
+
+static struct v4l2_file_operations mx6s_csi_fops = {
+	.owner		= THIS_MODULE,
+	.open		= mx6s_csi_open,
+	.release	= mx6s_csi_close,
+	.read		= mx6s_csi_read,
+	.poll		= vb2_fop_poll,
+	.unlocked_ioctl	= video_ioctl2, /* V4L2 ioctl handler */
+	.mmap		= vb2_fop_mmap,
+};
+
+/*
+ * Video node IOCTLs
+ */
+static int mx6s_vidioc_enum_input(struct file *file, void *priv,
+				 struct v4l2_input *inp)
+{
+	if (inp->index != 0)
+		return -EINVAL;
+
+	/* default is camera */
+	inp->type = V4L2_INPUT_TYPE_CAMERA;
+	strcpy(inp->name, "Camera");
+
+	return 0;
+}
+
+static int mx6s_vidioc_g_input(struct file *file, void *priv, unsigned int *i)
+{
+	*i = 0;
+
+	return 0;
+}
+
+static int mx6s_vidioc_s_input(struct file *file, void *priv, unsigned int i)
+{
+	if (i > 0)
+		return -EINVAL;
+
+	return 0;
+}
+
+static int mx6s_vidioc_querystd(struct file *file, void *priv, v4l2_std_id *a)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+
+	return v4l2_subdev_call(sd, video, querystd, a);
+}
+
+static int mx6s_vidioc_s_std(struct file *file, void *priv, v4l2_std_id a)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+
+	return v4l2_subdev_call(sd, video, s_std, a);
+}
+
+static int mx6s_vidioc_g_std(struct file *file, void *priv, v4l2_std_id *a)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+
+	return v4l2_subdev_call(sd, video, g_std, a);
+}
+
+static int mx6s_vidioc_reqbufs(struct file *file, void *priv,
+			      struct v4l2_requestbuffers *p)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+
+	WARN_ON(priv != file->private_data);
+
+	return vb2_reqbufs(&csi_dev->vb2_vidq, p);
+}
+
+static int mx6s_vidioc_querybuf(struct file *file, void *priv,
+			       struct v4l2_buffer *p)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	int ret;
+
+	WARN_ON(priv != file->private_data);
+
+	ret = vb2_querybuf(&csi_dev->vb2_vidq, p);
+
+	if (!ret) {
+		/* return physical address */
+		struct vb2_buffer *vb = csi_dev->vb2_vidq.bufs[p->index];
+		if (p->flags & V4L2_BUF_FLAG_MAPPED)
+			p->m.offset = vb2_dma_contig_plane_dma_addr(vb, 0);
+	}
+	return ret;
+}
+
+static int mx6s_vidioc_qbuf(struct file *file, void *priv,
+			   struct v4l2_buffer *p)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+
+	WARN_ON(priv != file->private_data);
+
+	return vb2_qbuf(&csi_dev->vb2_vidq, NULL, p);
+}
+
+static int mx6s_vidioc_dqbuf(struct file *file, void *priv,
+			    struct v4l2_buffer *p)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+
+	WARN_ON(priv != file->private_data);
+
+	return vb2_dqbuf(&csi_dev->vb2_vidq, p, file->f_flags & O_NONBLOCK);
+}
+
+static int mx6s_vidioc_enum_fmt_vid_cap(struct file *file, void  *priv,
+				       struct v4l2_fmtdesc *f)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+	struct v4l2_subdev_mbus_code_enum code = {
+		.which = V4L2_SUBDEV_FORMAT_ACTIVE,
+		.index = f->index,
+	};
+	struct mx6s_fmt *fmt;
+	int ret;
+
+	WARN_ON(priv != file->private_data);
+
+	ret = v4l2_subdev_call(sd, pad, enum_mbus_code, NULL, &code);
+	if (ret < 0) {
+		/* no more formats */
+		dev_dbg(csi_dev->dev, "No more fmt\n");
+		return -EINVAL;
+	}
+
+	fmt = format_by_mbus(code.code);
+	if (!fmt) {
+		dev_err(csi_dev->dev, "mbus (0x%08x) invalid.\n", code.code);
+		return -EINVAL;
+	}
+
+	strlcpy(f->description, fmt->name, sizeof(f->description));
+	f->pixelformat = fmt->pixelformat;
+
+	return 0;
+}
+
+static int mx6s_vidioc_try_fmt_vid_cap(struct file *file, void *priv,
+				      struct v4l2_format *f)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+	struct v4l2_pix_format *pix = &f->fmt.pix;
+	struct v4l2_subdev_format format = {
+		.which = V4L2_SUBDEV_FORMAT_ACTIVE,
+	};
+	struct mx6s_fmt *fmt;
+	int ret;
+
+	fmt = format_by_fourcc(f->fmt.pix.pixelformat);
+	if (!fmt) {
+		dev_err(csi_dev->dev, "Fourcc format (0x%08x) invalid.",
+			f->fmt.pix.pixelformat);
+		return -EINVAL;
+	}
+
+	if (f->fmt.pix.width == 0 || f->fmt.pix.height == 0) {
+		dev_err(csi_dev->dev, "width %d, height %d is too small.\n",
+			f->fmt.pix.width, f->fmt.pix.height);
+		return -EINVAL;
+	}
+
+	v4l2_fill_mbus_format(&format.format, pix, fmt->mbus_code);
+	ret = v4l2_subdev_call(sd, pad, set_fmt, NULL, &format);
+	v4l2_fill_pix_format(pix, &format.format);
+
+	if (pix->field != V4L2_FIELD_INTERLACED)
+		pix->field = V4L2_FIELD_NONE;
+
+	pix->sizeimage = fmt->bpp * pix->height * pix->width;
+	pix->bytesperline = fmt->bpp * pix->width;
+
+	pix->colorspace = V4L2_COLORSPACE_SRGB;
+	pix->ycbcr_enc = V4L2_MAP_YCBCR_ENC_DEFAULT(pix->colorspace);
+	pix->quantization = V4L2_QUANTIZATION_FULL_RANGE;
+
+	return ret;
+}
+
+/*
+ * The real work of figuring out a workable format.
+ */
+
+static int mx6s_vidioc_s_fmt_vid_cap(struct file *file, void *priv,
+				    struct v4l2_format *f)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	int ret;
+
+	ret = mx6s_vidioc_try_fmt_vid_cap(file, csi_dev, f);
+	if (ret < 0)
+		return ret;
+
+	csi_dev->fmt              = format_by_fourcc(f->fmt.pix.pixelformat);
+	csi_dev->mbus_code        = csi_dev->fmt->mbus_code;
+	csi_dev->pix.width        = f->fmt.pix.width;
+	csi_dev->pix.height       = f->fmt.pix.height;
+	csi_dev->pix.sizeimage    = f->fmt.pix.sizeimage;
+    csi_dev->pix.bytesperline = f->fmt.pix.bytesperline;
+    csi_dev->pix.pixelformat  = f->fmt.pix.pixelformat;
+	csi_dev->pix.field        = f->fmt.pix.field;
+	csi_dev->type             = f->type;
+
+	dev_dbg(csi_dev->dev, "set to pixelformat '%4.6s'\n",
+			(char *)&csi_dev->fmt->name);
+
+	/* Config csi */
+	mx6s_configure_csi(csi_dev);
+
+	return 0;
+}
+
+static int mx6s_vidioc_g_fmt_vid_cap(struct file *file, void *priv,
+				    struct v4l2_format *f)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+
+	WARN_ON(priv != file->private_data);
+
+	f->fmt.pix = csi_dev->pix;
+
+	return 0;
+}
+
+static int mx6s_vidioc_querycap(struct file *file, void  *priv,
+			       struct v4l2_capability *cap)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+
+	WARN_ON(priv != file->private_data);
+
+	/* cap->name is set by the friendly caller:-> */
+	strlcpy(cap->driver, MX6S_CAM_DRV_NAME, sizeof(cap->driver));
+	strlcpy(cap->card, MX6S_CAM_DRIVER_DESCRIPTION, sizeof(cap->card));
+	snprintf(cap->bus_info, sizeof(cap->bus_info), "platform:%s",
+		 dev_name(csi_dev->dev));
+
+	cap->device_caps = V4L2_CAP_VIDEO_CAPTURE | V4L2_CAP_STREAMING;
+	cap->capabilities = cap->device_caps | V4L2_CAP_DEVICE_CAPS;
+	return 0;
+}
+
+static int mx6s_vidioc_expbuf(struct file *file, void *priv,
+			     struct v4l2_exportbuffer *eb)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+
+	if (eb->type == V4L2_BUF_TYPE_VIDEO_CAPTURE)
+		return vb2_expbuf(&csi_dev->vb2_vidq, eb);
+
+	return -EINVAL;
+}
+
+static int mx6s_vidioc_streamon(struct file *file, void *priv,
+			       enum v4l2_buf_type i)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+	int ret;
+
+	WARN_ON(priv != file->private_data);
+
+	if (i != V4L2_BUF_TYPE_VIDEO_CAPTURE)
+		return -EINVAL;
+
+	ret = vb2_streamon(&csi_dev->vb2_vidq, i);
+	if (!ret)
+		v4l2_subdev_call(sd, video, s_stream, 1);
+
+	return ret;
+}
+
+static int mx6s_vidioc_streamoff(struct file *file, void *priv,
+				enum v4l2_buf_type i)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+	int ret;
+
+	WARN_ON(priv != file->private_data);
+
+	if (i != V4L2_BUF_TYPE_VIDEO_CAPTURE)
+		return -EINVAL;
+
+	/*
+	 * This calls buf_release from host driver's videobuf_queue_ops for all
+	 * remaining buffers. When the last buffer is freed, stop capture
+	 */
+	ret = vb2_streamoff(&csi_dev->vb2_vidq, i);
+	if (!ret)
+		v4l2_subdev_call(sd, video, s_stream, 0);
+
+	return ret;
+}
+
+static int mx6s_vidioc_g_pixelaspect(struct file *file, void *fh,
+			       int type, struct v4l2_fract *f)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+
+	if (type != V4L2_BUF_TYPE_VIDEO_CAPTURE)
+		return -EINVAL;
+	dev_dbg(csi_dev->dev, "G_PIXELASPECT not implemented\n");
+
+	return 0;
+}
+
+static int mx6s_vidioc_g_selection(struct file *file, void *priv,
+			     struct v4l2_selection *s)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+
+	if (s->type != V4L2_BUF_TYPE_VIDEO_CAPTURE)
+		return -EINVAL;
+	dev_dbg(csi_dev->dev, "VIDIOC_G_SELECTION not implemented\n");
+
+	return 0;
+}
+
+static int mx6s_vidioc_s_selection(struct file *file, void *priv,
+			     struct v4l2_selection *s)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+
+	if (s->type != V4L2_BUF_TYPE_VIDEO_CAPTURE)
+		return -EINVAL;
+
+	dev_dbg(csi_dev->dev, "VIDIOC_S_SELECTION not implemented\n");
+
+	return 0;
+}
+
+static int mx6s_vidioc_g_parm(struct file *file, void *priv,
+			     struct v4l2_streamparm *a)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+
+	return v4l2_subdev_call(sd, video, g_parm, a);
+}
+
+static int mx6s_vidioc_s_parm(struct file *file, void *priv,
+				struct v4l2_streamparm *a)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+
+	return v4l2_subdev_call(sd, video, s_parm, a);
+}
+
+static int mx6s_vidioc_enum_framesizes(struct file *file, void *priv,
+					 struct v4l2_frmsizeenum *fsize)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+	struct mx6s_fmt *fmt;
+	struct v4l2_subdev_frame_size_enum fse = {
+		.index = fsize->index,
+		.which = V4L2_SUBDEV_FORMAT_ACTIVE,
+	};
+	int ret;
+
+	fmt = format_by_fourcc(fsize->pixel_format);
+	if (fmt->pixelformat != fsize->pixel_format)
+		return -EINVAL;
+	fse.code = fmt->mbus_code;
+
+	ret = v4l2_subdev_call(sd, pad, enum_frame_size, NULL, &fse);
+	if (ret)
+		return ret;
+
+	if (fse.min_width == fse.max_width &&
+	    fse.min_height == fse.max_height) {
+		fsize->type = V4L2_FRMSIZE_TYPE_DISCRETE;
+		fsize->discrete.width = fse.min_width;
+		fsize->discrete.height = fse.min_height;
+		return 0;
+	}
+
+	fsize->type = V4L2_FRMSIZE_TYPE_DISCRETE;
+	fsize->stepwise.min_width = fse.min_width;
+	fsize->stepwise.max_width = fse.max_width;
+	fsize->stepwise.min_height = fse.min_height;
+	fsize->stepwise.max_height = fse.max_height;
+	fsize->stepwise.step_width = 1;
+	fsize->stepwise.step_height = 1;
+
+	return 0;
+}
+
+static int mx6s_vidioc_enum_frameintervals(struct file *file, void *priv,
+		struct v4l2_frmivalenum *interval)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+	struct mx6s_fmt *fmt;
+	struct v4l2_subdev_frame_interval_enum fie = {
+		.index = interval->index,
+		.width = interval->width,
+		.height = interval->height,
+		.which = V4L2_SUBDEV_FORMAT_ACTIVE,
+	};
+	int ret;
+
+	fmt = format_by_fourcc(interval->pixel_format);
+	if (fmt->pixelformat != interval->pixel_format)
+		return -EINVAL;
+	fie.code = fmt->mbus_code;
+
+	ret = v4l2_subdev_call(sd, pad, enum_frame_interval, NULL, &fie);
+	if (ret)
+		return ret;
+	interval->type = V4L2_FRMIVAL_TYPE_DISCRETE;
+	interval->discrete = fie.interval;
+	return 0;
+}
+
+static const struct v4l2_ioctl_ops mx6s_csi_ioctl_ops = {
+	.vidioc_querycap          = mx6s_vidioc_querycap,
+	.vidioc_enum_fmt_vid_cap  = mx6s_vidioc_enum_fmt_vid_cap,
+	.vidioc_try_fmt_vid_cap   = mx6s_vidioc_try_fmt_vid_cap,
+	.vidioc_g_fmt_vid_cap     = mx6s_vidioc_g_fmt_vid_cap,
+	.vidioc_s_fmt_vid_cap     = mx6s_vidioc_s_fmt_vid_cap,
+	.vidioc_g_pixelaspect     = mx6s_vidioc_g_pixelaspect,
+	.vidioc_s_selection   = mx6s_vidioc_s_selection,
+	.vidioc_g_selection   = mx6s_vidioc_g_selection,
+	.vidioc_reqbufs       = mx6s_vidioc_reqbufs,
+	.vidioc_querybuf      = mx6s_vidioc_querybuf,
+	.vidioc_qbuf          = mx6s_vidioc_qbuf,
+	.vidioc_dqbuf         = mx6s_vidioc_dqbuf,
+	.vidioc_g_std         = mx6s_vidioc_g_std,
+	.vidioc_s_std         = mx6s_vidioc_s_std,
+	.vidioc_querystd      = mx6s_vidioc_querystd,
+	.vidioc_enum_input    = mx6s_vidioc_enum_input,
+	.vidioc_g_input       = mx6s_vidioc_g_input,
+	.vidioc_s_input       = mx6s_vidioc_s_input,
+	.vidioc_expbuf        = mx6s_vidioc_expbuf,
+	.vidioc_streamon      = mx6s_vidioc_streamon,
+	.vidioc_streamoff     = mx6s_vidioc_streamoff,
+	.vidioc_g_parm        = mx6s_vidioc_g_parm,
+	.vidioc_s_parm        = mx6s_vidioc_s_parm,
+	.vidioc_enum_framesizes = mx6s_vidioc_enum_framesizes,
+	.vidioc_enum_frameintervals = mx6s_vidioc_enum_frameintervals,
+};
+
+static int subdev_notifier_bound(struct v4l2_async_notifier *notifier,
+			    struct v4l2_subdev *subdev,
+			    struct v4l2_async_subdev *asd)
+{
+	struct mx6s_csi_dev *csi_dev = notifier_to_mx6s_dev(notifier);
+
+	if (subdev == NULL)
+		return -EINVAL;
+
+	/* Find platform data for this sensor subdev */
+	if (csi_dev->fwnode == dev_fwnode(subdev->dev))
+		csi_dev->sd = subdev;
+
+	v4l2_info(&csi_dev->v4l2_dev, "Registered sensor subdevice: %s\n",
+		  subdev->name);
+
+	return 0;
+}
+
+static int mx6s_csi_mode_sel(struct mx6s_csi_dev *csi_dev)
+{
+	struct device_node *np = csi_dev->dev->of_node;
+	struct device_node *node;
+	phandle phandle;
+	u32 out_val[3];
+	int ret = 0;
+
+	if (of_get_property(np, "fsl,mipi-mode", NULL))
+		csi_dev->csi_mipi_mode = true;
+	else {
+		csi_dev->csi_mipi_mode = false;
+		return ret;
+	}
+
+	ret = of_property_read_u32_array(np, "csi-mux-mipi", out_val, 3);
+	if (ret) {
+		dev_dbg(csi_dev->dev, "no csi-mux-mipi property found\n");
+	} else {
+		phandle = *out_val;
+
+		node = of_find_node_by_phandle(phandle);
+		if (!node) {
+			dev_dbg(csi_dev->dev, "not find gpr node by phandle\n");
+			ret = PTR_ERR(node);
+		}
+		csi_dev->csi_mux.gpr = syscon_node_to_regmap(node);
+		if (IS_ERR(csi_dev->csi_mux.gpr)) {
+			dev_err(csi_dev->dev, "failed to get gpr regmap\n");
+			ret = PTR_ERR(csi_dev->csi_mux.gpr);
+		}
+		of_node_put(node);
+		if (ret < 0)
+			return ret;
+
+		csi_dev->csi_mux.req_gpr = out_val[1];
+		csi_dev->csi_mux.req_bit = out_val[2];
+
+		regmap_update_bits(csi_dev->csi_mux.gpr, csi_dev->csi_mux.req_gpr,
+			1 << csi_dev->csi_mux.req_bit, 1 << csi_dev->csi_mux.req_bit);
+	}
+	return ret;
+}
+
+static const struct v4l2_async_notifier_operations mx6s_capture_async_ops = {
+	.bound = subdev_notifier_bound,
+};
+
+static int mx6s_csi_two_8bit_sensor_mode_sel(struct mx6s_csi_dev *csi_dev)
+{
+	struct device_node *np = csi_dev->dev->of_node;
+
+	if (of_get_property(np, "fsl,two-8bit-sensor-mode", NULL))
+		csi_dev->csi_two_8bit_sensor_mode = true;
+	else {
+		csi_dev->csi_two_8bit_sensor_mode = false;
+	}
+
+	return 0;
+}
+
+static int mx6sx_register_subdevs(struct mx6s_csi_dev *csi_dev)
+{
+	struct device_node *parent = csi_dev->dev->of_node;
+	struct device_node *node, *port, *rem;
+	struct v4l2_async_subdev *asd;
+	int ret;
+
+	v4l2_async_notifier_init(&csi_dev->subdev_notifier);
+
+	/* Attach sensors linked to csi receivers */
+	for_each_available_child_of_node(parent, node) {
+		if (of_node_cmp(node->name, "port"))
+			continue;
+
+		/* The csi node can have only port subnode. */
+		port = of_get_next_child(node, NULL);
+		if (!port)
+			continue;
+		rem = of_graph_get_remote_port_parent(port);
+		of_node_put(port);
+		if (rem == NULL) {
+			v4l2_info(&csi_dev->v4l2_dev,
+						"Remote device at %s not found\n",
+						port->full_name);
+			return -1;
+		}
+
+		csi_dev->fwnode = of_fwnode_handle(rem);
+		asd = v4l2_async_notifier_add_fwnode_subdev(
+					&csi_dev->subdev_notifier,
+					csi_dev->fwnode,
+					struct v4l2_async_subdev);
+		of_node_put(rem);
+		break;
+	}
+
+	csi_dev->subdev_notifier.ops = &mx6s_capture_async_ops;
+
+	ret = v4l2_async_notifier_register(&csi_dev->v4l2_dev,
+					&csi_dev->subdev_notifier);
+	if (ret)
+		dev_err(csi_dev->dev,
+					"Error register async notifier regoster\n");
+
+	return ret;
+}
+
+static int mx6s_csi_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	const struct of_device_id *of_id;
+	struct mx6s_csi_dev *csi_dev;
+	struct video_device *vdev;
+	struct resource *res;
+	int ret = 0;
+
+	dev_info(dev, "initialising\n");
+
+	/* Prepare our private structure */
+	csi_dev = devm_kzalloc(dev, sizeof(struct mx6s_csi_dev), GFP_ATOMIC);
+	if (!csi_dev) {
+		dev_err(dev, "Can't allocate private structure\n");
+		return -ENODEV;
+	}
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	csi_dev->irq = platform_get_irq(pdev, 0);
+	if (res == NULL || csi_dev->irq < 0) {
+		dev_err(dev, "Missing platform resources data\n");
+		return -ENODEV;
+	}
+
+	csi_dev->regbase = devm_ioremap_resource(dev, res);
+	if (IS_ERR(csi_dev->regbase)) {
+		dev_err(dev, "Failed platform resources map\n");
+		return -ENODEV;
+	}
+
+	/* init video dma queues */
+	INIT_LIST_HEAD(&csi_dev->capture);
+	INIT_LIST_HEAD(&csi_dev->active_bufs);
+	INIT_LIST_HEAD(&csi_dev->discard);
+
+	csi_dev->clk_disp_axi = devm_clk_get(dev, "disp-axi");
+	if (IS_ERR(csi_dev->clk_disp_axi)) {
+		dev_err(dev, "Could not get csi axi clock\n");
+		return -ENODEV;
+	}
+
+	csi_dev->clk_disp_dcic = devm_clk_get(dev, "disp_dcic");
+	if (IS_ERR(csi_dev->clk_disp_dcic)) {
+		dev_err(dev, "Could not get disp dcic clock\n");
+		return -ENODEV;
+	}
+
+	csi_dev->clk_csi_mclk = devm_clk_get(dev, "csi_mclk");
+	if (IS_ERR(csi_dev->clk_csi_mclk)) {
+		dev_err(dev, "Could not get csi mclk clock\n");
+		return -ENODEV;
+	}
+
+	csi_dev->dev = dev;
+
+	mx6s_csi_mode_sel(csi_dev);
+	mx6s_csi_two_8bit_sensor_mode_sel(csi_dev);
+
+	of_id = of_match_node(mx6s_csi_dt_ids, csi_dev->dev->of_node);
+	if (!of_id)
+		return -EINVAL;
+	csi_dev->soc = of_id->data;
+
+	v4l2_ctrl_handler_init(&csi_dev->ctrl_handler, 0);
+	csi_dev->v4l2_dev.ctrl_handler = &csi_dev->ctrl_handler;
+
+	snprintf(csi_dev->v4l2_dev.name,
+		 sizeof(csi_dev->v4l2_dev.name), "CSI");
+
+	ret = v4l2_device_register(dev, &csi_dev->v4l2_dev);
+	if (ret < 0) {
+		dev_err(dev, "v4l2_device_register() failed: %d\n", ret);
+        ret = -ENODEV;
+        goto err_v4l2;
+	}
+
+	/* initialize locks */
+	mutex_init(&csi_dev->lock);
+	spin_lock_init(&csi_dev->slock);
+
+	/* Allocate memory for video device */
+	vdev = video_device_alloc();
+	if (vdev == NULL) {
+		ret = -ENOMEM;
+		goto err_vdev;
+	}
+
+	snprintf(vdev->name, sizeof(vdev->name), "mx6s-csi");
+
+	vdev->v4l2_dev		= &csi_dev->v4l2_dev;
+	vdev->fops			= &mx6s_csi_fops;
+	vdev->ioctl_ops		= &mx6s_csi_ioctl_ops;
+	vdev->release		= video_device_release;
+	vdev->lock			= &csi_dev->lock;
+	vdev->device_caps = V4L2_CAP_VIDEO_CAPTURE | V4L2_CAP_STREAMING;
+
+	vdev->queue = &csi_dev->vb2_vidq;
+
+	csi_dev->vdev = vdev;
+
+	video_set_drvdata(csi_dev->vdev, csi_dev);
+	mutex_lock(&csi_dev->lock);
+
+	ret = video_register_device(csi_dev->vdev, VFL_TYPE_VIDEO, -1);
+	if (ret < 0) {
+		video_device_release(csi_dev->vdev);
+		mutex_unlock(&csi_dev->lock);
+		goto err_vdev;
+	}
+
+	/* install interrupt handler */
+	if (devm_request_irq(dev, csi_dev->irq, mx6s_csi_irq_handler,
+				0, "csi", (void *)csi_dev)) {
+		mutex_unlock(&csi_dev->lock);
+		dev_err(dev, "Request CSI IRQ failed.\n");
+		ret = -ENODEV;
+		goto err_irq;
+	}
+
+	mutex_unlock(&csi_dev->lock);
+
+	ret = mx6sx_register_subdevs(csi_dev);
+	if (ret < 0)
+		goto err_irq;
+
+	pm_runtime_enable(csi_dev->dev);
+	return 0;
+
+err_irq:
+	video_unregister_device(csi_dev->vdev);
+err_vdev:
+	v4l2_device_unregister(&csi_dev->v4l2_dev);
+err_v4l2:
+    v4l2_ctrl_handler_free(&csi_dev->ctrl_handler);
+	return ret;
+}
+
+static int mx6s_csi_remove(struct platform_device *pdev)
+{
+	struct v4l2_device *v4l2_dev = dev_get_drvdata(&pdev->dev);
+	struct mx6s_csi_dev *csi_dev =
+				container_of(v4l2_dev, struct mx6s_csi_dev, v4l2_dev);
+
+	v4l2_async_notifier_cleanup(&csi_dev->subdev_notifier);
+	v4l2_async_notifier_unregister(&csi_dev->subdev_notifier);
+
+	video_unregister_device(csi_dev->vdev);
+	v4l2_device_unregister(&csi_dev->v4l2_dev);
+    v4l2_ctrl_handler_free(&csi_dev->ctrl_handler);
+
+	pm_runtime_disable(csi_dev->dev);
+	return 0;
+}
+
+static int mx6s_csi_runtime_suspend(struct device *dev)
+{
+	dev_dbg(dev, "csi v4l2 busfreq high release.\n");
+	return 0;
+}
+
+static int mx6s_csi_runtime_resume(struct device *dev)
+{
+	dev_dbg(dev, "csi v4l2 busfreq high request.\n");
+	return 0;
+}
+
+static const struct dev_pm_ops mx6s_csi_pm_ops = {
+	SET_RUNTIME_PM_OPS(mx6s_csi_runtime_suspend, mx6s_csi_runtime_resume, NULL)
+};
+
+static const struct mx6s_csi_soc mx6s_soc = {
+	.rx_fifo_rst = true,
+	.baseaddr_switch = 0,
+};
+static const struct mx6s_csi_soc mx6sl_soc = {
+	.rx_fifo_rst = false,
+	.baseaddr_switch = 0,
+};
+static const struct mx6s_csi_soc mx8mq_soc = {
+	.rx_fifo_rst = true,
+	.baseaddr_switch = 0x80030,
+};
+
+static const struct of_device_id mx6s_csi_dt_ids[] = {
+	{ .compatible = "fsl,imx6s-csi",
+	  .data = &mx6s_soc,
+	},
+	{ .compatible = "fsl,imx6sl-csi",
+	  .data = &mx6sl_soc,
+	},
+	{ .compatible = "fsl,imx8mq-csi",
+	  .data = &mx8mq_soc,
+	},
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, mx6s_csi_dt_ids);
+
+static struct platform_driver mx6s_csi_driver = {
+	.driver		= {
+		.name	= MX6S_CAM_DRV_NAME,
+		.of_match_table = of_match_ptr(mx6s_csi_dt_ids),
+		.pm = &mx6s_csi_pm_ops,
+	},
+	.probe	= mx6s_csi_probe,
+	.remove	= mx6s_csi_remove,
+};
+
+module_platform_driver(mx6s_csi_driver);
+
+MODULE_DESCRIPTION("i.MX6Sx SoC Camera Host driver");
+MODULE_AUTHOR("Freescale Semiconductor, Inc.");
+MODULE_LICENSE("GPL");
+MODULE_VERSION(MX6S_CAM_VERSION);
diff --git a/drivers/media/platform/mxc/capture/mxc_mipi_csi.c b/drivers/media/platform/mxc/capture/mxc_mipi_csi.c
index 0c7bdb91d..ec6701c99 100644
--- a/drivers/media/platform/mxc/capture/mxc_mipi_csi.c
+++ b/drivers/media/platform/mxc/capture/mxc_mipi_csi.c
@@ -1,1372 +1,1378 @@
-/* SPDX-License-Identifier: GPL-2.0-or-later */
-/*
- * Freescale i.MX7 SoC series MIPI-CSI V3.3 receiver driver
- *
- * Copyright (C) 2015-2016 Freescale Semiconductor, Inc. All Rights Reserved.
- * Copyright 2019 NXP
- */
-/*
- * Samsung S5P/EXYNOS SoC series MIPI-CSI receiver driver
- *
- * Copyright (C) 2011 - 2013 Samsung Electronics Co., Ltd.
- * Author: Sylwester Nawrocki <s.nawrocki@samsung.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- */
-
-#include <linux/clk.h>
-#include <linux/delay.h>
-#include <linux/errno.h>
-#include <linux/interrupt.h>
-#include <linux/io.h>
-#include <linux/irq.h>
-#include <linux/kernel.h>
-#include <linux/mfd/syscon.h>
-#include <linux/module.h>
-#include <linux/of.h>
-#include <linux/of_address.h>
-#include <linux/of_graph.h>
-#include <linux/platform_device.h>
-#include <linux/pm_runtime.h>
-#include <linux/regmap.h>
-#include <linux/regulator/consumer.h>
-#include <linux/reset.h>
-#include <linux/slab.h>
-#include <linux/spinlock.h>
-#include <linux/videodev2.h>
-#include <media/v4l2-subdev.h>
-#include <media/v4l2-device.h>
-
-static int debug;
-module_param(debug, int, 0644);
-MODULE_PARM_DESC(debug, "Debug level (0-2)");
-
-#define CSIS_DRIVER_NAME	"mxc_mipi-csi"
-#define CSIS_SUBDEV_NAME	CSIS_DRIVER_NAME
-#define CSIS_MAX_ENTITIES	2
-#define CSIS0_MAX_LANES		4
-#define CSIS1_MAX_LANES		2
-
-#define MIPI_CSIS_DEF_PIX_WIDTH	640
-#define MIPI_CSIS_DEF_PIX_HEIGHT	480
-
-/* Register map definition */
-
-/* CSIS version */
-#define MIPI_CSIS_VERSION		0x00
-
-/* CSIS common control */
-#define MIPI_CSIS_CMN_CTRL			0x04
-#define MIPI_CSIS_CMN_CTRL_UPDATE_SHADOW	(1 << 16)
-#define MIPI_CSIS_CMN_CTRL_INTER_MODE		(1 << 10)
-#define MIPI_CSIS_CMN_CTRL_LANE_NR_OFFSET	8
-#define MIPI_CSIS_CMN_CTRL_LANE_NR_MASK		(3 << 8)
-#define MIPI_CSIS_CMN_CTRL_UPDATE_SHADOW_CTRL	(1 << 2)
-#define MIPI_CSIS_CMN_CTRL_RESET		(1 << 1)
-#define MIPI_CSIS_CMN_CTRL_ENABLE		(1 << 0)
-
-/* CSIS clock control */
-#define MIPI_CSIS_CLK_CTRL		0x08
-#define MIPI_CSIS_CLK_CTRL_CLKGATE_TRAIL_CH3(x)	(x << 28)
-#define MIPI_CSIS_CLK_CTRL_CLKGATE_TRAIL_CH2(x)	(x << 24)
-#define MIPI_CSIS_CLK_CTRL_CLKGATE_TRAIL_CH1(x)	(x << 20)
-#define MIPI_CSIS_CLK_CTRL_CLKGATE_TRAIL_CH0(x)	(x << 16)
-#define MIPI_CSIS_CLK_CTRL_CLKGATE_EN_MSK	(0xf << 4)
-#define MIPI_CSIS_CLK_CTRL_WCLK_SRC		(1 << 0)
-
-/* CSIS Interrupt mask */
-#define MIPI_CSIS_INTMSK			0x10
-#define MIPI_CSIS_INTMSK_EVEN_BEFORE	(1 << 31)
-#define MIPI_CSIS_INTMSK_EVEN_AFTER	(1 << 30)
-#define MIPI_CSIS_INTMSK_ODD_BEFORE	(1 << 29)
-#define MIPI_CSIS_INTMSK_ODD_AFTER	(1 << 28)
-#define MIPI_CSIS_INTMSK_FRAME_START	(1 << 24)
-#define MIPI_CSIS_INTMSK_FRAME_END	(1 << 20)
-#define MIPI_CSIS_INTMSK_ERR_SOT_HS	(1 << 16)
-#define MIPI_CSIS_INTMSK_ERR_LOST_FS	(1 << 12)
-#define MIPI_CSIS_INTMSK_ERR_LOST_FE	(1 << 8)
-#define MIPI_CSIS_INTMSK_ERR_OVER		(1 << 4)
-#define MIPI_CSIS_INTMSK_ERR_WRONG_CFG	(1 << 3)
-#define MIPI_CSIS_INTMSK_ERR_ECC		(1 << 2)
-#define MIPI_CSIS_INTMSK_ERR_CRC		(1 << 1)
-#define MIPI_CSIS_INTMSK_ERR_UNKNOWN	(1 << 0)
-
-/* CSIS Interrupt source */
-#define MIPI_CSIS_INTSRC			0x14
-#define MIPI_CSIS_INTSRC_EVEN_BEFORE	(1 << 31)
-#define MIPI_CSIS_INTSRC_EVEN_AFTER	(1 << 30)
-#define MIPI_CSIS_INTSRC_EVEN		(0x3 << 30)
-#define MIPI_CSIS_INTSRC_ODD_BEFORE	(1 << 29)
-#define MIPI_CSIS_INTSRC_ODD_AFTER	(1 << 28)
-#define MIPI_CSIS_INTSRC_ODD			(0x3 << 28)
-#define MIPI_CSIS_INTSRC_NON_IMAGE_DATA	(0xf << 28)
-#define MIPI_CSIS_INTSRC_FRAME_START	(1 << 24)
-#define MIPI_CSIS_INTSRC_FRAME_END	(1 << 20)
-#define MIPI_CSIS_INTSRC_ERR_SOT_HS	(1 << 16)
-#define MIPI_CSIS_INTSRC_ERR_LOST_FS	(1 << 12)
-#define MIPI_CSIS_INTSRC_ERR_LOST_FE	(1 << 8)
-#define MIPI_CSIS_INTSRC_ERR_OVER		(1 << 4)
-#define MIPI_CSIS_INTSRC_ERR_WRONG_CFG	(1 << 3)
-#define MIPI_CSIS_INTSRC_ERR_ECC		(1 << 2)
-#define MIPI_CSIS_INTSRC_ERR_CRC		(1 << 1)
-#define MIPI_CSIS_INTSRC_ERR_UNKNOWN	(1 << 0)
-#define MIPI_CSIS_INTSRC_ERRORS		0xfffff
-
-/* D-PHY status control */
-#define MIPI_CSIS_DPHYSTATUS		0x20
-#define MIPI_CSIS_DPHYSTATUS_ULPS_DAT			(1 << 8)
-#define MIPI_CSIS_DPHYSTATUS_STOPSTATE_DAT		(1 << 4)
-#define MIPI_CSIS_DPHYSTATUS_ULPS_CLK			(1 << 1)
-#define MIPI_CSIS_DPHYSTATUS_STOPSTATE_CLK		(1 << 0)
-
-/* D-PHY common control */
-#define MIPI_CSIS_DPHYCTRL		0x24
-#define MIPI_CSIS_DPHYCTRL_HSS_MASK			(0xff << 24)
-#define MIPI_CSIS_DPHYCTRL_HSS_OFFSET		24
-#define MIPI_CSIS_DPHYCTRL_SCLKS_MASK		(0x3 << 22)
-#define MIPI_CSIS_DPHYCTRL_SCLKS_OFFSET		22
-#define MIPI_CSIS_DPHYCTRL_DPDN_SWAP_CLK	(1 << 6)
-#define MIPI_CSIS_DPHYCTRL_DPDN_SWAP_DAT	(1 << 5)
-#define MIPI_CSIS_DPHYCTRL_ENABLE_DAT		(1 << 1)
-#define MIPI_CSIS_DPHYCTRL_ENABLE_CLK		(1 << 0)
-#define MIPI_CSIS_DPHYCTRL_ENABLE			(0x1f << 0)
-
-/* D-PHY Master and Slave Control register Low */
-#define MIPI_CSIS_DPHYBCTRL_L		0x30
-/* D-PHY Master and Slave Control register High */
-#define MIPI_CSIS_DPHYBCTRL_H		0x34
-/* D-PHY Slave Control register Low */
-#define MIPI_CSIS_DPHYSCTRL_L		0x38
-/* D-PHY Slave Control register High */
-#define MIPI_CSIS_DPHYSCTRL_H		0x3c
-
-
-/* ISP Configuration register */
-#define MIPI_CSIS_ISPCONFIG_CH0			0x40
-#define MIPI_CSIS_ISPCONFIG_CH1			0x50
-#define MIPI_CSIS_ISPCONFIG_CH2			0x60
-#define MIPI_CSIS_ISPCONFIG_CH3			0x70
-
-#define MIPI_CSIS_ISPCFG_MEM_FULL_GAP_MSK    (0xff << 24)
-#define MIPI_CSIS_ISPCFG_MEM_FULL_GAP(x)     (x << 24)
-#define MIPI_CSIS_ISPCFG_DOUBLE_CMPNT        (1 << 12)
-#define MIPI_CSIS_ISPCFG_ALIGN_32BIT         (1 << 11)
-#define MIPI_CSIS_ISPCFG_FMT_YCBCR422_8BIT   (0x1e << 2)
-#define MIPI_CSIS_ISPCFG_FMT_RAW8		(0x2a << 2)
-#define MIPI_CSIS_ISPCFG_FMT_RAW10		(0x2b << 2)
-#define MIPI_CSIS_ISPCFG_FMT_RAW12		(0x2c << 2)
-#define MIPI_CSIS_ISPCFG_FMT_RAW14		(0x2d << 2)
-/* User defined formats, x = 1...4 */
-#define MIPI_CSIS_ISPCFG_FMT_USER(x)	((0x30 + x - 1) << 2)
-#define MIPI_CSIS_ISPCFG_FMT_MASK		(0x3f << 2)
-
-/* ISP Image Resolution register */
-#define MIPI_CSIS_ISPRESOL_CH0			0x44
-#define MIPI_CSIS_ISPRESOL_CH1			0x54
-#define MIPI_CSIS_ISPRESOL_CH2			0x64
-#define MIPI_CSIS_ISPRESOL_CH3			0x74
-#define CSIS_MAX_PIX_WIDTH		0xffff
-#define CSIS_MAX_PIX_HEIGHT		0xffff
-
-/* ISP SYNC register */
-#define MIPI_CSIS_ISPSYNC_CH0			0x48
-#define MIPI_CSIS_ISPSYNC_CH1			0x58
-#define MIPI_CSIS_ISPSYNC_CH2			0x68
-#define MIPI_CSIS_ISPSYNC_CH3			0x78
-
-#define MIPI_CSIS_ISPSYNC_HSYNC_LINTV_OFFSET	18
-#define MIPI_CSIS_ISPSYNC_VSYNC_SINTV_OFFSET 	12
-#define MIPI_CSIS_ISPSYNC_VSYNC_EINTV_OFFSET	0
-
-/* Non-image packet data buffers */
-#define MIPI_CSIS_PKTDATA_ODD		0x2000
-#define MIPI_CSIS_PKTDATA_EVEN		0x3000
-#define MIPI_CSIS_PKTDATA_SIZE		SZ_4K
-
-#define DEFAULT_SCLK_CSIS_FREQ	166000000UL
-
-enum {
-	ST_POWERED	= 1,
-	ST_STREAMING	= 2,
-	ST_SUSPENDED	= 4,
-};
-
-struct mipi_csis_event {
-	u32 mask;
-	const char * const name;
-	unsigned int counter;
-};
-
-static const struct mipi_csis_event mipi_csis_events[] = {
-	/* Errors */
-	{ MIPI_CSIS_INTSRC_ERR_SOT_HS,	"SOT Error" },
-	{ MIPI_CSIS_INTSRC_ERR_LOST_FS,	"Lost Frame Start Error" },
-	{ MIPI_CSIS_INTSRC_ERR_LOST_FE,	"Lost Frame End Error" },
-	{ MIPI_CSIS_INTSRC_ERR_OVER,	"FIFO Overflow Error" },
-	{ MIPI_CSIS_INTSRC_ERR_ECC,	"ECC Error" },
-	{ MIPI_CSIS_INTSRC_ERR_CRC,	"CRC Error" },
-	{ MIPI_CSIS_INTSRC_ERR_UNKNOWN,	"Unknown Error" },
-	/* Non-image data receive events */
-	{ MIPI_CSIS_INTSRC_EVEN_BEFORE,	"Non-image data before even frame" },
-	{ MIPI_CSIS_INTSRC_EVEN_AFTER,	"Non-image data after even frame" },
-	{ MIPI_CSIS_INTSRC_ODD_BEFORE,	"Non-image data before odd frame" },
-	{ MIPI_CSIS_INTSRC_ODD_AFTER,	"Non-image data after odd frame" },
-	/* Frame start/end */
-	{ MIPI_CSIS_INTSRC_FRAME_START,	"Frame Start" },
-	{ MIPI_CSIS_INTSRC_FRAME_END,	"Frame End" },
-};
-#define MIPI_CSIS_NUM_EVENTS ARRAY_SIZE(mipi_csis_events)
-
-struct csis_pktbuf {
-	u32 *data;
-	unsigned int len;
-};
-
-struct csis_hw_reset {
-	struct regmap *src;
-	u8 req_src;
-	u8 rst_bit;
-};
-
-/**
- * struct csi_state - the driver's internal state data structure
- * @lock: mutex serializing the subdev and power management operations,
- *        protecting @format and @flags members
- * @sd: v4l2_subdev associated with CSIS device instance
- * @index: the hardware instance index
- * @pdev: CSIS platform device
- * @phy: pointer to the CSIS generic PHY
- * @regs: mmaped I/O registers memory
- * @supplies: CSIS regulator supplies
- * @clock: CSIS clocks
- * @irq: requested s5p-mipi-csis irq number
- * @flags: the state variable for power and streaming control
- * @clock_frequency: device bus clock frequency
- * @hs_settle: HS-RX settle time
- * @clk_settle: Clk settle time
- * @num_lanes: number of MIPI-CSI data lanes used
- * @max_num_lanes: maximum number of MIPI-CSI data lanes supported
- * @wclk_ext: CSI wrapper clock: 0 - bus clock, 1 - external SCLK_CAM
- * @csis_fmt: current CSIS pixel format
- * @format: common media bus format for the source and sink pad
- * @slock: spinlock protecting structure members below
- * @pkt_buf: the frame embedded (non-image) data buffer
- * @events: MIPI-CSIS event (error) counters
- */
-struct csi_state {
-	struct mutex lock;
-	struct device		*dev;
-	struct v4l2_subdev mipi_sd;
-	struct v4l2_subdev *sensor_sd;
-	struct v4l2_device	v4l2_dev;
-
-	u8 index;
-	struct platform_device *pdev;
-	struct phy *phy;
-	void __iomem *regs;
-	struct clk *mipi_clk;
-	struct clk *phy_clk;
-	struct clk *disp_axi;
-	struct clk *disp_apb;
-	int irq;
-	u32 flags;
-
-	u32 clk_frequency;
-	u32 hs_settle;
-	u32 clk_settle;
-	u32 num_lanes;
-	u32 max_num_lanes;
-	u8 wclk_ext;
-
-	const struct csis_pix_format *csis_fmt;
-	struct v4l2_mbus_framefmt format;
-
-	spinlock_t slock;
-	struct csis_pktbuf pkt_buf;
-	struct mipi_csis_event events[MIPI_CSIS_NUM_EVENTS];
-
-	struct fwnode_handle *fwnode;
-	struct v4l2_async_notifier  subdev_notifier;
-
-	struct csis_hw_reset hw_reset;
-	struct regulator     *mipi_phy_regulator;
-};
-
-/**
- * struct csis_pix_format - CSIS pixel format description
- * @pix_width_alignment: horizontal pixel alignment, width will be
- *                       multiple of 2^pix_width_alignment
- * @code: corresponding media bus code
- * @fmt_reg: MIPI_CSIS_CONFIG register value
- * @data_alignment: MIPI-CSI data alignment in bits
- */
-struct csis_pix_format {
-	unsigned int pix_width_alignment;
-	u32 code;
-	u32 fmt_reg;
-	u8 data_alignment;
-};
-
-static const struct csis_pix_format mipi_csis_formats[] = {
-	{
-		.code = MEDIA_BUS_FMT_YUYV8_2X8,
-		.fmt_reg = MIPI_CSIS_ISPCFG_FMT_YCBCR422_8BIT,
-		.data_alignment = 16,
-	}, {
-		.code = MEDIA_BUS_FMT_VYUY8_2X8,
-		.fmt_reg = MIPI_CSIS_ISPCFG_FMT_YCBCR422_8BIT,
-		.data_alignment = 16,
-	}, {
-		.code = MEDIA_BUS_FMT_SBGGR8_1X8,
-		.fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW8,
-		.data_alignment = 8,
-	},  {	
-		.code = MEDIA_BUS_FMT_Y8_1X8,
-        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW8,
-        .data_alignment = 8,
-	},  {
-        .code = MEDIA_BUS_FMT_SRGGB8_1X8,
-        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW8,
-        .data_alignment = 8,
-    },  {
-        .code = MEDIA_BUS_FMT_SGBRG8_1X8,
-        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW8,
-        .data_alignment = 8,
-    },  {
-        .code = MEDIA_BUS_FMT_Y10_1X10,
-        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW10,
-        .data_alignment = 16,
-    },  {
-        .code = MEDIA_BUS_FMT_SRGGB10_1X10,
-        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW10,
-        .data_alignment = 16,
-    },  {
-        .code = MEDIA_BUS_FMT_SGBRG10_1X10,
-        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW10,
-        .data_alignment = 16,
-    },  {
-        .code = MEDIA_BUS_FMT_Y12_1X12,
-        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW12,
-        .data_alignment = 16,
-    },  {
-        .code = MEDIA_BUS_FMT_SRGGB12_1X12,
-        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW12,
-        .data_alignment = 16,
-    },  {
-        .code = MEDIA_BUS_FMT_SGBRG12_1X12,
-        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW12,
-        .data_alignment = 16,
-    },  {
-        .code = MEDIA_BUS_FMT_Y14_1X14,
-        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW14,
-        .data_alignment = 16,
-	},  {
-        .code = MEDIA_BUS_FMT_SRGGB14_1X14,
-        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW14,
-        .data_alignment = 16,
-	},  {
-        .code = MEDIA_BUS_FMT_SGBRG14_1X14,
-        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW14,
-        .data_alignment = 16,
-	}
-};
-
-typedef int (*mipi_csis_phy_reset_t)(struct csi_state *state);
-
-#define mipi_csis_write(__csis, __r, __v) writel(__v, __csis->regs + __r)
-#define mipi_csis_read(__csis, __r) readl(__csis->regs + __r)
-
-static struct csi_state *mipi_sd_to_csi_state(struct v4l2_subdev *sdev)
-{
-	return container_of(sdev, struct csi_state, mipi_sd);
-}
-
-static inline struct csi_state
-				*notifier_to_mipi_dev(struct v4l2_async_notifier *n)
-{
-	return container_of(n, struct csi_state, subdev_notifier);
-}
-
-static const struct csis_pix_format *find_csis_format(u32 code)
-{
-	int i;
-
-	for (i = 0; i < ARRAY_SIZE(mipi_csis_formats); i++)
-		if (code == mipi_csis_formats[i].code)
-			return &mipi_csis_formats[i];
-	return NULL;
-}
-
-static void mipi_csis_enable_interrupts(struct csi_state *state, bool on)
-{
-	u32 val = mipi_csis_read(state, MIPI_CSIS_INTMSK);
-	if (on)
-		val |= 0xf00fffff;
-	else
-		val &= ~0xf00fffff;
-	mipi_csis_write(state, MIPI_CSIS_INTMSK, val);
-}
-
-static void mipi_csis_sw_reset(struct csi_state *state)
-{
-	u32 val = mipi_csis_read(state, MIPI_CSIS_CMN_CTRL);
-
-	mipi_csis_write(state, MIPI_CSIS_CMN_CTRL, val | MIPI_CSIS_CMN_CTRL_RESET);
-	udelay(10);
-}
-
-static int mipi_csis_phy_init(struct csi_state *state)
-{
-	int ret;
-
-	state->mipi_phy_regulator = devm_regulator_get(state->dev,
-				"mipi-phy");
-
-	ret = regulator_set_voltage(state->mipi_phy_regulator,
-			1000000, 1000000);
-
-	return ret;
-}
-
-static int mipi_csis_phy_reset_mx8mm(struct csi_state *state)
-{
-	struct reset_control *phy_reset;
-
-	phy_reset = devm_reset_control_get_exclusive(state->dev, "csi,mipi_rst");
-	if (IS_ERR(phy_reset))
-		return PTR_ERR(phy_reset);
-
-	reset_control_assert(phy_reset);
-	usleep_range(10, 20);
-	reset_control_deassert(phy_reset);
-	usleep_range(10, 20);
-
-	return 0;
-
-}
-
-static int mipi_csis_phy_reset(struct csi_state *state)
-{
-	struct device_node *np = state->dev->of_node;
-	struct device_node *node;
-	phandle phandle;
-	u32 out_val[3];
-	int ret;
-
-	ret = of_property_read_u32_array(np, "csis-phy-reset", out_val, 3);
-	if (ret) {
-		dev_dbg(state->dev, "no csis-hw-reset property found\n");
-	} else {
-		phandle = *out_val;
-
-		node = of_find_node_by_phandle(phandle);
-		if (!node) {
-			dev_dbg(state->dev, "not find src node by phandle\n");
-			ret = PTR_ERR(node);
-		}
-		state->hw_reset.src = syscon_node_to_regmap(node);
-		if (IS_ERR(state->hw_reset.src)) {
-			dev_err(state->dev, "failed to get src regmap\n");
-			ret = PTR_ERR(state->hw_reset.src);
-		}
-		of_node_put(node);
-		if (ret < 0)
-			return ret;
-
-		state->hw_reset.req_src = out_val[1];
-		state->hw_reset.rst_bit = out_val[2];
-
-		/* reset mipi phy */
-		regmap_update_bits(state->hw_reset.src, state->hw_reset.req_src,
-			1 << state->hw_reset.rst_bit, 1 << state->hw_reset.rst_bit);
-		msleep(20);
-		regmap_update_bits(state->hw_reset.src, state->hw_reset.req_src,
-			1 << state->hw_reset.rst_bit, 0);
-
-	}
-	return ret;
-}
-
-static void mipi_csis_system_enable(struct csi_state *state, int on)
-{
-	u32 val, mask;
-
-	val = mipi_csis_read(state, MIPI_CSIS_CMN_CTRL);
-	if (on)
-		val |= MIPI_CSIS_CMN_CTRL_ENABLE;
-	else
-		val &= ~MIPI_CSIS_CMN_CTRL_ENABLE;
-	mipi_csis_write(state, MIPI_CSIS_CMN_CTRL, val);
-
-	val = mipi_csis_read(state, MIPI_CSIS_DPHYCTRL);
-	val &= ~MIPI_CSIS_DPHYCTRL_ENABLE;
-	if (on) {
-		mask = (1 << (state->num_lanes + 1)) - 1;
-		val |= (mask & MIPI_CSIS_DPHYCTRL_ENABLE);
-	}
-	mipi_csis_write(state, MIPI_CSIS_DPHYCTRL, val);
-}
-
-/* Called with the state.lock mutex held */
-static void __mipi_csis_set_format(struct csi_state *state)
-{
-	struct v4l2_mbus_framefmt *mf = &state->format;
-	u32 val;
-
-	v4l2_dbg(1, debug, &state->mipi_sd, "fmt: %#x, %d x %d\n",
-		 mf->code, mf->width, mf->height);
-
-	/* Color format */
-	val = mipi_csis_read(state, MIPI_CSIS_ISPCONFIG_CH0);
-	val = (val & ~MIPI_CSIS_ISPCFG_FMT_MASK) | state->csis_fmt->fmt_reg;
-	mipi_csis_write(state, MIPI_CSIS_ISPCONFIG_CH0, val);
-
-	/* Pixel resolution */
-	val = mf->width | (mf->height << 16);
-	mipi_csis_write(state, MIPI_CSIS_ISPRESOL_CH0, val);
-}
-
-static void mipi_csis_set_hsync_settle(struct csi_state *state,
-								int hs_settle, int clk_settle)
-{
-	u32 val = mipi_csis_read(state, MIPI_CSIS_DPHYCTRL);
-
-	val = (val & ~MIPI_CSIS_DPHYCTRL_HSS_MASK) |
-				(hs_settle << 24) | (clk_settle << 22);
-
-	mipi_csis_write(state, MIPI_CSIS_DPHYCTRL, val);
-}
-
-static void mipi_csis_set_params(struct csi_state *state)
-{
-	u32 val;
-
-	val = mipi_csis_read(state, MIPI_CSIS_CMN_CTRL);
-	val &= ~MIPI_CSIS_CMN_CTRL_LANE_NR_MASK;
-	val |= (state->num_lanes - 1) << MIPI_CSIS_CMN_CTRL_LANE_NR_OFFSET;
-	mipi_csis_write(state, MIPI_CSIS_CMN_CTRL, val);
-
-	__mipi_csis_set_format(state);
-
-	mipi_csis_set_hsync_settle(state, state->hs_settle, state->clk_settle);
-
-	val = mipi_csis_read(state, MIPI_CSIS_ISPCONFIG_CH0);
-	if (state->csis_fmt->data_alignment == 32)
-		val |= MIPI_CSIS_ISPCFG_ALIGN_32BIT;
-	else /* Normal output */
-		val &= ~MIPI_CSIS_ISPCFG_ALIGN_32BIT;
-	mipi_csis_write(state, MIPI_CSIS_ISPCONFIG_CH0, val);
-
-	val = (0 << MIPI_CSIS_ISPSYNC_HSYNC_LINTV_OFFSET) |
-		(0 << MIPI_CSIS_ISPSYNC_VSYNC_SINTV_OFFSET) |
-		(0 << MIPI_CSIS_ISPSYNC_VSYNC_EINTV_OFFSET);
-	mipi_csis_write(state, MIPI_CSIS_ISPSYNC_CH0, val);
-
-	val = mipi_csis_read(state, MIPI_CSIS_CLK_CTRL);
-	val &= ~MIPI_CSIS_CLK_CTRL_WCLK_SRC;
-	if (state->wclk_ext)
-		val |= MIPI_CSIS_CLK_CTRL_WCLK_SRC;
-	val |= MIPI_CSIS_CLK_CTRL_CLKGATE_TRAIL_CH0(15);
-	val &= ~MIPI_CSIS_CLK_CTRL_CLKGATE_EN_MSK;
-	mipi_csis_write(state, MIPI_CSIS_CLK_CTRL, val);
-
-	mipi_csis_write(state, MIPI_CSIS_DPHYBCTRL_L, 0x1f4);
-	mipi_csis_write(state, MIPI_CSIS_DPHYBCTRL_H, 0);
-
-	/* Update the shadow register. */
-	val = mipi_csis_read(state, MIPI_CSIS_CMN_CTRL);
-	mipi_csis_write(state, MIPI_CSIS_CMN_CTRL, val | MIPI_CSIS_CMN_CTRL_UPDATE_SHADOW |
-					MIPI_CSIS_CMN_CTRL_UPDATE_SHADOW_CTRL);
-}
-
-static void mipi_csis_clk_enable(struct csi_state *state)
-{
-	clk_prepare_enable(state->mipi_clk);
-	clk_prepare_enable(state->phy_clk);
-	if (state->disp_axi)
-		clk_prepare_enable(state->disp_axi);
-	if (state->disp_apb)
-		clk_prepare_enable(state->disp_apb);
-}
-
-static void mipi_csis_clk_disable(struct csi_state *state)
-{
-	clk_disable_unprepare(state->mipi_clk);
-	clk_disable_unprepare(state->phy_clk);
-	if (state->disp_axi)
-		clk_disable_unprepare(state->disp_axi);
-	if (state->disp_apb)
-		clk_disable_unprepare(state->disp_apb);
-}
-
-static int mipi_csis_clk_get(struct csi_state *state)
-{
-	struct device *dev = &state->pdev->dev;
-	int ret = true;
-
-	state->mipi_clk = devm_clk_get(dev, "mipi_clk");
-	if (IS_ERR(state->mipi_clk)) {
-		dev_err(dev, "Could not get mipi csi clock\n");
-		return -ENODEV;
-	}
-
-	state->phy_clk = devm_clk_get(dev, "phy_clk");
-	if (IS_ERR(state->phy_clk)) {
-		dev_err(dev, "Could not get mipi phy clock\n");
-		return -ENODEV;
-	}
-
-	state->disp_axi = devm_clk_get(dev, "disp_axi");
-	if (IS_ERR(state->disp_axi)) {
-		dev_warn(dev, "Could not get disp_axi clock\n");
-		state->disp_axi = NULL;
-	}
-
-	state->disp_apb = devm_clk_get(dev, "disp_apb");
-	if (IS_ERR(state->disp_apb)) {
-		dev_warn(dev, "Could not get disp apb clock\n");
-		state->disp_apb = NULL;
-	}
-
-	/* Set clock rate */
-	if (state->clk_frequency)
-		ret = clk_set_rate(state->mipi_clk,
-				   state->clk_frequency);
-	else
-		dev_WARN(dev, "No clock frequency specified!\n");
-	if (ret < 0) {
-		dev_err(dev, "set rate filed, rate=%d\n", state->clk_frequency);
-		return -EINVAL;
-	}
-
-	return ret;
-}
-
-static void dump_regs(struct csi_state *state, const char *label)
-{
-	struct {
-		u32 offset;
-		const char * const name;
-	} registers[] = {
-		{ 0x00, "CTRL" },
-		{ 0x04, "DPHYCTRL" },
-		{ 0x08, "CONFIG" },
-		{ 0x0c, "DPHYSTS" },
-		{ 0x10, "INTMSK" },
-		{ 0x2c, "RESOL" },
-		{ 0x38, "SDW_CONFIG" },
-	};
-	u32 i;
-
-	v4l2_info(&state->mipi_sd, "--- %s ---\n", label);
-
-	for (i = 0; i < ARRAY_SIZE(registers); i++) {
-		u32 cfg = mipi_csis_read(state, registers[i].offset);
-		v4l2_info(&state->mipi_sd, "%10s: 0x%08x\n", registers[i].name, cfg);
-	}
-}
-
-static void mipi_csis_start_stream(struct csi_state *state)
-{
-	mipi_csis_sw_reset(state);
-	mipi_csis_set_params(state);
-	mipi_csis_system_enable(state, true);
-	mipi_csis_enable_interrupts(state, true);
-}
-
-static void mipi_csis_stop_stream(struct csi_state *state)
-{
-	mipi_csis_enable_interrupts(state, false);
-	mipi_csis_system_enable(state, false);
-}
-
-static void mipi_csis_clear_counters(struct csi_state *state)
-{
-	unsigned long flags;
-	int i;
-
-	spin_lock_irqsave(&state->slock, flags);
-	for (i = 0; i < MIPI_CSIS_NUM_EVENTS; i++)
-		state->events[i].counter = 0;
-	spin_unlock_irqrestore(&state->slock, flags);
-}
-
-static void mipi_csis_log_counters(struct csi_state *state, bool non_errors)
-{
-	int i = non_errors ? MIPI_CSIS_NUM_EVENTS : MIPI_CSIS_NUM_EVENTS - 4;
-	unsigned long flags;
-
-	spin_lock_irqsave(&state->slock, flags);
-
-	for (i--; i >= 0; i--) {
-		if (state->events[i].counter > 0 || debug)
-			v4l2_info(&state->mipi_sd, "%s events: %d\n",
-				  state->events[i].name,
-				  state->events[i].counter);
-	}
-	spin_unlock_irqrestore(&state->slock, flags);
-}
-
-/*
- * V4L2 subdev operations
- */
-static int mipi_csis_s_power(struct v4l2_subdev *mipi_sd, int on)
-{
-	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
-	struct device *dev = &state->pdev->dev;
-
-	v4l2_subdev_call(state->sensor_sd, core, s_power, on);
-
-	if (on)
-		return pm_runtime_get_sync(dev);
-
-	return pm_runtime_put_sync(dev);
-}
-
-static int mipi_csis_s_stream(struct v4l2_subdev *mipi_sd, int enable)
-{
-	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
-	int ret = 0;
-
-	v4l2_dbg(1, debug, mipi_sd, "%s: %d, state: 0x%x\n",
-		 __func__, enable, state->flags);
-
-	if (enable) {
-		mipi_csis_clear_counters(state);
-		ret = pm_runtime_get_sync(&state->pdev->dev);
-		if (ret && ret != 1)
-			return ret;
-	}
-
-	mutex_lock(&state->lock);
-	if (enable) {
-		if (state->flags & ST_SUSPENDED) {
-			ret = -EBUSY;
-			goto unlock;
-		}
-		mipi_csis_start_stream(state);
-		v4l2_subdev_call(state->sensor_sd, video, s_stream, true);
-		state->flags |= ST_STREAMING;
-	} else {
-		v4l2_subdev_call(state->sensor_sd, video, s_stream, false);
-		mipi_csis_stop_stream(state);
-		state->flags &= ~ST_STREAMING;
-		if (debug > 0)
-			mipi_csis_log_counters(state, true);
-	}
-unlock:
-	mutex_unlock(&state->lock);
-	if (!enable)
-		pm_runtime_put(&state->pdev->dev);
-
-	return ret == 1 ? 0 : ret;
-}
-
-static int mipi_csis_enum_mbus_code(struct v4l2_subdev *mipi_sd,
-				    struct v4l2_subdev_state *sd_state,
-				    struct v4l2_subdev_mbus_code_enum *code)
-{
-	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
-	struct v4l2_subdev *sensor_sd = state->sensor_sd;
-	struct csis_pix_format const *csis_fmt;
-	int ret;
-
-	ret = v4l2_subdev_call(sensor_sd, pad, enum_mbus_code, NULL, code);
-	if (ret < 0)
-		return -EINVAL;
-
-	csis_fmt = find_csis_format(code->code);
-	if (csis_fmt == NULL) {
-		dev_err(state->dev, "format not match\n");
-		return -EINVAL;
-	}
-
-	return ret;
-}
-
-static int mipi_csis_set_fmt(struct v4l2_subdev *mipi_sd,
-			     struct v4l2_subdev_state *sd_state,
-			     struct v4l2_subdev_format *format)
-{
-	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
-	struct v4l2_subdev *sensor_sd = state->sensor_sd;
-	struct csis_pix_format const *csis_fmt;
-	struct v4l2_mbus_framefmt *mf  = &format->format;
-
-	if (format->pad)
-		return -EINVAL;
-
-	csis_fmt = find_csis_format(mf->code);
-	if (csis_fmt == NULL)
-		csis_fmt = &mipi_csis_formats[0];
-
-	v4l2_subdev_call(sensor_sd, pad, set_fmt, NULL, format);
-
-	mf->code = csis_fmt->code;
-	v4l_bound_align_image(&mf->width, 1, CSIS_MAX_PIX_WIDTH,
-			      csis_fmt->pix_width_alignment,
-			      &mf->height, 1, CSIS_MAX_PIX_HEIGHT, 1,
-			      0);
-
-	if (format->which == V4L2_SUBDEV_FORMAT_TRY)
-		return 0;
-
-	state->format.code = mf->code;
-	state->format.width = mf->width;
-	state->format.height = mf->height;
-
-	mutex_lock(&state->lock);
-	state->csis_fmt = csis_fmt;
-	mutex_unlock(&state->lock);
-
-	return 0;
-}
-
-static int mipi_csis_get_fmt(struct v4l2_subdev *mipi_sd,
-			     struct v4l2_subdev_state *sd_state,
-			     struct v4l2_subdev_format *format)
-{
-	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
-	struct v4l2_subdev *sensor_sd = state->sensor_sd;
-
-	if (format->pad)
-		return -EINVAL;
-
-	return v4l2_subdev_call(sensor_sd, pad, get_fmt, NULL, format);
-}
-
-static int mipi_csis_s_rx_buffer(struct v4l2_subdev *mipi_sd, void *buf,
-			       unsigned int *size)
-{
-	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
-	unsigned long flags;
-
-	*size = min_t(unsigned int, *size, MIPI_CSIS_PKTDATA_SIZE);
-
-	spin_lock_irqsave(&state->slock, flags);
-	state->pkt_buf.data = buf;
-	state->pkt_buf.len = *size;
-	spin_unlock_irqrestore(&state->slock, flags);
-
-	return 0;
-}
-
-static int mipi_csis_s_parm(struct v4l2_subdev *mipi_sd, struct v4l2_streamparm *a)
-{
-	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
-	struct v4l2_subdev *sensor_sd = state->sensor_sd;
-
-	return v4l2_subdev_call(sensor_sd, video, s_parm, a);
-}
-
-static int mipi_csis_g_parm(struct v4l2_subdev *mipi_sd, struct v4l2_streamparm *a)
-{
-	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
-	struct v4l2_subdev *sensor_sd = state->sensor_sd;
-
-	return v4l2_subdev_call(sensor_sd, video, g_parm, a);
-}
-
-static int mipi_csis_enum_framesizes(struct v4l2_subdev *mipi_sd,
-		struct v4l2_subdev_state *sd_state,
-		struct v4l2_subdev_frame_size_enum *fse)
-{
-	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
-	struct v4l2_subdev *sensor_sd = state->sensor_sd;
-
-	return v4l2_subdev_call(sensor_sd, pad, enum_frame_size, NULL, fse);
-}
-
-static int mipi_csis_enum_frameintervals(struct v4l2_subdev *mipi_sd,
-		struct v4l2_subdev_state *sd_state,
-		struct v4l2_subdev_frame_interval_enum *fie)
-{
-	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
-	struct v4l2_subdev *sensor_sd = state->sensor_sd;
-
-	return v4l2_subdev_call(sensor_sd, pad, enum_frame_interval, NULL, fie);
-}
-
-static int mipi_csis_log_status(struct v4l2_subdev *mipi_sd)
-{
-	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
-
-	mutex_lock(&state->lock);
-	mipi_csis_log_counters(state, true);
-	if (debug && (state->flags & ST_POWERED))
-		dump_regs(state, __func__);
-	mutex_unlock(&state->lock);
-	return 0;
-}
-
-static struct v4l2_subdev_core_ops mipi_csis_core_ops = {
-	.s_power = mipi_csis_s_power,
-	.log_status = mipi_csis_log_status,
-};
-
-static struct v4l2_subdev_video_ops mipi_csis_video_ops = {
-	.s_rx_buffer = mipi_csis_s_rx_buffer,
-	.s_stream = mipi_csis_s_stream,
-
-	.s_parm = mipi_csis_s_parm,
-	.g_parm = mipi_csis_g_parm,
-};
-
-static const struct v4l2_subdev_pad_ops mipi_csis_pad_ops = {
-	.enum_frame_size       = mipi_csis_enum_framesizes,
-	.enum_frame_interval   = mipi_csis_enum_frameintervals,
-	.enum_mbus_code        = mipi_csis_enum_mbus_code,
-	.get_fmt               = mipi_csis_get_fmt,
-	.set_fmt               = mipi_csis_set_fmt,
-};
-
-static struct v4l2_subdev_ops mipi_csis_subdev_ops = {
-	.core = &mipi_csis_core_ops,
-	.video = &mipi_csis_video_ops,
-	.pad = &mipi_csis_pad_ops,
-};
-
-static irqreturn_t mipi_csis_irq_handler(int irq, void *dev_id)
-{
-	struct csi_state *state = dev_id;
-	struct csis_pktbuf *pktbuf = &state->pkt_buf;
-	unsigned long flags;
-	u32 status;
-
-	status = mipi_csis_read(state, MIPI_CSIS_INTSRC);
-
-	spin_lock_irqsave(&state->slock, flags);
-
-	if ((status & MIPI_CSIS_INTSRC_NON_IMAGE_DATA) && pktbuf->data) {
-		u32 offset;
-
-		if (status & MIPI_CSIS_INTSRC_EVEN)
-			offset = MIPI_CSIS_PKTDATA_EVEN;
-		else
-			offset = MIPI_CSIS_PKTDATA_ODD;
-
-		memcpy(pktbuf->data, state->regs + offset, pktbuf->len);
-		pktbuf->data = NULL;
-		rmb();
-	}
-
-	/* Update the event/error counters */
-	if ((status & MIPI_CSIS_INTSRC_ERRORS) || debug) {
-		int i;
-		for (i = 0; i < MIPI_CSIS_NUM_EVENTS; i++) {
-			if (!(status & state->events[i].mask))
-				continue;
-			state->events[i].counter++;
-			v4l2_dbg(2, debug, &state->mipi_sd, "%s: %d\n",
-				 state->events[i].name,
-				 state->events[i].counter);
-		}
-		v4l2_dbg(2, debug, &state->mipi_sd, "status: %08x\n", status);
-	}
-	spin_unlock_irqrestore(&state->slock, flags);
-
-	mipi_csis_write(state, MIPI_CSIS_INTSRC, status);
-	return IRQ_HANDLED;
-}
-
-static int subdev_notifier_bound(struct v4l2_async_notifier *notifier,
-			    struct v4l2_subdev *subdev,
-			    struct v4l2_async_subdev *asd)
-{
-	struct csi_state *state = notifier_to_mipi_dev(notifier);
-
-	if (subdev == NULL)
-		return -EINVAL;
-
-	/* Find platform data for this sensor subdev */
-	if (state->fwnode == dev_fwnode(subdev->dev))
-		state->sensor_sd = subdev;
-
-	v4l2_info(&state->v4l2_dev, "Registered sensor subdevice: %s\n",
-		  subdev->name);
-
-	return 0;
-}
-
-static int mipi_csis_parse_dt(struct platform_device *pdev,
-			    struct csi_state *state)
-{
-	struct device_node *node = pdev->dev.of_node;
-
-	if (of_property_read_u32(node, "clock-frequency",
-				 &state->clk_frequency))
-		state->clk_frequency = DEFAULT_SCLK_CSIS_FREQ;
-	if (of_property_read_u32(node, "bus-width",
-				 &state->max_num_lanes))
-		return -EINVAL;
-
-	/*
-	 * Explicitly get endpoint 1 being the sensor one as using overlays may
-	 * reverse node order in the final device tree blob.
-	 */
-	node = of_graph_get_endpoint_by_regs(node, 0, 1);
-	if (!node) {
-		dev_err(&pdev->dev, "No port/endpoint 1 sensor node at %s\n",
-				pdev->dev.of_node->full_name);
-		return -EINVAL;
-	}
-
-	/* Get MIPI CSI-2 bus configration from the endpoint node. */
-	of_property_read_u32(node, "csis-hs-settle",
-					&state->hs_settle);
-
-	of_property_read_u32(node, "csis-clk-settle",
-					&state->clk_settle);
-	state->wclk_ext = of_property_read_bool(node,
-					"csis-wclk");
-
-	of_property_read_u32(node, "data-lanes",
-					&state->num_lanes);
-	of_node_put(node);
-
-	return 0;
-}
-
-static int mipi_csis_pm_resume(struct device *dev, bool runtime);
-static const struct of_device_id mipi_csis_of_match[];
-
-static const struct v4l2_async_notifier_operations mxc_mipi_csi_subdev_ops = {
-	.bound = subdev_notifier_bound,
-};
-
-/* register parent dev */
-static int mipi_csis_subdev_host(struct csi_state *state)
-{
-	struct device_node *parent = state->dev->of_node;
-	struct device_node *node, *rem;
-	struct v4l2_async_subdev *asd;
-	int ret;
-
-	v4l2_async_notifier_init(&state->subdev_notifier);
-
-	/*
-	 * Explicitly get endpoint 1 being the sensor one as using overlays may
-	 * reverse node order in the final device tree blob.
-	 */
-	node = of_graph_get_endpoint_by_regs(parent, 0, 1);
-	if (node == NULL) {
-		v4l2_info(&state->v4l2_dev,
-					"Port at %s not found\n",
-					parent->full_name);
-		return -1;
-	}
-
-	rem = of_graph_get_remote_port_parent(node);
-	of_node_put(node);
-	if (rem == NULL) {
-		v4l2_info(&state->v4l2_dev,
-					"Remote device at %s not found\n",
-					node->full_name);
-		return -1;
-	}
-
-	state->fwnode = of_fwnode_handle(rem);
-	asd = v4l2_async_notifier_add_fwnode_subdev(
-					&state->subdev_notifier,
-					state->fwnode,
-					struct v4l2_async_subdev);
-	if (IS_ERR(asd)) {
-		of_node_put(rem);
-		dev_err(state->dev, "failed to add subdev to a notifier\n");
-		return PTR_ERR(asd);
-	}
-
-	of_node_put(rem);
-
-	state->subdev_notifier.v4l2_dev = &state->v4l2_dev;
-	state->subdev_notifier.ops = &mxc_mipi_csi_subdev_ops;
-
-	ret = v4l2_async_notifier_register(&state->v4l2_dev,
-					&state->subdev_notifier);
-	if (ret)
-		dev_err(state->dev,
-					"Error register async notifier regoster\n");
-
-	return ret;
-}
-
-/* init subdev */
-static int mipi_csis_subdev_init(struct v4l2_subdev *mipi_sd,
-		struct platform_device *pdev,
-		const struct v4l2_subdev_ops *ops)
-{
-	struct csi_state *state = platform_get_drvdata(pdev);
-	int ret = 0;
-
-	v4l2_subdev_init(mipi_sd, ops);
-	mipi_sd->owner = THIS_MODULE;
-	snprintf(mipi_sd->name, sizeof(mipi_sd->name), "%s.%d",
-		 CSIS_SUBDEV_NAME, state->index);
-	mipi_sd->flags |= V4L2_SUBDEV_FL_HAS_DEVNODE;
-	mipi_sd->dev = &pdev->dev;
-
-	state->csis_fmt = &mipi_csis_formats[0];
-	state->format.code = mipi_csis_formats[0].code;
-	state->format.width = MIPI_CSIS_DEF_PIX_WIDTH;
-	state->format.height = MIPI_CSIS_DEF_PIX_HEIGHT;
-
-	/* This allows to retrieve the platform device id by the host driver */
-	v4l2_set_subdevdata(mipi_sd, pdev);
-
-	ret = v4l2_async_register_subdev(mipi_sd);
-	if (ret < 0)
-		dev_err(&pdev->dev, "%s--Async register faialed, ret=%d\n", __func__, ret);
-
-	return ret;
-}
-
-static int mipi_csis_probe(struct platform_device *pdev)
-{
-	struct device *dev = &pdev->dev;
-	struct v4l2_subdev *mipi_sd;
-	struct resource *mem_res;
-	struct csi_state *state;
-	const struct of_device_id *of_id;
-	mipi_csis_phy_reset_t phy_reset_fn;
-	int ret = -ENOMEM;
-
-	state = devm_kzalloc(dev, sizeof(*state), GFP_KERNEL);
-	if (!state)
-		return -ENOMEM;
-
-	mutex_init(&state->lock);
-	spin_lock_init(&state->slock);
-
-	state->pdev = pdev;
-	mipi_sd = &state->mipi_sd;
-	state->dev = dev;
-
-	ret = mipi_csis_parse_dt(pdev, state);
-	if (ret < 0)
-		return ret;
-
-	if (state->num_lanes == 0 || state->num_lanes > state->max_num_lanes) {
-		dev_err(dev, "Unsupported number of data lanes: %d (max. %d)\n",
-			state->num_lanes, state->max_num_lanes);
-		return -EINVAL;
-	}
-
-	mipi_csis_phy_init(state);
-	of_id = of_match_node(mipi_csis_of_match, dev->of_node);
-	if (!of_id || !of_id->data)
-		return -EINVAL;
-
-	phy_reset_fn = of_id->data;
-
-	mem_res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	state->regs = devm_ioremap_resource(dev, mem_res);
-	if (IS_ERR(state->regs))
-		return PTR_ERR(state->regs);
-
-	state->irq = platform_get_irq(pdev, 0);
-	if (state->irq < 0) {
-		dev_err(dev, "Failed to get irq\n");
-		return state->irq;
-	}
-
-	ret = mipi_csis_clk_get(state);
-	if (ret < 0)
-		return ret;
-
-	mipi_csis_clk_enable(state);
-
-	phy_reset_fn(state);
-
-	ret = devm_request_irq(dev, state->irq, mipi_csis_irq_handler,
-			       0, dev_name(dev), state);
-	if (ret) {
-		dev_err(dev, "Interrupt request failed\n");
-		goto e_clkdis;
-	}
-
-	/* First register a v4l2 device */
-	ret = v4l2_device_register(dev, &state->v4l2_dev);
-	if (ret) {
-		v4l2_err(dev->driver,
-			"Unable to register v4l2 device.\n");
-		goto e_clkdis;
-	}
-	v4l2_info(&state->v4l2_dev, "mipi csi v4l2 device registered\n");
-
-	/* .. and a pointer to the subdev. */
-	platform_set_drvdata(pdev, state);
-
-	ret = mipi_csis_subdev_init(&state->mipi_sd, pdev, &mipi_csis_subdev_ops);
-	if (ret < 0)
-		goto e_sd_mipi;
-
-	memcpy(state->events, mipi_csis_events, sizeof(state->events));
-
-	/* subdev host register */
-	ret = mipi_csis_subdev_host(state);
-	if (ret < 0)
-		goto e_sd_host;
-
-	pm_runtime_enable(dev);
-	if (!pm_runtime_enabled(dev)) {
-		ret = mipi_csis_pm_resume(dev, true);
-		if (ret < 0)
-			goto e_sd_host;
-	}
-
-	mipi_csis_clk_disable(state);
-	dev_info(&pdev->dev,
-			"lanes: %d, hs_settle: %d, clk_settle: %d, wclk: %d, freq: %u\n",
-		 state->num_lanes, state->hs_settle, state->clk_settle,
-		 state->wclk_ext, state->clk_frequency);
-	return 0;
-
-e_sd_host:
-	v4l2_async_notifier_unregister(&state->subdev_notifier);
-	v4l2_device_unregister(&state->v4l2_dev);
-e_sd_mipi:
-	v4l2_async_unregister_subdev(&state->mipi_sd);
-e_clkdis:
-	mipi_csis_clk_disable(state);
-	return ret;
-}
-
-static int mipi_csis_pm_suspend(struct device *dev, bool runtime)
-{
-	struct platform_device *pdev = to_platform_device(dev);
-	struct csi_state *state = platform_get_drvdata(pdev);
-	struct v4l2_subdev *mipi_sd = &state->mipi_sd;
-	int ret = 0;
-
-	v4l2_dbg(1, debug, mipi_sd, "%s: flags: 0x%x\n",
-		 __func__, state->flags);
-
-	mutex_lock(&state->lock);
-	if (state->flags & ST_POWERED) {
-		mipi_csis_stop_stream(state);
-		ret = regulator_disable(state->mipi_phy_regulator);
-		if (ret)
-			goto unlock;
-		mipi_csis_clk_disable(state);
-		state->flags &= ~ST_POWERED;
-		if (!runtime)
-			state->flags |= ST_SUSPENDED;
-	}
- unlock:
-	mutex_unlock(&state->lock);
-	return ret ? -EAGAIN : 0;
-}
-
-static int mipi_csis_pm_resume(struct device *dev, bool runtime)
-{
-	struct platform_device *pdev = to_platform_device(dev);
-	struct csi_state *state = platform_get_drvdata(pdev);
-	struct v4l2_subdev *mipi_sd = &state->mipi_sd;
-	int ret = 0;
-
-	v4l2_dbg(1, debug, mipi_sd, "%s: flags: 0x%x\n",
-		 __func__, state->flags);
-
-	mutex_lock(&state->lock);
-	if (!runtime && !(state->flags & ST_SUSPENDED))
-		goto unlock;
-
-	if (!(state->flags & ST_POWERED)) {
-		ret = regulator_enable(state->mipi_phy_regulator);
-		if (!ret) {
-			state->flags |= ST_POWERED;
-		} else {
-			goto unlock;
-		}
-		mipi_csis_clk_enable(state);
-	}
-	if (state->flags & ST_STREAMING)
-		mipi_csis_start_stream(state);
-
-	state->flags &= ~ST_SUSPENDED;
- unlock:
-	mutex_unlock(&state->lock);
-	return ret ? -EAGAIN : 0;
-}
-
-#ifdef CONFIG_PM_SLEEP
-static int mipi_csis_suspend(struct device *dev)
-{
-	struct platform_device *pdev = to_platform_device(dev);
-	struct csi_state *state = platform_get_drvdata(pdev);
-
-	if (state->flags & ST_STREAMING) {
-		dev_warn(dev, "running, prevent entering suspend.\n");
-		return -EAGAIN;
-	}
-
-	return mipi_csis_pm_suspend(dev, false);
-}
-
-static int mipi_csis_resume(struct device *dev)
-{
-	return mipi_csis_pm_resume(dev, false);
-}
-#endif
-
-static int mipi_csis_runtime_suspend(struct device *dev)
-{
-	return mipi_csis_pm_suspend(dev, true);
-}
-
-static int mipi_csis_runtime_resume(struct device *dev)
-{
-	return mipi_csis_pm_resume(dev, true);
-}
-
-static int mipi_csis_remove(struct platform_device *pdev)
-{
-	struct csi_state *state = platform_get_drvdata(pdev);
-
-	v4l2_async_unregister_subdev(&state->mipi_sd);
-	v4l2_async_notifier_cleanup(&state->subdev_notifier);
-	v4l2_async_notifier_unregister(&state->subdev_notifier);
-	v4l2_device_unregister(&state->v4l2_dev);
-
-	pm_runtime_disable(&pdev->dev);
-	mipi_csis_pm_suspend(&pdev->dev, true);
-    mipi_csis_clk_disable(state);
-	pm_runtime_set_suspended(&pdev->dev);
-
-	return 0;
-}
-
-static const struct dev_pm_ops mipi_csis_pm_ops = {
-	SET_RUNTIME_PM_OPS(mipi_csis_runtime_suspend, mipi_csis_runtime_resume,
-			   NULL)
-	SET_SYSTEM_SLEEP_PM_OPS(mipi_csis_suspend, mipi_csis_resume)
-};
-
-static const struct of_device_id mipi_csis_of_match[] = {
-	{	.compatible = "fsl,imx7d-mipi-csi",
-		.data = (void *)&mipi_csis_phy_reset,
-	},
-	{	.compatible = "fsl,imx8mm-mipi-csi",
-		.data = (void *)&mipi_csis_phy_reset_mx8mm,
-	},
-	{ /* sentinel */ },
-};
-MODULE_DEVICE_TABLE(of, mipi_csis_of_match);
-
-static struct platform_driver mipi_csis_driver = {
-	.probe		= mipi_csis_probe,
-	.remove		= mipi_csis_remove,
-	.driver		= {
-		.of_match_table = mipi_csis_of_match,
-		.name		= CSIS_DRIVER_NAME,
-		.owner		= THIS_MODULE,
-		.pm		= &mipi_csis_pm_ops,
-	},
-};
-
-module_platform_driver(mipi_csis_driver);
-
-MODULE_DESCRIPTION("Freescale MIPI-CSI2 receiver driver");
-MODULE_LICENSE("GPL");
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * Freescale i.MX7 SoC series MIPI-CSI V3.3 receiver driver
+ *
+ * Copyright (C) 2015-2016 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2019 NXP
+ */
+/*
+ * Samsung S5P/EXYNOS SoC series MIPI-CSI receiver driver
+ *
+ * Copyright (C) 2011 - 2013 Samsung Electronics Co., Ltd.
+ * Author: Sylwester Nawrocki <s.nawrocki@samsung.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/errno.h>
+#include <linux/interrupt.h>
+#include <linux/io.h>
+#include <linux/irq.h>
+#include <linux/kernel.h>
+#include <linux/mfd/syscon.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_graph.h>
+#include <linux/platform_device.h>
+#include <linux/pm_runtime.h>
+#include <linux/regmap.h>
+#include <linux/regulator/consumer.h>
+#include <linux/reset.h>
+#include <linux/slab.h>
+#include <linux/spinlock.h>
+#include <linux/videodev2.h>
+#include <media/v4l2-subdev.h>
+#include <media/v4l2-device.h>
+#include <media/v4l2-ctrls.h>
+
+static int debug;
+module_param(debug, int, 0644);
+MODULE_PARM_DESC(debug, "Debug level (0-2)");
+
+#define CSIS_DRIVER_NAME	"mxc_mipi-csi"
+#define CSIS_SUBDEV_NAME	CSIS_DRIVER_NAME
+#define CSIS_MAX_ENTITIES	2
+#define CSIS0_MAX_LANES		4
+#define CSIS1_MAX_LANES		2
+
+#define MIPI_CSIS_DEF_PIX_WIDTH	640
+#define MIPI_CSIS_DEF_PIX_HEIGHT	480
+
+/* Register map definition */
+
+/* CSIS version */
+#define MIPI_CSIS_VERSION		0x00
+
+/* CSIS common control */
+#define MIPI_CSIS_CMN_CTRL			0x04
+#define MIPI_CSIS_CMN_CTRL_UPDATE_SHADOW	(1 << 16)
+#define MIPI_CSIS_CMN_CTRL_INTER_MODE		(1 << 10)
+#define MIPI_CSIS_CMN_CTRL_LANE_NR_OFFSET	8
+#define MIPI_CSIS_CMN_CTRL_LANE_NR_MASK		(3 << 8)
+#define MIPI_CSIS_CMN_CTRL_UPDATE_SHADOW_CTRL	(1 << 2)
+#define MIPI_CSIS_CMN_CTRL_RESET		(1 << 1)
+#define MIPI_CSIS_CMN_CTRL_ENABLE		(1 << 0)
+
+/* CSIS clock control */
+#define MIPI_CSIS_CLK_CTRL		0x08
+#define MIPI_CSIS_CLK_CTRL_CLKGATE_TRAIL_CH3(x)	(x << 28)
+#define MIPI_CSIS_CLK_CTRL_CLKGATE_TRAIL_CH2(x)	(x << 24)
+#define MIPI_CSIS_CLK_CTRL_CLKGATE_TRAIL_CH1(x)	(x << 20)
+#define MIPI_CSIS_CLK_CTRL_CLKGATE_TRAIL_CH0(x)	(x << 16)
+#define MIPI_CSIS_CLK_CTRL_CLKGATE_EN_MSK	(0xf << 4)
+#define MIPI_CSIS_CLK_CTRL_WCLK_SRC		(1 << 0)
+
+/* CSIS Interrupt mask */
+#define MIPI_CSIS_INTMSK			0x10
+#define MIPI_CSIS_INTMSK_EVEN_BEFORE	(1 << 31)
+#define MIPI_CSIS_INTMSK_EVEN_AFTER	(1 << 30)
+#define MIPI_CSIS_INTMSK_ODD_BEFORE	(1 << 29)
+#define MIPI_CSIS_INTMSK_ODD_AFTER	(1 << 28)
+#define MIPI_CSIS_INTMSK_FRAME_START	(1 << 24)
+#define MIPI_CSIS_INTMSK_FRAME_END	(1 << 20)
+#define MIPI_CSIS_INTMSK_ERR_SOT_HS	(1 << 16)
+#define MIPI_CSIS_INTMSK_ERR_LOST_FS	(1 << 12)
+#define MIPI_CSIS_INTMSK_ERR_LOST_FE	(1 << 8)
+#define MIPI_CSIS_INTMSK_ERR_OVER		(1 << 4)
+#define MIPI_CSIS_INTMSK_ERR_WRONG_CFG	(1 << 3)
+#define MIPI_CSIS_INTMSK_ERR_ECC		(1 << 2)
+#define MIPI_CSIS_INTMSK_ERR_CRC		(1 << 1)
+#define MIPI_CSIS_INTMSK_ERR_UNKNOWN	(1 << 0)
+
+/* CSIS Interrupt source */
+#define MIPI_CSIS_INTSRC			0x14
+#define MIPI_CSIS_INTSRC_EVEN_BEFORE	(1 << 31)
+#define MIPI_CSIS_INTSRC_EVEN_AFTER	(1 << 30)
+#define MIPI_CSIS_INTSRC_EVEN		(0x3 << 30)
+#define MIPI_CSIS_INTSRC_ODD_BEFORE	(1 << 29)
+#define MIPI_CSIS_INTSRC_ODD_AFTER	(1 << 28)
+#define MIPI_CSIS_INTSRC_ODD			(0x3 << 28)
+#define MIPI_CSIS_INTSRC_NON_IMAGE_DATA	(0xf << 28)
+#define MIPI_CSIS_INTSRC_FRAME_START	(1 << 24)
+#define MIPI_CSIS_INTSRC_FRAME_END	(1 << 20)
+#define MIPI_CSIS_INTSRC_ERR_SOT_HS	(1 << 16)
+#define MIPI_CSIS_INTSRC_ERR_LOST_FS	(1 << 12)
+#define MIPI_CSIS_INTSRC_ERR_LOST_FE	(1 << 8)
+#define MIPI_CSIS_INTSRC_ERR_OVER		(1 << 4)
+#define MIPI_CSIS_INTSRC_ERR_WRONG_CFG	(1 << 3)
+#define MIPI_CSIS_INTSRC_ERR_ECC		(1 << 2)
+#define MIPI_CSIS_INTSRC_ERR_CRC		(1 << 1)
+#define MIPI_CSIS_INTSRC_ERR_UNKNOWN	(1 << 0)
+#define MIPI_CSIS_INTSRC_ERRORS		0xfffff
+
+/* D-PHY status control */
+#define MIPI_CSIS_DPHYSTATUS		0x20
+#define MIPI_CSIS_DPHYSTATUS_ULPS_DAT			(1 << 8)
+#define MIPI_CSIS_DPHYSTATUS_STOPSTATE_DAT		(1 << 4)
+#define MIPI_CSIS_DPHYSTATUS_ULPS_CLK			(1 << 1)
+#define MIPI_CSIS_DPHYSTATUS_STOPSTATE_CLK		(1 << 0)
+
+/* D-PHY common control */
+#define MIPI_CSIS_DPHYCTRL		0x24
+#define MIPI_CSIS_DPHYCTRL_HSS_MASK			(0xff << 24)
+#define MIPI_CSIS_DPHYCTRL_HSS_OFFSET		24
+#define MIPI_CSIS_DPHYCTRL_SCLKS_MASK		(0x3 << 22)
+#define MIPI_CSIS_DPHYCTRL_SCLKS_OFFSET		22
+#define MIPI_CSIS_DPHYCTRL_DPDN_SWAP_CLK	(1 << 6)
+#define MIPI_CSIS_DPHYCTRL_DPDN_SWAP_DAT	(1 << 5)
+#define MIPI_CSIS_DPHYCTRL_ENABLE_DAT		(1 << 1)
+#define MIPI_CSIS_DPHYCTRL_ENABLE_CLK		(1 << 0)
+#define MIPI_CSIS_DPHYCTRL_ENABLE			(0x1f << 0)
+
+/* D-PHY Master and Slave Control register Low */
+#define MIPI_CSIS_DPHYBCTRL_L		0x30
+/* D-PHY Master and Slave Control register High */
+#define MIPI_CSIS_DPHYBCTRL_H		0x34
+/* D-PHY Slave Control register Low */
+#define MIPI_CSIS_DPHYSCTRL_L		0x38
+/* D-PHY Slave Control register High */
+#define MIPI_CSIS_DPHYSCTRL_H		0x3c
+
+
+/* ISP Configuration register */
+#define MIPI_CSIS_ISPCONFIG_CH0			0x40
+#define MIPI_CSIS_ISPCONFIG_CH1			0x50
+#define MIPI_CSIS_ISPCONFIG_CH2			0x60
+#define MIPI_CSIS_ISPCONFIG_CH3			0x70
+
+#define MIPI_CSIS_ISPCFG_MEM_FULL_GAP_MSK    (0xff << 24)
+#define MIPI_CSIS_ISPCFG_MEM_FULL_GAP(x)     (x << 24)
+#define MIPI_CSIS_ISPCFG_DOUBLE_CMPNT        (1 << 12)
+#define MIPI_CSIS_ISPCFG_ALIGN_32BIT         (1 << 11)
+#define MIPI_CSIS_ISPCFG_FMT_YCBCR422_8BIT   (0x1e << 2)
+#define MIPI_CSIS_ISPCFG_FMT_RAW8		(0x2a << 2)
+#define MIPI_CSIS_ISPCFG_FMT_RAW10		(0x2b << 2)
+#define MIPI_CSIS_ISPCFG_FMT_RAW12		(0x2c << 2)
+#define MIPI_CSIS_ISPCFG_FMT_RAW14		(0x2d << 2)
+/* User defined formats, x = 1...4 */
+#define MIPI_CSIS_ISPCFG_FMT_USER(x)	((0x30 + x - 1) << 2)
+#define MIPI_CSIS_ISPCFG_FMT_MASK		(0x3f << 2)
+
+/* ISP Image Resolution register */
+#define MIPI_CSIS_ISPRESOL_CH0			0x44
+#define MIPI_CSIS_ISPRESOL_CH1			0x54
+#define MIPI_CSIS_ISPRESOL_CH2			0x64
+#define MIPI_CSIS_ISPRESOL_CH3			0x74
+#define CSIS_MAX_PIX_WIDTH		0xffff
+#define CSIS_MAX_PIX_HEIGHT		0xffff
+
+/* ISP SYNC register */
+#define MIPI_CSIS_ISPSYNC_CH0			0x48
+#define MIPI_CSIS_ISPSYNC_CH1			0x58
+#define MIPI_CSIS_ISPSYNC_CH2			0x68
+#define MIPI_CSIS_ISPSYNC_CH3			0x78
+
+#define MIPI_CSIS_ISPSYNC_HSYNC_LINTV_OFFSET	18
+#define MIPI_CSIS_ISPSYNC_VSYNC_SINTV_OFFSET 	12
+#define MIPI_CSIS_ISPSYNC_VSYNC_EINTV_OFFSET	0
+
+/* Non-image packet data buffers */
+#define MIPI_CSIS_PKTDATA_ODD		0x2000
+#define MIPI_CSIS_PKTDATA_EVEN		0x3000
+#define MIPI_CSIS_PKTDATA_SIZE		SZ_4K
+
+#define DEFAULT_SCLK_CSIS_FREQ	166000000UL
+
+enum {
+	ST_POWERED	= 1,
+	ST_STREAMING	= 2,
+	ST_SUSPENDED	= 4,
+};
+
+struct mipi_csis_event {
+	u32 mask;
+	const char * const name;
+	unsigned int counter;
+};
+
+static const struct mipi_csis_event mipi_csis_events[] = {
+	/* Errors */
+	{ MIPI_CSIS_INTSRC_ERR_SOT_HS,	"SOT Error" },
+	{ MIPI_CSIS_INTSRC_ERR_LOST_FS,	"Lost Frame Start Error" },
+	{ MIPI_CSIS_INTSRC_ERR_LOST_FE,	"Lost Frame End Error" },
+	{ MIPI_CSIS_INTSRC_ERR_OVER,	"FIFO Overflow Error" },
+	{ MIPI_CSIS_INTSRC_ERR_ECC,	"ECC Error" },
+	{ MIPI_CSIS_INTSRC_ERR_CRC,	"CRC Error" },
+	{ MIPI_CSIS_INTSRC_ERR_UNKNOWN,	"Unknown Error" },
+	/* Non-image data receive events */
+	{ MIPI_CSIS_INTSRC_EVEN_BEFORE,	"Non-image data before even frame" },
+	{ MIPI_CSIS_INTSRC_EVEN_AFTER,	"Non-image data after even frame" },
+	{ MIPI_CSIS_INTSRC_ODD_BEFORE,	"Non-image data before odd frame" },
+	{ MIPI_CSIS_INTSRC_ODD_AFTER,	"Non-image data after odd frame" },
+	/* Frame start/end */
+	{ MIPI_CSIS_INTSRC_FRAME_START,	"Frame Start" },
+	{ MIPI_CSIS_INTSRC_FRAME_END,	"Frame End" },
+};
+#define MIPI_CSIS_NUM_EVENTS ARRAY_SIZE(mipi_csis_events)
+
+struct csis_pktbuf {
+	u32 *data;
+	unsigned int len;
+};
+
+struct csis_hw_reset {
+	struct regmap *src;
+	u8 req_src;
+	u8 rst_bit;
+};
+
+/**
+ * struct csi_state - the driver's internal state data structure
+ * @lock: mutex serializing the subdev and power management operations,
+ *        protecting @format and @flags members
+ * @sd: v4l2_subdev associated with CSIS device instance
+ * @index: the hardware instance index
+ * @pdev: CSIS platform device
+ * @phy: pointer to the CSIS generic PHY
+ * @regs: mmaped I/O registers memory
+ * @supplies: CSIS regulator supplies
+ * @clock: CSIS clocks
+ * @irq: requested s5p-mipi-csis irq number
+ * @flags: the state variable for power and streaming control
+ * @clock_frequency: device bus clock frequency
+ * @hs_settle: HS-RX settle time
+ * @clk_settle: Clk settle time
+ * @num_lanes: number of MIPI-CSI data lanes used
+ * @max_num_lanes: maximum number of MIPI-CSI data lanes supported
+ * @wclk_ext: CSI wrapper clock: 0 - bus clock, 1 - external SCLK_CAM
+ * @csis_fmt: current CSIS pixel format
+ * @format: common media bus format for the source and sink pad
+ * @slock: spinlock protecting structure members below
+ * @pkt_buf: the frame embedded (non-image) data buffer
+ * @events: MIPI-CSIS event (error) counters
+ */
+struct csi_state {
+	struct mutex lock;
+	struct device		*dev;
+	struct v4l2_subdev mipi_sd;
+	struct v4l2_subdev *sensor_sd;
+	struct v4l2_device	v4l2_dev;
+
+	u8 index;
+	struct platform_device *pdev;
+	struct phy *phy;
+	void __iomem *regs;
+	struct clk *mipi_clk;
+	struct clk *phy_clk;
+	struct clk *disp_axi;
+	struct clk *disp_apb;
+	int irq;
+	u32 flags;
+
+	u32 clk_frequency;
+	u32 hs_settle;
+	u32 clk_settle;
+	u32 num_lanes;
+	u32 max_num_lanes;
+	u8 wclk_ext;
+
+	const struct csis_pix_format *csis_fmt;
+	struct v4l2_mbus_framefmt format;
+
+	spinlock_t slock;
+	struct csis_pktbuf pkt_buf;
+	struct mipi_csis_event events[MIPI_CSIS_NUM_EVENTS];
+
+	struct fwnode_handle *fwnode;
+	struct v4l2_async_notifier  subdev_notifier;
+
+	struct csis_hw_reset hw_reset;
+	struct regulator     *mipi_phy_regulator;
+};
+
+/**
+ * struct csis_pix_format - CSIS pixel format description
+ * @pix_width_alignment: horizontal pixel alignment, width will be
+ *                       multiple of 2^pix_width_alignment
+ * @code: corresponding media bus code
+ * @fmt_reg: MIPI_CSIS_CONFIG register value
+ * @data_alignment: MIPI-CSI data alignment in bits
+ */
+struct csis_pix_format {
+	unsigned int pix_width_alignment;
+	u32 code;
+	u32 fmt_reg;
+	u8 data_alignment;
+};
+
+static const struct csis_pix_format mipi_csis_formats[] = {
+	{
+		.code = MEDIA_BUS_FMT_YUYV8_2X8,
+		.fmt_reg = MIPI_CSIS_ISPCFG_FMT_YCBCR422_8BIT,
+		.data_alignment = 16,
+	}, {
+		.code = MEDIA_BUS_FMT_VYUY8_2X8,
+		.fmt_reg = MIPI_CSIS_ISPCFG_FMT_YCBCR422_8BIT,
+		.data_alignment = 16,
+	}, {
+		.code = MEDIA_BUS_FMT_SBGGR8_1X8,
+		.fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW8,
+		.data_alignment = 8,
+	},  {	
+		.code = MEDIA_BUS_FMT_Y8_1X8,
+        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW8,
+        .data_alignment = 8,
+	},  {
+        .code = MEDIA_BUS_FMT_SRGGB8_1X8,
+        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW8,
+        .data_alignment = 8,
+    },  {
+        .code = MEDIA_BUS_FMT_SGBRG8_1X8,
+        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW8,
+        .data_alignment = 8,
+    },  {
+        .code = MEDIA_BUS_FMT_Y10_1X10,
+        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW10,
+        .data_alignment = 16,
+    },  {
+        .code = MEDIA_BUS_FMT_SRGGB10_1X10,
+        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW10,
+        .data_alignment = 16,
+    },  {
+        .code = MEDIA_BUS_FMT_SGBRG10_1X10,
+        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW10,
+        .data_alignment = 16,
+    },  {
+        .code = MEDIA_BUS_FMT_Y12_1X12,
+        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW12,
+        .data_alignment = 16,
+    },  {
+        .code = MEDIA_BUS_FMT_SRGGB12_1X12,
+        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW12,
+        .data_alignment = 16,
+    },  {
+        .code = MEDIA_BUS_FMT_SGBRG12_1X12,
+        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW12,
+        .data_alignment = 16,
+    },  {
+        .code = MEDIA_BUS_FMT_Y14_1X14,
+        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW14,
+        .data_alignment = 16,
+	},  {
+        .code = MEDIA_BUS_FMT_SRGGB14_1X14,
+        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW14,
+        .data_alignment = 16,
+	},  {
+        .code = MEDIA_BUS_FMT_SGBRG14_1X14,
+        .fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW14,
+        .data_alignment = 16,
+	}
+};
+
+typedef int (*mipi_csis_phy_reset_t)(struct csi_state *state);
+
+#define mipi_csis_write(__csis, __r, __v) writel(__v, __csis->regs + __r)
+#define mipi_csis_read(__csis, __r) readl(__csis->regs + __r)
+
+static struct csi_state *mipi_sd_to_csi_state(struct v4l2_subdev *sdev)
+{
+	return container_of(sdev, struct csi_state, mipi_sd);
+}
+
+static inline struct csi_state
+				*notifier_to_mipi_dev(struct v4l2_async_notifier *n)
+{
+	return container_of(n, struct csi_state, subdev_notifier);
+}
+
+static const struct csis_pix_format *find_csis_format(u32 code)
+{
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(mipi_csis_formats); i++)
+		if (code == mipi_csis_formats[i].code)
+			return &mipi_csis_formats[i];
+	return NULL;
+}
+
+static void mipi_csis_enable_interrupts(struct csi_state *state, bool on)
+{
+	u32 val = mipi_csis_read(state, MIPI_CSIS_INTMSK);
+	if (on)
+		val |= 0xf00fffff;
+	else
+		val &= ~0xf00fffff;
+	mipi_csis_write(state, MIPI_CSIS_INTMSK, val);
+}
+
+static void mipi_csis_sw_reset(struct csi_state *state)
+{
+	u32 val = mipi_csis_read(state, MIPI_CSIS_CMN_CTRL);
+
+	mipi_csis_write(state, MIPI_CSIS_CMN_CTRL, val | MIPI_CSIS_CMN_CTRL_RESET);
+	udelay(10);
+}
+
+static int mipi_csis_phy_init(struct csi_state *state)
+{
+	int ret;
+
+	state->mipi_phy_regulator = devm_regulator_get(state->dev,
+				"mipi-phy");
+
+	ret = regulator_set_voltage(state->mipi_phy_regulator,
+			1000000, 1000000);
+
+	return ret;
+}
+
+static int mipi_csis_phy_reset_mx8mm(struct csi_state *state)
+{
+	struct reset_control *phy_reset;
+
+	phy_reset = devm_reset_control_get_exclusive(state->dev, "csi,mipi_rst");
+	if (IS_ERR(phy_reset))
+		return PTR_ERR(phy_reset);
+
+	reset_control_assert(phy_reset);
+	usleep_range(10, 20);
+	reset_control_deassert(phy_reset);
+	usleep_range(10, 20);
+
+	return 0;
+
+}
+
+static int mipi_csis_phy_reset(struct csi_state *state)
+{
+	struct device_node *np = state->dev->of_node;
+	struct device_node *node;
+	phandle phandle;
+	u32 out_val[3];
+	int ret;
+
+	ret = of_property_read_u32_array(np, "csis-phy-reset", out_val, 3);
+	if (ret) {
+		dev_dbg(state->dev, "no csis-hw-reset property found\n");
+	} else {
+		phandle = *out_val;
+
+		node = of_find_node_by_phandle(phandle);
+		if (!node) {
+			dev_dbg(state->dev, "not find src node by phandle\n");
+			ret = PTR_ERR(node);
+		}
+		state->hw_reset.src = syscon_node_to_regmap(node);
+		if (IS_ERR(state->hw_reset.src)) {
+			dev_err(state->dev, "failed to get src regmap\n");
+			ret = PTR_ERR(state->hw_reset.src);
+		}
+		of_node_put(node);
+		if (ret < 0)
+			return ret;
+
+		state->hw_reset.req_src = out_val[1];
+		state->hw_reset.rst_bit = out_val[2];
+
+		/* reset mipi phy */
+		regmap_update_bits(state->hw_reset.src, state->hw_reset.req_src,
+			1 << state->hw_reset.rst_bit, 1 << state->hw_reset.rst_bit);
+		msleep(20);
+		regmap_update_bits(state->hw_reset.src, state->hw_reset.req_src,
+			1 << state->hw_reset.rst_bit, 0);
+
+	}
+	return ret;
+}
+
+static void mipi_csis_system_enable(struct csi_state *state, int on)
+{
+	u32 val, mask;
+
+	val = mipi_csis_read(state, MIPI_CSIS_CMN_CTRL);
+	if (on)
+		val |= MIPI_CSIS_CMN_CTRL_ENABLE;
+	else
+		val &= ~MIPI_CSIS_CMN_CTRL_ENABLE;
+	mipi_csis_write(state, MIPI_CSIS_CMN_CTRL, val);
+
+	val = mipi_csis_read(state, MIPI_CSIS_DPHYCTRL);
+	val &= ~MIPI_CSIS_DPHYCTRL_ENABLE;
+	if (on) {
+		mask = (1 << (state->num_lanes + 1)) - 1;
+		val |= (mask & MIPI_CSIS_DPHYCTRL_ENABLE);
+	}
+	mipi_csis_write(state, MIPI_CSIS_DPHYCTRL, val);
+}
+
+/* Called with the state.lock mutex held */
+static void __mipi_csis_set_format(struct csi_state *state)
+{
+	struct v4l2_mbus_framefmt *mf = &state->format;
+	u32 val;
+
+	v4l2_dbg(1, debug, &state->mipi_sd, "fmt: %#x, %d x %d\n",
+		 mf->code, mf->width, mf->height);
+
+	/* Color format */
+	val = mipi_csis_read(state, MIPI_CSIS_ISPCONFIG_CH0);
+	val = (val & ~MIPI_CSIS_ISPCFG_FMT_MASK) | state->csis_fmt->fmt_reg;
+	mipi_csis_write(state, MIPI_CSIS_ISPCONFIG_CH0, val);
+
+	/* Pixel resolution */
+	val = mf->width | (mf->height << 16);
+	mipi_csis_write(state, MIPI_CSIS_ISPRESOL_CH0, val);
+}
+
+static void mipi_csis_set_hsync_settle(struct csi_state *state,
+								int hs_settle, int clk_settle)
+{
+	u32 val = mipi_csis_read(state, MIPI_CSIS_DPHYCTRL);
+
+	val = (val & ~MIPI_CSIS_DPHYCTRL_HSS_MASK) |
+				(hs_settle << 24) | (clk_settle << 22);
+
+	mipi_csis_write(state, MIPI_CSIS_DPHYCTRL, val);
+}
+
+static void mipi_csis_set_params(struct csi_state *state)
+{
+	u32 val;
+
+	val = mipi_csis_read(state, MIPI_CSIS_CMN_CTRL);
+	val &= ~MIPI_CSIS_CMN_CTRL_LANE_NR_MASK;
+	val |= (state->num_lanes - 1) << MIPI_CSIS_CMN_CTRL_LANE_NR_OFFSET;
+	mipi_csis_write(state, MIPI_CSIS_CMN_CTRL, val);
+
+	__mipi_csis_set_format(state);
+
+	mipi_csis_set_hsync_settle(state, state->hs_settle, state->clk_settle);
+
+	val = mipi_csis_read(state, MIPI_CSIS_ISPCONFIG_CH0);
+	if (state->csis_fmt->data_alignment == 32)
+		val |= MIPI_CSIS_ISPCFG_ALIGN_32BIT;
+	else /* Normal output */
+		val &= ~MIPI_CSIS_ISPCFG_ALIGN_32BIT;
+	mipi_csis_write(state, MIPI_CSIS_ISPCONFIG_CH0, val);
+
+	val = (0 << MIPI_CSIS_ISPSYNC_HSYNC_LINTV_OFFSET) |
+		(0 << MIPI_CSIS_ISPSYNC_VSYNC_SINTV_OFFSET) |
+		(0 << MIPI_CSIS_ISPSYNC_VSYNC_EINTV_OFFSET);
+	mipi_csis_write(state, MIPI_CSIS_ISPSYNC_CH0, val);
+
+	val = mipi_csis_read(state, MIPI_CSIS_CLK_CTRL);
+	val &= ~MIPI_CSIS_CLK_CTRL_WCLK_SRC;
+	if (state->wclk_ext)
+		val |= MIPI_CSIS_CLK_CTRL_WCLK_SRC;
+	val |= MIPI_CSIS_CLK_CTRL_CLKGATE_TRAIL_CH0(15);
+	val &= ~MIPI_CSIS_CLK_CTRL_CLKGATE_EN_MSK;
+	mipi_csis_write(state, MIPI_CSIS_CLK_CTRL, val);
+
+	mipi_csis_write(state, MIPI_CSIS_DPHYBCTRL_L, 0x1f4);
+	mipi_csis_write(state, MIPI_CSIS_DPHYBCTRL_H, 0);
+
+	/* Update the shadow register. */
+	val = mipi_csis_read(state, MIPI_CSIS_CMN_CTRL);
+	mipi_csis_write(state, MIPI_CSIS_CMN_CTRL, val | MIPI_CSIS_CMN_CTRL_UPDATE_SHADOW |
+					MIPI_CSIS_CMN_CTRL_UPDATE_SHADOW_CTRL);
+}
+
+static void mipi_csis_clk_enable(struct csi_state *state)
+{
+	clk_prepare_enable(state->mipi_clk);
+	clk_prepare_enable(state->phy_clk);
+	if (state->disp_axi)
+		clk_prepare_enable(state->disp_axi);
+	if (state->disp_apb)
+		clk_prepare_enable(state->disp_apb);
+}
+
+static void mipi_csis_clk_disable(struct csi_state *state)
+{
+	clk_disable_unprepare(state->mipi_clk);
+	clk_disable_unprepare(state->phy_clk);
+	if (state->disp_axi)
+		clk_disable_unprepare(state->disp_axi);
+	if (state->disp_apb)
+		clk_disable_unprepare(state->disp_apb);
+}
+
+static int mipi_csis_clk_get(struct csi_state *state)
+{
+	struct device *dev = &state->pdev->dev;
+	int ret = true;
+
+	state->mipi_clk = devm_clk_get(dev, "mipi_clk");
+	if (IS_ERR(state->mipi_clk)) {
+		dev_err(dev, "Could not get mipi csi clock\n");
+		return -ENODEV;
+	}
+
+	state->phy_clk = devm_clk_get(dev, "phy_clk");
+	if (IS_ERR(state->phy_clk)) {
+		dev_err(dev, "Could not get mipi phy clock\n");
+		return -ENODEV;
+	}
+
+	state->disp_axi = devm_clk_get(dev, "disp_axi");
+	if (IS_ERR(state->disp_axi)) {
+		dev_warn(dev, "Could not get disp_axi clock\n");
+		state->disp_axi = NULL;
+	}
+
+	state->disp_apb = devm_clk_get(dev, "disp_apb");
+	if (IS_ERR(state->disp_apb)) {
+		dev_warn(dev, "Could not get disp apb clock\n");
+		state->disp_apb = NULL;
+	}
+
+	/* Set clock rate */
+	if (state->clk_frequency)
+		ret = clk_set_rate(state->mipi_clk,
+				   state->clk_frequency);
+	else
+		dev_WARN(dev, "No clock frequency specified!\n");
+	if (ret < 0) {
+		dev_err(dev, "set rate filed, rate=%d\n", state->clk_frequency);
+		return -EINVAL;
+	}
+
+	return ret;
+}
+
+static void dump_regs(struct csi_state *state, const char *label)
+{
+	struct {
+		u32 offset;
+		const char * const name;
+	} registers[] = {
+		{ 0x00, "CTRL" },
+		{ 0x04, "DPHYCTRL" },
+		{ 0x08, "CONFIG" },
+		{ 0x0c, "DPHYSTS" },
+		{ 0x10, "INTMSK" },
+		{ 0x2c, "RESOL" },
+		{ 0x38, "SDW_CONFIG" },
+	};
+	u32 i;
+
+	v4l2_info(&state->mipi_sd, "--- %s ---\n", label);
+
+	for (i = 0; i < ARRAY_SIZE(registers); i++) {
+		u32 cfg = mipi_csis_read(state, registers[i].offset);
+		v4l2_info(&state->mipi_sd, "%10s: 0x%08x\n", registers[i].name, cfg);
+	}
+}
+
+static void mipi_csis_start_stream(struct csi_state *state)
+{
+	mipi_csis_sw_reset(state);
+	mipi_csis_set_params(state);
+	mipi_csis_system_enable(state, true);
+	mipi_csis_enable_interrupts(state, true);
+}
+
+static void mipi_csis_stop_stream(struct csi_state *state)
+{
+	mipi_csis_enable_interrupts(state, false);
+	mipi_csis_system_enable(state, false);
+}
+
+static void mipi_csis_clear_counters(struct csi_state *state)
+{
+	unsigned long flags;
+	int i;
+
+	spin_lock_irqsave(&state->slock, flags);
+	for (i = 0; i < MIPI_CSIS_NUM_EVENTS; i++)
+		state->events[i].counter = 0;
+	spin_unlock_irqrestore(&state->slock, flags);
+}
+
+static void mipi_csis_log_counters(struct csi_state *state, bool non_errors)
+{
+	int i = non_errors ? MIPI_CSIS_NUM_EVENTS : MIPI_CSIS_NUM_EVENTS - 4;
+	unsigned long flags;
+
+	spin_lock_irqsave(&state->slock, flags);
+
+	for (i--; i >= 0; i--) {
+		if (state->events[i].counter > 0 || debug)
+			v4l2_info(&state->mipi_sd, "%s events: %d\n",
+				  state->events[i].name,
+				  state->events[i].counter);
+	}
+	spin_unlock_irqrestore(&state->slock, flags);
+}
+
+/*
+ * V4L2 subdev operations
+ */
+static int mipi_csis_s_power(struct v4l2_subdev *mipi_sd, int on)
+{
+	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
+	struct device *dev = &state->pdev->dev;
+
+	v4l2_subdev_call(state->sensor_sd, core, s_power, on);
+
+	if (on)
+		return pm_runtime_get_sync(dev);
+
+	return pm_runtime_put_sync(dev);
+}
+
+static int mipi_csis_s_stream(struct v4l2_subdev *mipi_sd, int enable)
+{
+	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
+	int ret = 0;
+
+	v4l2_dbg(1, debug, mipi_sd, "%s: %d, state: 0x%x\n",
+		 __func__, enable, state->flags);
+
+	if (enable) {
+		mipi_csis_clear_counters(state);
+		ret = pm_runtime_get_sync(&state->pdev->dev);
+		if (ret && ret != 1)
+			return ret;
+	}
+
+	mutex_lock(&state->lock);
+	if (enable) {
+		if (state->flags & ST_SUSPENDED) {
+			ret = -EBUSY;
+			goto unlock;
+		}
+		mipi_csis_start_stream(state);
+		v4l2_subdev_call(state->sensor_sd, video, s_stream, true);
+		state->flags |= ST_STREAMING;
+	} else {
+		v4l2_subdev_call(state->sensor_sd, video, s_stream, false);
+		mipi_csis_stop_stream(state);
+		state->flags &= ~ST_STREAMING;
+		if (debug > 0)
+			mipi_csis_log_counters(state, true);
+	}
+unlock:
+	mutex_unlock(&state->lock);
+	if (!enable)
+		pm_runtime_put(&state->pdev->dev);
+
+	return ret == 1 ? 0 : ret;
+}
+
+static int mipi_csis_enum_mbus_code(struct v4l2_subdev *mipi_sd,
+				    struct v4l2_subdev_state *sd_state,
+				    struct v4l2_subdev_mbus_code_enum *code)
+{
+	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
+	struct v4l2_subdev *sensor_sd = state->sensor_sd;
+	struct csis_pix_format const *csis_fmt;
+	int ret;
+
+	ret = v4l2_subdev_call(sensor_sd, pad, enum_mbus_code, NULL, code);
+	if (ret < 0)
+		return -EINVAL;
+
+	csis_fmt = find_csis_format(code->code);
+	if (csis_fmt == NULL) {
+		dev_err(state->dev, "format not match\n");
+		return -EINVAL;
+	}
+
+	return ret;
+}
+
+static int mipi_csis_set_fmt(struct v4l2_subdev *mipi_sd,
+			     struct v4l2_subdev_state *sd_state,
+			     struct v4l2_subdev_format *format)
+{
+	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
+	struct v4l2_subdev *sensor_sd = state->sensor_sd;
+	struct csis_pix_format const *csis_fmt;
+	struct v4l2_mbus_framefmt *mf  = &format->format;
+
+	if (format->pad)
+		return -EINVAL;
+
+	csis_fmt = find_csis_format(mf->code);
+	if (csis_fmt == NULL)
+		csis_fmt = &mipi_csis_formats[0];
+
+	v4l2_subdev_call(sensor_sd, pad, set_fmt, NULL, format);
+
+	mf->code = csis_fmt->code;
+	v4l_bound_align_image(&mf->width, 1, CSIS_MAX_PIX_WIDTH,
+			      csis_fmt->pix_width_alignment,
+			      &mf->height, 1, CSIS_MAX_PIX_HEIGHT, 1,
+			      0);
+
+	if (format->which == V4L2_SUBDEV_FORMAT_TRY)
+		return 0;
+
+	state->format.code = mf->code;
+	state->format.width = mf->width;
+	state->format.height = mf->height;
+
+	mutex_lock(&state->lock);
+	state->csis_fmt = csis_fmt;
+	mutex_unlock(&state->lock);
+
+	return 0;
+}
+
+static int mipi_csis_get_fmt(struct v4l2_subdev *mipi_sd,
+			     struct v4l2_subdev_state *sd_state,
+			     struct v4l2_subdev_format *format)
+{
+	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
+	struct v4l2_subdev *sensor_sd = state->sensor_sd;
+
+	if (format->pad)
+		return -EINVAL;
+
+	return v4l2_subdev_call(sensor_sd, pad, get_fmt, NULL, format);
+}
+
+static int mipi_csis_s_rx_buffer(struct v4l2_subdev *mipi_sd, void *buf,
+			       unsigned int *size)
+{
+	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
+	unsigned long flags;
+
+	*size = min_t(unsigned int, *size, MIPI_CSIS_PKTDATA_SIZE);
+
+	spin_lock_irqsave(&state->slock, flags);
+	state->pkt_buf.data = buf;
+	state->pkt_buf.len = *size;
+	spin_unlock_irqrestore(&state->slock, flags);
+
+	return 0;
+}
+
+static int mipi_csis_s_parm(struct v4l2_subdev *mipi_sd, struct v4l2_streamparm *a)
+{
+	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
+	struct v4l2_subdev *sensor_sd = state->sensor_sd;
+
+	return v4l2_subdev_call(sensor_sd, video, s_parm, a);
+}
+
+static int mipi_csis_g_parm(struct v4l2_subdev *mipi_sd, struct v4l2_streamparm *a)
+{
+	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
+	struct v4l2_subdev *sensor_sd = state->sensor_sd;
+
+	return v4l2_subdev_call(sensor_sd, video, g_parm, a);
+}
+
+static int mipi_csis_enum_framesizes(struct v4l2_subdev *mipi_sd,
+		struct v4l2_subdev_state *sd_state,
+		struct v4l2_subdev_frame_size_enum *fse)
+{
+	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
+	struct v4l2_subdev *sensor_sd = state->sensor_sd;
+
+	return v4l2_subdev_call(sensor_sd, pad, enum_frame_size, NULL, fse);
+}
+
+static int mipi_csis_enum_frameintervals(struct v4l2_subdev *mipi_sd,
+		struct v4l2_subdev_state *sd_state,
+		struct v4l2_subdev_frame_interval_enum *fie)
+{
+	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
+	struct v4l2_subdev *sensor_sd = state->sensor_sd;
+
+	return v4l2_subdev_call(sensor_sd, pad, enum_frame_interval, NULL, fie);
+}
+
+static int mipi_csis_log_status(struct v4l2_subdev *mipi_sd)
+{
+	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
+
+	mutex_lock(&state->lock);
+	mipi_csis_log_counters(state, true);
+	if (debug && (state->flags & ST_POWERED))
+		dump_regs(state, __func__);
+	mutex_unlock(&state->lock);
+	return 0;
+}
+
+static struct v4l2_subdev_core_ops mipi_csis_core_ops = {
+	.s_power = mipi_csis_s_power,
+	.log_status = mipi_csis_log_status,
+};
+
+static struct v4l2_subdev_video_ops mipi_csis_video_ops = {
+	.s_rx_buffer = mipi_csis_s_rx_buffer,
+	.s_stream = mipi_csis_s_stream,
+
+	.s_parm = mipi_csis_s_parm,
+	.g_parm = mipi_csis_g_parm,
+};
+
+static const struct v4l2_subdev_pad_ops mipi_csis_pad_ops = {
+	.enum_frame_size       = mipi_csis_enum_framesizes,
+	.enum_frame_interval   = mipi_csis_enum_frameintervals,
+	.enum_mbus_code        = mipi_csis_enum_mbus_code,
+	.get_fmt               = mipi_csis_get_fmt,
+	.set_fmt               = mipi_csis_set_fmt,
+};
+
+static struct v4l2_subdev_ops mipi_csis_subdev_ops = {
+	.core = &mipi_csis_core_ops,
+	.video = &mipi_csis_video_ops,
+	.pad = &mipi_csis_pad_ops,
+};
+
+static irqreturn_t mipi_csis_irq_handler(int irq, void *dev_id)
+{
+	struct csi_state *state = dev_id;
+	struct csis_pktbuf *pktbuf = &state->pkt_buf;
+	unsigned long flags;
+	u32 status;
+
+	status = mipi_csis_read(state, MIPI_CSIS_INTSRC);
+
+	spin_lock_irqsave(&state->slock, flags);
+
+	if ((status & MIPI_CSIS_INTSRC_NON_IMAGE_DATA) && pktbuf->data) {
+		u32 offset;
+
+		if (status & MIPI_CSIS_INTSRC_EVEN)
+			offset = MIPI_CSIS_PKTDATA_EVEN;
+		else
+			offset = MIPI_CSIS_PKTDATA_ODD;
+
+		memcpy(pktbuf->data, state->regs + offset, pktbuf->len);
+		pktbuf->data = NULL;
+		rmb();
+	}
+
+	/* Update the event/error counters */
+	if ((status & MIPI_CSIS_INTSRC_ERRORS) || debug) {
+		int i;
+		for (i = 0; i < MIPI_CSIS_NUM_EVENTS; i++) {
+			if (!(status & state->events[i].mask))
+				continue;
+			state->events[i].counter++;
+			v4l2_dbg(2, debug, &state->mipi_sd, "%s: %d\n",
+				 state->events[i].name,
+				 state->events[i].counter);
+		}
+		v4l2_dbg(2, debug, &state->mipi_sd, "status: %08x\n", status);
+	}
+	spin_unlock_irqrestore(&state->slock, flags);
+
+	mipi_csis_write(state, MIPI_CSIS_INTSRC, status);
+	return IRQ_HANDLED;
+}
+
+static int subdev_notifier_bound(struct v4l2_async_notifier *notifier,
+			    struct v4l2_subdev *subdev,
+			    struct v4l2_async_subdev *asd)
+{
+	struct csi_state *state = notifier_to_mipi_dev(notifier);
+
+	if (subdev == NULL)
+		return -EINVAL;
+
+	/* Find platform data for this sensor subdev */
+	if (state->fwnode == dev_fwnode(subdev->dev))
+		state->sensor_sd = subdev;
+
+	v4l2_info(&state->v4l2_dev, "Registered sensor subdevice: %s\n",
+		  subdev->name);
+
+	v4l2_ctrl_add_handler(
+		state->mipi_sd.v4l2_dev->ctrl_handler, 
+		state->sensor_sd->ctrl_handler, 
+		NULL, true);
+
+	return 0;
+}
+
+static int mipi_csis_parse_dt(struct platform_device *pdev,
+			    struct csi_state *state)
+{
+	struct device_node *node = pdev->dev.of_node;
+
+	if (of_property_read_u32(node, "clock-frequency",
+				 &state->clk_frequency))
+		state->clk_frequency = DEFAULT_SCLK_CSIS_FREQ;
+	if (of_property_read_u32(node, "bus-width",
+				 &state->max_num_lanes))
+		return -EINVAL;
+
+	/*
+	 * Explicitly get endpoint 1 being the sensor one as using overlays may
+	 * reverse node order in the final device tree blob.
+	 */
+	node = of_graph_get_endpoint_by_regs(node, 0, 1);
+	if (!node) {
+		dev_err(&pdev->dev, "No port/endpoint 1 sensor node at %s\n",
+				pdev->dev.of_node->full_name);
+		return -EINVAL;
+	}
+
+	/* Get MIPI CSI-2 bus configration from the endpoint node. */
+	of_property_read_u32(node, "csis-hs-settle",
+					&state->hs_settle);
+
+	of_property_read_u32(node, "csis-clk-settle",
+					&state->clk_settle);
+	state->wclk_ext = of_property_read_bool(node,
+					"csis-wclk");
+
+	of_property_read_u32(node, "data-lanes",
+					&state->num_lanes);
+	of_node_put(node);
+
+	return 0;
+}
+
+static int mipi_csis_pm_resume(struct device *dev, bool runtime);
+static const struct of_device_id mipi_csis_of_match[];
+
+static const struct v4l2_async_notifier_operations mxc_mipi_csi_subdev_ops = {
+	.bound = subdev_notifier_bound,
+};
+
+/* register parent dev */
+static int mipi_csis_subdev_host(struct csi_state *state)
+{
+	struct device_node *parent = state->dev->of_node;
+	struct device_node *node, *rem;
+	struct v4l2_async_subdev *asd;
+	int ret;
+
+	v4l2_async_notifier_init(&state->subdev_notifier);
+
+	/*
+	 * Explicitly get endpoint 1 being the sensor one as using overlays may
+	 * reverse node order in the final device tree blob.
+	 */
+	node = of_graph_get_endpoint_by_regs(parent, 0, 1);
+	if (node == NULL) {
+		v4l2_info(&state->v4l2_dev,
+					"Port at %s not found\n",
+					parent->full_name);
+		return -1;
+	}
+
+	rem = of_graph_get_remote_port_parent(node);
+	of_node_put(node);
+	if (rem == NULL) {
+		v4l2_info(&state->v4l2_dev,
+					"Remote device at %s not found\n",
+					node->full_name);
+		return -1;
+	}
+
+	state->fwnode = of_fwnode_handle(rem);
+	asd = v4l2_async_notifier_add_fwnode_subdev(
+					&state->subdev_notifier,
+					state->fwnode,
+					struct v4l2_async_subdev);
+	if (IS_ERR(asd)) {
+		of_node_put(rem);
+		dev_err(state->dev, "failed to add subdev to a notifier\n");
+		return PTR_ERR(asd);
+	}
+
+	of_node_put(rem);
+
+	state->subdev_notifier.v4l2_dev = &state->v4l2_dev;
+	state->subdev_notifier.ops = &mxc_mipi_csi_subdev_ops;
+
+	ret = v4l2_async_notifier_register(&state->v4l2_dev,
+					&state->subdev_notifier);
+	if (ret)
+		dev_err(state->dev,
+					"Error register async notifier regoster\n");
+
+	return ret;
+}
+
+/* init subdev */
+static int mipi_csis_subdev_init(struct v4l2_subdev *mipi_sd,
+		struct platform_device *pdev,
+		const struct v4l2_subdev_ops *ops)
+{
+	struct csi_state *state = platform_get_drvdata(pdev);
+	int ret = 0;
+
+	v4l2_subdev_init(mipi_sd, ops);
+	mipi_sd->owner = THIS_MODULE;
+	snprintf(mipi_sd->name, sizeof(mipi_sd->name), "%s.%d",
+		 CSIS_SUBDEV_NAME, state->index);
+	mipi_sd->flags |= V4L2_SUBDEV_FL_HAS_DEVNODE;
+	mipi_sd->dev = &pdev->dev;
+
+	state->csis_fmt = &mipi_csis_formats[0];
+	state->format.code = mipi_csis_formats[0].code;
+	state->format.width = MIPI_CSIS_DEF_PIX_WIDTH;
+	state->format.height = MIPI_CSIS_DEF_PIX_HEIGHT;
+
+	/* This allows to retrieve the platform device id by the host driver */
+	v4l2_set_subdevdata(mipi_sd, pdev);
+
+	ret = v4l2_async_register_subdev(mipi_sd);
+	if (ret < 0)
+		dev_err(&pdev->dev, "%s--Async register faialed, ret=%d\n", __func__, ret);
+
+	return ret;
+}
+
+static int mipi_csis_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct v4l2_subdev *mipi_sd;
+	struct resource *mem_res;
+	struct csi_state *state;
+	const struct of_device_id *of_id;
+	mipi_csis_phy_reset_t phy_reset_fn;
+	int ret = -ENOMEM;
+
+	state = devm_kzalloc(dev, sizeof(*state), GFP_KERNEL);
+	if (!state)
+		return -ENOMEM;
+
+	mutex_init(&state->lock);
+	spin_lock_init(&state->slock);
+
+	state->pdev = pdev;
+	mipi_sd = &state->mipi_sd;
+	state->dev = dev;
+
+	ret = mipi_csis_parse_dt(pdev, state);
+	if (ret < 0)
+		return ret;
+
+	if (state->num_lanes == 0 || state->num_lanes > state->max_num_lanes) {
+		dev_err(dev, "Unsupported number of data lanes: %d (max. %d)\n",
+			state->num_lanes, state->max_num_lanes);
+		return -EINVAL;
+	}
+
+	mipi_csis_phy_init(state);
+	of_id = of_match_node(mipi_csis_of_match, dev->of_node);
+	if (!of_id || !of_id->data)
+		return -EINVAL;
+
+	phy_reset_fn = of_id->data;
+
+	mem_res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	state->regs = devm_ioremap_resource(dev, mem_res);
+	if (IS_ERR(state->regs))
+		return PTR_ERR(state->regs);
+
+	state->irq = platform_get_irq(pdev, 0);
+	if (state->irq < 0) {
+		dev_err(dev, "Failed to get irq\n");
+		return state->irq;
+	}
+
+	ret = mipi_csis_clk_get(state);
+	if (ret < 0)
+		return ret;
+
+	mipi_csis_clk_enable(state);
+
+	phy_reset_fn(state);
+
+	ret = devm_request_irq(dev, state->irq, mipi_csis_irq_handler,
+			       0, dev_name(dev), state);
+	if (ret) {
+		dev_err(dev, "Interrupt request failed\n");
+		goto e_clkdis;
+	}
+
+	/* First register a v4l2 device */
+	ret = v4l2_device_register(dev, &state->v4l2_dev);
+	if (ret) {
+		v4l2_err(dev->driver,
+			"Unable to register v4l2 device.\n");
+		goto e_clkdis;
+	}
+	v4l2_info(&state->v4l2_dev, "mipi csi v4l2 device registered\n");
+
+	/* .. and a pointer to the subdev. */
+	platform_set_drvdata(pdev, state);
+
+	ret = mipi_csis_subdev_init(&state->mipi_sd, pdev, &mipi_csis_subdev_ops);
+	if (ret < 0)
+		goto e_sd_mipi;
+
+	memcpy(state->events, mipi_csis_events, sizeof(state->events));
+
+	/* subdev host register */
+	ret = mipi_csis_subdev_host(state);
+	if (ret < 0)
+		goto e_sd_host;
+
+	pm_runtime_enable(dev);
+	if (!pm_runtime_enabled(dev)) {
+		ret = mipi_csis_pm_resume(dev, true);
+		if (ret < 0)
+			goto e_sd_host;
+	}
+
+	mipi_csis_clk_disable(state);
+	dev_info(&pdev->dev,
+			"lanes: %d, hs_settle: %d, clk_settle: %d, wclk: %d, freq: %u\n",
+		 state->num_lanes, state->hs_settle, state->clk_settle,
+		 state->wclk_ext, state->clk_frequency);
+	return 0;
+
+e_sd_host:
+	v4l2_async_notifier_unregister(&state->subdev_notifier);
+	v4l2_device_unregister(&state->v4l2_dev);
+e_sd_mipi:
+	v4l2_async_unregister_subdev(&state->mipi_sd);
+e_clkdis:
+	mipi_csis_clk_disable(state);
+	return ret;
+}
+
+static int mipi_csis_pm_suspend(struct device *dev, bool runtime)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+	struct csi_state *state = platform_get_drvdata(pdev);
+	struct v4l2_subdev *mipi_sd = &state->mipi_sd;
+	int ret = 0;
+
+	v4l2_dbg(1, debug, mipi_sd, "%s: flags: 0x%x\n",
+		 __func__, state->flags);
+
+	mutex_lock(&state->lock);
+	if (state->flags & ST_POWERED) {
+		mipi_csis_stop_stream(state);
+		ret = regulator_disable(state->mipi_phy_regulator);
+		if (ret)
+			goto unlock;
+		mipi_csis_clk_disable(state);
+		state->flags &= ~ST_POWERED;
+		if (!runtime)
+			state->flags |= ST_SUSPENDED;
+	}
+ unlock:
+	mutex_unlock(&state->lock);
+	return ret ? -EAGAIN : 0;
+}
+
+static int mipi_csis_pm_resume(struct device *dev, bool runtime)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+	struct csi_state *state = platform_get_drvdata(pdev);
+	struct v4l2_subdev *mipi_sd = &state->mipi_sd;
+	int ret = 0;
+
+	v4l2_dbg(1, debug, mipi_sd, "%s: flags: 0x%x\n",
+		 __func__, state->flags);
+
+	mutex_lock(&state->lock);
+	if (!runtime && !(state->flags & ST_SUSPENDED))
+		goto unlock;
+
+	if (!(state->flags & ST_POWERED)) {
+		ret = regulator_enable(state->mipi_phy_regulator);
+		if (!ret) {
+			state->flags |= ST_POWERED;
+		} else {
+			goto unlock;
+		}
+		mipi_csis_clk_enable(state);
+	}
+	if (state->flags & ST_STREAMING)
+		mipi_csis_start_stream(state);
+
+	state->flags &= ~ST_SUSPENDED;
+ unlock:
+	mutex_unlock(&state->lock);
+	return ret ? -EAGAIN : 0;
+}
+
+#ifdef CONFIG_PM_SLEEP
+static int mipi_csis_suspend(struct device *dev)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+	struct csi_state *state = platform_get_drvdata(pdev);
+
+	if (state->flags & ST_STREAMING) {
+		dev_warn(dev, "running, prevent entering suspend.\n");
+		return -EAGAIN;
+	}
+
+	return mipi_csis_pm_suspend(dev, false);
+}
+
+static int mipi_csis_resume(struct device *dev)
+{
+	return mipi_csis_pm_resume(dev, false);
+}
+#endif
+
+static int mipi_csis_runtime_suspend(struct device *dev)
+{
+	return mipi_csis_pm_suspend(dev, true);
+}
+
+static int mipi_csis_runtime_resume(struct device *dev)
+{
+	return mipi_csis_pm_resume(dev, true);
+}
+
+static int mipi_csis_remove(struct platform_device *pdev)
+{
+	struct csi_state *state = platform_get_drvdata(pdev);
+
+	v4l2_async_unregister_subdev(&state->mipi_sd);
+	v4l2_async_notifier_cleanup(&state->subdev_notifier);
+	v4l2_async_notifier_unregister(&state->subdev_notifier);
+	v4l2_device_unregister(&state->v4l2_dev);
+
+	pm_runtime_disable(&pdev->dev);
+	mipi_csis_pm_suspend(&pdev->dev, true);
+    mipi_csis_clk_disable(state);
+	pm_runtime_set_suspended(&pdev->dev);
+
+	return 0;
+}
+
+static const struct dev_pm_ops mipi_csis_pm_ops = {
+	SET_RUNTIME_PM_OPS(mipi_csis_runtime_suspend, mipi_csis_runtime_resume,
+			   NULL)
+	SET_SYSTEM_SLEEP_PM_OPS(mipi_csis_suspend, mipi_csis_resume)
+};
+
+static const struct of_device_id mipi_csis_of_match[] = {
+	{	.compatible = "fsl,imx7d-mipi-csi",
+		.data = (void *)&mipi_csis_phy_reset,
+	},
+	{	.compatible = "fsl,imx8mm-mipi-csi",
+		.data = (void *)&mipi_csis_phy_reset_mx8mm,
+	},
+	{ /* sentinel */ },
+};
+MODULE_DEVICE_TABLE(of, mipi_csis_of_match);
+
+static struct platform_driver mipi_csis_driver = {
+	.probe		= mipi_csis_probe,
+	.remove		= mipi_csis_remove,
+	.driver		= {
+		.of_match_table = mipi_csis_of_match,
+		.name		= CSIS_DRIVER_NAME,
+		.owner		= THIS_MODULE,
+		.pm		= &mipi_csis_pm_ops,
+	},
+};
+
+module_platform_driver(mipi_csis_driver);
+
+MODULE_DESCRIPTION("Freescale MIPI-CSI2 receiver driver");
+MODULE_LICENSE("GPL");
-- 
2.25.1

