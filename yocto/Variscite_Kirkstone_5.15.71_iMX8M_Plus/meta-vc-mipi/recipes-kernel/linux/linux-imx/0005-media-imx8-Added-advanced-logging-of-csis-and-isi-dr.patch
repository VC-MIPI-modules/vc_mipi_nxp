From 216dbab51a6cc65632240025b31c663bc0e1ad84 Mon Sep 17 00:00:00 2001
From: Peter Martienssen <peter.martienssen@liquify-consulting.de>
Date: Thu, 12 Sep 2024 14:04:22 +0200
Subject: [PATCH 5/5] media: imx8: Added advanced logging of csis and isi
 driver

---
 .../media/common/videobuf2/videobuf2-v4l2.c   |   4 +
 drivers/staging/media/imx/imx8-isi-cap.c      | 107 +++++++++++++++++-
 drivers/staging/media/imx/imx8-isi-core.c     |  57 ++++++++--
 drivers/staging/media/imx/imx8-isi-core.h     |   1 +
 drivers/staging/media/imx/imx8-isi-hw.c       |  21 +++-
 .../staging/media/imx/imx8-mipi-csi2-sam.c    |  27 ++---
 6 files changed, 189 insertions(+), 28 deletions(-)

diff --git a/drivers/media/common/videobuf2/videobuf2-v4l2.c b/drivers/media/common/videobuf2/videobuf2-v4l2.c
index 2988bb38c..2b017fef0 100644
--- a/drivers/media/common/videobuf2/videobuf2-v4l2.c
+++ b/drivers/media/common/videobuf2/videobuf2-v4l2.c
@@ -807,6 +807,8 @@ int vb2_qbuf(struct vb2_queue *q, struct media_device *mdev,
 	     struct v4l2_buffer *b)
 {
 	struct media_request *req = NULL;
+	struct vb2_buffer *vb = q->bufs[b->index];
+	struct vb2_v4l2_buffer *v4l2_buf = to_vb2_v4l2_buffer(vb);
 	int ret;
 
 	if (vb2_fileio_is_active(q)) {
@@ -817,6 +819,8 @@ int vb2_qbuf(struct vb2_queue *q, struct media_device *mdev,
 	ret = vb2_queue_or_prepare_buf(q, mdev, b, false, &req);
 	if (ret)
 		return ret;
+
+	v4l2_buf->sequence = b->sequence;
 	ret = vb2_core_qbuf(q, b->index, b, req);
 	if (req)
 		media_request_put(req);
diff --git a/drivers/staging/media/imx/imx8-isi-cap.c b/drivers/staging/media/imx/imx8-isi-cap.c
index 0584c97ca..4980b9941 100644
--- a/drivers/staging/media/imx/imx8-isi-cap.c
+++ b/drivers/staging/media/imx/imx8-isi-cap.c
@@ -32,6 +32,25 @@
 #include "imx8-common.h"
 #include "imx8-isi-fmt.h"
 
+static int debug;
+module_param(debug, int, 0644);
+MODULE_PARM_DESC(debug, "Debug level (0-3)");
+
+#define dprintk(level, fmt, arg...) \
+	do { \
+		if (debug >= level) \
+			pr_info("BUFLOG:%u:" fmt, level, ## arg); \
+	} while (0)
+
+static inline int list_count(const struct list_head *list) 
+{
+	struct list_head *tmp_list;
+	int count = 0;
+	list_for_each(tmp_list, list)
+	    count++;
+	return count;
+}
+
 #define sd_to_cap_dev(ptr)	container_of(ptr, struct mxc_isi_cap_dev, sd)
 static int mxc_isi_cap_streamoff(struct file *file, void *priv,
 				 enum v4l2_buf_type type);
@@ -165,15 +184,16 @@ static int mxc_isi_pipeline_enable(struct mxc_isi_cap_dev *isi_cap, bool enable)
 void mxc_isi_cap_frame_write_done(struct mxc_isi_dev *mxc_isi)
 {
 	struct mxc_isi_cap_dev *isi_cap = mxc_isi->isi_cap;
-	struct device *dev = &isi_cap->pdev->dev;
 	struct mxc_isi_buffer *buf;
 	struct vb2_buffer *vb2;
 	unsigned long flags;
 
 	spin_lock_irqsave(&isi_cap->slock, flags);
+	isi_cap->irq_count++;
 
 	if (list_empty(&isi_cap->out_active)) {
-		dev_warn(dev, "trying to access empty active list\n");
+		dprintk(0, "done    [  WARNING ] try to access empty ACT list!   [IRQ:%u]\n", 
+			isi_cap->irq_count);
 		goto unlock;
 	}
 
@@ -185,14 +205,29 @@ void mxc_isi_cap_frame_write_done(struct mxc_isi_dev *mxc_isi)
 	 */
 	if ((is_buf_active(mxc_isi, 1) && buf->id == MXC_ISI_BUF1) ||
 	    (is_buf_active(mxc_isi, 2) && buf->id == MXC_ISI_BUF2)) {
-		dev_dbg(dev, "status=0x%x id=%d\n", mxc_isi->status, buf->id);
+		dprintk(1, "done    [   SKIP   ] ERR B# (Status: 0x%08x, B%u) [IRQ:%u]\n", 
+			mxc_isi->status, buf->id + 1,
+			isi_cap->irq_count);
 		goto unlock;
 	}
 
+	dprintk(3, "done    [  STATUS  ]     B# (Status: 0x%08x, B%u) [IRQ:%u]\n", 
+		mxc_isi->status, buf->id + 1,
+		isi_cap->irq_count);
+
 	if (buf->discard) {
+		dprintk(2, "done    [0x%08llx]               DISC(%u) <- ACT(%u) [IRQ:%u #%04u]\n", 
+			buf->dma_addrs[0], 
+			list_count(isi_cap->out_discard.next),
+			list_count(isi_cap->out_active.next),
+			isi_cap->irq_count, buf->v4l2_buf.sequence);
 		list_move_tail(isi_cap->out_active.next, &isi_cap->out_discard);
 	} else {
 		vb2 = &buf->v4l2_buf.vb2_buf;
+		dprintk(1, "done    [0x%08llx]                {done} x- ACT(%u) [IRQ:%u #%04u] -> APP\n",
+			buf->dma_addrs[0], 
+			list_count(isi_cap->out_active.next),
+			isi_cap->irq_count, buf->v4l2_buf.sequence);
 		list_del_init(&buf->list);
 		buf->v4l2_buf.vb2_buf.timestamp = ktime_get_ns();
 		vb2_buffer_done(&buf->v4l2_buf.vb2_buf, VB2_BUF_STATE_DONE);
@@ -202,13 +237,19 @@ void mxc_isi_cap_frame_write_done(struct mxc_isi_dev *mxc_isi)
 
 	if (list_empty(&isi_cap->out_pending)) {
 		if (list_empty(&isi_cap->out_discard)) {
-			dev_warn(dev, "trying to access empty discard list\n");
+			dprintk(0, "done    [  WARNING ] try to access empty DISC list! [IRQ:%u]\n", 
+				isi_cap->irq_count);
 			goto unlock;
 		}
 
 		buf = list_first_entry(&isi_cap->out_discard,
 				       struct mxc_isi_buffer, list);
 		buf->v4l2_buf.sequence = isi_cap->frame_count;
+		dprintk(2, "done    [0x%08llx]               DISC(%u) -> ACT(%u) [IRQ:%u #%04u]\n", 
+			buf->dma_addrs[0], 
+			list_count(isi_cap->out_discard.next),
+			list_count(isi_cap->out_active.next), 
+			isi_cap->irq_count, buf->v4l2_buf.sequence);
 		mxc_isi_channel_set_outbuf(mxc_isi, buf);
 		list_move_tail(isi_cap->out_discard.next, &isi_cap->out_active);
 		goto unlock;
@@ -217,6 +258,11 @@ void mxc_isi_cap_frame_write_done(struct mxc_isi_dev *mxc_isi)
 	/* ISI channel output buffer */
 	buf = list_first_entry(&isi_cap->out_pending, struct mxc_isi_buffer, list);
 	buf->v4l2_buf.sequence = isi_cap->frame_count;
+	dprintk(2, "done    [0x%08llx]    PEND(%u) --{active}--> ACT(%u) [IRQ:%u #%04u]\n", 
+			buf->dma_addrs[0], 
+			list_count(isi_cap->out_pending.next),
+			list_count(isi_cap->out_active.next), 
+			isi_cap->irq_count, buf->v4l2_buf.sequence);
 	mxc_isi_channel_set_outbuf(mxc_isi, buf);
 	vb2 = &buf->v4l2_buf.vb2_buf;
 	vb2->state = VB2_BUF_STATE_ACTIVE;
@@ -302,8 +348,11 @@ static int cap_vb2_buffer_init(struct vb2_buffer *vb2)
 	struct mxc_isi_frame *dst_f = &isi_cap->dst_f;
 	int i;
 
-	for (i = 0; i < dst_f->fmt->memplanes; ++i)
+	for (i = 0; i < dst_f->fmt->memplanes; ++i) {
 		buf->dma_addrs[i] = vb2_dma_contig_plane_dma_addr(vb2, i);
+		dprintk(1, "init    [0x%08llx] <- alloc\n", 
+			buf->dma_addrs[i]);
+	}
 
 	if (dst_f->fmt->colplanes != dst_f->fmt->memplanes) {
 		unsigned int size = dst_f->bytesperline[0] * dst_f->height;
@@ -324,6 +373,10 @@ static void cap_vb2_buffer_queue(struct vb2_buffer *vb2)
 
 	spin_lock_irqsave(&isi_cap->slock, flags);
 
+	dprintk(1, "queue   [0x%08llx] +> PEND(%u)                      [#%04u] <- APP\n", 
+		buf->dma_addrs[0], 
+		list_count(isi_cap->out_pending.next),
+		buf->v4l2_buf.sequence);
 	list_add_tail(&buf->list, &isi_cap->out_pending);
 	v4l2_buf->field = V4L2_FIELD_NONE;
 
@@ -382,11 +435,19 @@ static int cap_vb2_start_streaming(struct vb2_queue *q, unsigned int count)
 	spin_lock_irqsave(&isi_cap->slock, flags);
 
 	/* add two list member to out_discard list head */
+	buf = &isi_cap->buf_discard[0];
+	dprintk(1, "start   [0x%08llx]            +> DISC(%u)           \n",
+		buf->dma_addrs[0],
+		list_count(isi_cap->out_discard.next));
 	isi_cap->buf_discard[0].discard = true;
 	vb2 = &isi_cap->buf_discard[0].v4l2_buf.vb2_buf;
 	vb2->num_planes = isi_cap->pix.num_planes;
 	list_add_tail(&isi_cap->buf_discard[0].list, &isi_cap->out_discard);
 
+	buf = &isi_cap->buf_discard[1];
+	dprintk(1, "start   [0x%08llx]            +> DISC(%u)           \n",
+		buf->dma_addrs[0],
+		list_count(isi_cap->out_discard.next));
 	isi_cap->buf_discard[1].discard = true;
 	vb2 = &isi_cap->buf_discard[1].v4l2_buf.vb2_buf;
 	vb2->num_planes = isi_cap->pix.num_planes;
@@ -394,6 +455,10 @@ static int cap_vb2_start_streaming(struct vb2_queue *q, unsigned int count)
 
 	/* ISI channel output buffer 1 */
 	buf = list_first_entry(&isi_cap->out_discard, struct mxc_isi_buffer, list);
+	dprintk(1, "start   [0x%08llx]      {active} DISC(%u) -> ACT(%u) \n", 
+		buf->dma_addrs[0], 
+		list_count(isi_cap->out_discard.next),
+		list_count(isi_cap->out_active.next));
 	buf->v4l2_buf.sequence = 0;
 	vb2 = &buf->v4l2_buf.vb2_buf;
 	vb2->state = VB2_BUF_STATE_ACTIVE;
@@ -402,6 +467,10 @@ static int cap_vb2_start_streaming(struct vb2_queue *q, unsigned int count)
 
 	/* ISI channel output buffer 2 */
 	buf = list_first_entry(&isi_cap->out_pending, struct mxc_isi_buffer, list);
+	dprintk(1, "start   [0x%08llx]    PEND(%u) --{active}--> ACT(%u) \n", 
+		buf->dma_addrs[0], 
+		list_count(isi_cap->out_pending.next),
+		list_count(isi_cap->out_active.next));
 	buf->v4l2_buf.sequence = 1;
 	vb2 = &buf->v4l2_buf.vb2_buf;
 	vb2->state = VB2_BUF_STATE_ACTIVE;
@@ -409,6 +478,7 @@ static int cap_vb2_start_streaming(struct vb2_queue *q, unsigned int count)
 	list_move_tail(isi_cap->out_pending.next, &isi_cap->out_active);
 
 	/* Clear frame count */
+	isi_cap->irq_count = 0;
 	isi_cap->frame_count = 1;
 	spin_unlock_irqrestore(&isi_cap->slock, flags);
 
@@ -419,6 +489,9 @@ err:
 	while (!list_empty(&isi_cap->out_active)) {
 		buf = list_entry(isi_cap->out_active.next,
 				 struct mxc_isi_buffer, list);
+		dprintk(1, "start   [0x%08llx]               {error} x- ACT(%u) \n",
+			buf->dma_addrs[0], 
+			list_count(isi_cap->out_active.next));
 		list_del_init(&buf->list);
 		if (buf->discard)
 			continue;
@@ -429,6 +502,9 @@ err:
 	while (!list_empty(&isi_cap->out_pending)) {
 		buf = list_entry(isi_cap->out_pending.next,
 				 struct mxc_isi_buffer, list);
+		dprintk(1, "start   [0x%08llx] x- PEND(%u) {error}              \n",
+			buf->dma_addrs[0],
+			list_count(isi_cap->out_pending.next));
 		list_del_init(&buf->list);
 		vb2_buffer_done(&buf->v4l2_buf.vb2_buf, VB2_BUF_STATE_ERROR);
 	}
@@ -454,6 +530,9 @@ static void cap_vb2_stop_streaming(struct vb2_queue *q)
 	while (!list_empty(&isi_cap->out_active)) {
 		buf = list_entry(isi_cap->out_active.next,
 				 struct mxc_isi_buffer, list);
+		dprintk(1, "stop    [0x%08llx]               {error} x- ACT(%u) \n",
+			buf->dma_addrs[0], 
+			list_count(isi_cap->out_active.next));
 		list_del_init(&buf->list);
 		if (buf->discard)
 			continue;
@@ -464,6 +543,9 @@ static void cap_vb2_stop_streaming(struct vb2_queue *q)
 	while (!list_empty(&isi_cap->out_pending)) {
 		buf = list_entry(isi_cap->out_pending.next,
 				 struct mxc_isi_buffer, list);
+		dprintk(1, "stop    [0x%08llx] x- PEND(%u) {error}              \n",
+			buf->dma_addrs[0], 
+			list_count(isi_cap->out_pending.next));
 		list_del_init(&buf->list);
 		vb2_buffer_done(&buf->v4l2_buf.vb2_buf, VB2_BUF_STATE_ERROR);
 	}
@@ -471,12 +553,21 @@ static void cap_vb2_stop_streaming(struct vb2_queue *q)
 	while (!list_empty(&isi_cap->out_discard)) {
 		buf = list_entry(isi_cap->out_discard.next,
 				 struct mxc_isi_buffer, list);
+		dprintk(1, "stop    [0x%08llx]            x- DISC(%u)           \n",
+			buf->dma_addrs[0], 
+			list_count(isi_cap->out_discard.next));
 		list_del_init(&buf->list);
 	}
 
 	INIT_LIST_HEAD(&isi_cap->out_active);
 	INIT_LIST_HEAD(&isi_cap->out_pending);
 	INIT_LIST_HEAD(&isi_cap->out_discard);
+	dprintk(1, "stop    [INIT  LIST]    PEND(%u)                      \n", 
+		list_count(isi_cap->out_pending.next));
+	dprintk(1, "stop    [INIT  LIST]               DISC(%u)           \n",
+		list_count(isi_cap->out_discard.next));
+	dprintk(1, "stop    [INIT  LIST]                          ACT(%u) \n", 
+		list_count(isi_cap->out_active.next));
 
 	spin_unlock_irqrestore(&isi_cap->slock, flags);
 
@@ -1714,6 +1805,12 @@ static int mxc_isi_register_cap_device(struct mxc_isi_cap_dev *isi_cap,
 	INIT_LIST_HEAD(&isi_cap->out_pending);
 	INIT_LIST_HEAD(&isi_cap->out_active);
 	INIT_LIST_HEAD(&isi_cap->out_discard);
+	dprintk(1, "regis   [INIT  LIST]    PEND(%u)                      \n", 
+		list_count(isi_cap->out_pending.next));
+	dprintk(1, "regis   [INIT  LIST]               DISC(%u)           \n",
+		list_count(isi_cap->out_discard.next));
+	dprintk(1, "regis   [INIT  LIST]                          ACT(%u) \n", 
+		list_count(isi_cap->out_active.next));
 
 	memset(q, 0, sizeof(*q));
 	q->type = V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE;
diff --git a/drivers/staging/media/imx/imx8-isi-core.c b/drivers/staging/media/imx/imx8-isi-core.c
index 8f71f2631..42a347bb5 100644
--- a/drivers/staging/media/imx/imx8-isi-core.c
+++ b/drivers/staging/media/imx/imx8-isi-core.c
@@ -60,25 +60,68 @@ static irqreturn_t mxc_isi_irq_handler(int irq, void *priv)
 			mxc_isi_cap_frame_write_done(mxc_isi);
 	}
 
+// AXI Bus write error interrupt flag for Y/RGB data buffer
+// Indicates an error occured on the AXI Bus when storing Y/RGB data to memory.
+//   0b - No error
+//   1b - Error occured during write
 	if (status & (CHNL_STS_AXI_WR_ERR_Y_MASK |
 		      CHNL_STS_AXI_WR_ERR_U_MASK |
 		      CHNL_STS_AXI_WR_ERR_V_MASK))
-		dev_dbg(dev, "%s, IRQ AXI Error stat=0x%X\n", __func__, status);
-
+		dev_err(dev, "%s, IRQ AXI WR Error stat=0x%X\n", __func__, status);
+
+// AXI Bus read error interrupt flag
+// Indicates an error occured on the AXI Bus when reading image data to memory.
+//   0b - No error
+//   1b - Error occured during read
+	if (status & (CHNL_STS_AXI_RD_ERR_MASK))
+		dev_err(dev, "%s, IRQ AXI RD Error stat=0x%X\n", __func__, status);
+
+// Y/RGB output buffer potential overflow panic alert interrupt flag
+// Indicates that the channel requires the software to increase the AXI bus priority for the Y/RGB channel so
+// that it can empty its output buffers otherwise the buffer might overflow and loose valid pixel data.
+// Software must take action on this interrupt such that buffers are emptied out before any overflow occurs.
+// The threshold for this panic interrupt can be set in the OUT_BUF_CTRL register.
+//   0b - Buffer has not crossed the panic threshold limit
+//   1b - Panic threshold limit crossed. Software must take action.
 	if (status & (ier_reg->panic_y_buf_en.mask |
 		      ier_reg->panic_u_buf_en.mask |
 		      ier_reg->panic_v_buf_en.mask))
-		dev_dbg(dev, "%s, IRQ Panic OFLW Error stat=0x%X\n", __func__, status);
-
+		dev_err(dev, "%s, IRQ Panic OFLW Error stat=0x%X\n", __func__, status);
+
+// Overflow in Y/RGB output buffer interrupt flag
+// Indicates overflow due to internal buffers not being read via AXI and are now full and not accepting new
+// valid pixels in the output buffer control stage. The number of bytes lost during the overflow event is also
+// reported in the status register.
+//   0b - No overflow
+//   1b - Overflow has occured in the channel
 	if (status & (ier_reg->oflw_y_buf_en.mask |
 		      ier_reg->oflw_u_buf_en.mask |
 		      ier_reg->oflw_v_buf_en.mask))
-		dev_dbg(dev, "%s, IRQ OFLW Error stat=0x%X\n", __func__, status);
-
+		dev_err(dev, "%s, IRQ OFLW Error stat=0x%X\n", __func__, status);
+
+// VSYNC timing (Early) error interrupt flag
+// Indicates that the VSYNC for the frame was detected earlier than expected. The resultant frame will have
+// corrupt data.
+//   0b - No error
+//   1b - VSYNC detected earlier than expected
+#define CHNL_STS_EARLY_VSYNC_MASK	0x20000
+	if (status & (CHNL_STS_EARLY_VSYNC_MASK))
+		dev_err(dev, "%s, IRQ EARLY VSYNC Error stat=0x%X\n", __func__, status);
+	
+// VSYNC timing (Late) error interrupt flag
+// Indicates that the VSYNC for the frame was detected later than expected. The resultant frame will have
+// correct data. The extra lines in frame will be ignored.
+//   0b - No error
+//   1b - VSYNC detected later than expected
+#define CHNL_STS_LATE_VSYNC_MASK 	0x10000
+	if (status & (CHNL_STS_LATE_VSYNC_MASK))
+		dev_err(dev, "%s, IRQ LATE VSYNC Error stat=0x%X\n", __func__, status);
+
+// Not applicable for i.MX8MP
 	if (status & (ier_reg->excs_oflw_y_buf_en.mask |
 		      ier_reg->excs_oflw_u_buf_en.mask |
 		      ier_reg->excs_oflw_v_buf_en.mask))
-		dev_dbg(dev, "%s, IRQ EXCS OFLW Error stat=0x%X\n", __func__, status);
+		dev_err(dev, "%s, IRQ EXCS OFLW Error stat=0x%X\n", __func__, status);
 
 	spin_unlock_irqrestore(&mxc_isi->slock, flags);
 	return IRQ_HANDLED;
diff --git a/drivers/staging/media/imx/imx8-isi-core.h b/drivers/staging/media/imx/imx8-isi-core.h
index bffb468c4..c856c9b77 100644
--- a/drivers/staging/media/imx/imx8-isi-core.h
+++ b/drivers/staging/media/imx/imx8-isi-core.h
@@ -320,6 +320,7 @@ struct mxc_isi_cap_dev {
 	struct mxc_isi_frame dst_f;
 
 	u32 frame_count;
+	u32 irq_count;
 	u32 id;
 	u32 is_streaming[MXC_ISI_MAX_DEVS];
 	bool is_link_setup;
diff --git a/drivers/staging/media/imx/imx8-isi-hw.c b/drivers/staging/media/imx/imx8-isi-hw.c
index 193ff5c5f..e031c5060 100644
--- a/drivers/staging/media/imx/imx8-isi-hw.c
+++ b/drivers/staging/media/imx/imx8-isi-hw.c
@@ -9,6 +9,16 @@
 #include "imx8-isi-hw.h"
 #include "imx8-common.h"
 
+static int debug;
+module_param(debug, int, 0644);
+MODULE_PARM_DESC(debug, "Debug level (0-2)");
+
+#define dprintk(level, fmt, arg...) \
+	do { \
+		if (debug >= level) \
+			pr_info("BUFLOG:%u:" fmt, level, ## arg); \
+	} while (0)
+
 MODULE_AUTHOR("Freescale Semiconductor, Inc.");
 MODULE_DESCRIPTION("IMX8 Image Sensor Interface Hardware driver");
 MODULE_LICENSE("GPL");
@@ -16,6 +26,7 @@ MODULE_VERSION("1.0");
 
 #define	ISI_DOWNSCALE_THRESHOLD		0x4000
 
+#define DEBUG
 #ifdef DEBUG
 void dump_isi_regs(struct mxc_isi_dev *mxc_isi)
 {
@@ -67,10 +78,10 @@ void dump_isi_regs(struct mxc_isi_dev *mxc_isi)
 	};
 	u32 i;
 
-	dev_dbg(dev, "ISI CHNLC register dump, isi%d\n", mxc_isi->id);
+	dev_info(dev, "ISI CHNLC register dump, isi%d\n", mxc_isi->id);
 	for (i = 0; i < ARRAY_SIZE(registers); i++) {
 		u32 reg = readl(mxc_isi->regs + registers[i].offset);
-		dev_dbg(dev, "%20s[0x%.2x]: %.2x\n",
+		dev_info(dev, "%20s[0x%.2x]: 0x%08x\n",
 			registers[i].name, registers[i].offset, reg);
 	}
 }
@@ -217,12 +228,14 @@ void mxc_isi_channel_set_outbuf(struct mxc_isi_dev *mxc_isi,
 	val = readl(mxc_isi->regs + CHNL_OUT_BUF_CTRL);
 
 	if (framecount == 0 || ((is_buf_active(mxc_isi, 2)) && (framecount != 1))) {
+		dprintk(2, "reg   B1[0x%08llx]\n", dma_addrs[0]);
 		writel(dma_addrs[0], mxc_isi->regs + CHNL_OUT_BUF1_ADDR_Y);
 		writel(dma_addrs[1], mxc_isi->regs + CHNL_OUT_BUF1_ADDR_U);
 		writel(dma_addrs[2], mxc_isi->regs + CHNL_OUT_BUF1_ADDR_V);
 		val ^= CHNL_OUT_BUF_CTRL_LOAD_BUF1_ADDR_MASK;
 		buf->id = MXC_ISI_BUF1;
 	} else if (framecount == 1 || is_buf_active(mxc_isi, 1)) {
+		dprintk(2, "reg   B2[0x%08llx]\n", dma_addrs[0]);
 		writel(dma_addrs[0], mxc_isi->regs + CHNL_OUT_BUF2_ADDR_Y);
 		writel(dma_addrs[1], mxc_isi->regs + CHNL_OUT_BUF2_ADDR_U);
 		writel(dma_addrs[2], mxc_isi->regs + CHNL_OUT_BUF2_ADDR_V);
@@ -692,7 +705,9 @@ void mxc_isi_channel_enable(struct mxc_isi_dev *mxc_isi, bool m2m_enabled)
 		return;
 	}
 
-	dump_isi_regs(mxc_isi);
+	if (debug >= 1) {
+		dump_isi_regs(mxc_isi);
+	}
 	msleep(300);
 }
 EXPORT_SYMBOL_GPL(mxc_isi_channel_enable);
diff --git a/drivers/staging/media/imx/imx8-mipi-csi2-sam.c b/drivers/staging/media/imx/imx8-mipi-csi2-sam.c
index b6cef9e6e..200bd154a 100644
--- a/drivers/staging/media/imx/imx8-mipi-csi2-sam.c
+++ b/drivers/staging/media/imx/imx8-mipi-csi2-sam.c
@@ -356,21 +356,22 @@ struct mipi_csis_pdata {
 
 static const struct mipi_csis_event mipi_csis_events[] = {
 	/* Errors */
-	{ MIPI_CSIS_INTSRC_ERR_SOT_HS,	"SOT Error" },
-	{ MIPI_CSIS_INTSRC_ERR_LOST_FS,	"Lost Frame Start Error" },
-	{ MIPI_CSIS_INTSRC_ERR_LOST_FE,	"Lost Frame End Error" },
-	{ MIPI_CSIS_INTSRC_ERR_OVER,	"FIFO Overflow Error" },
-	{ MIPI_CSIS_INTSRC_ERR_ECC,	"ECC Error" },
-	{ MIPI_CSIS_INTSRC_ERR_CRC,	"CRC Error" },
-	{ MIPI_CSIS_INTSRC_ERR_UNKNOWN,	"Unknown Error" },
+	{ MIPI_CSIS_INTSRC_ERR_SOT_HS,	"Start of transmission error" },
+	{ MIPI_CSIS_INTSRC_ERR_LOST_FS,	"Indication of lost of Frame Start packet" },
+	{ MIPI_CSIS_INTSRC_ERR_LOST_FE,	"Indication of lost of Frame End packet" },
+	{ MIPI_CSIS_INTSRC_ERR_OVER,	"Overflow is caused in image FIFO" },
+	{ MIPI_CSIS_INTSRC_ERR_WRONG_CFG, "Wrong Configuration error" },
+	{ MIPI_CSIS_INTSRC_ERR_ECC,	"ECC error" },
+	{ MIPI_CSIS_INTSRC_ERR_CRC,	"CRC error" },
+	{ MIPI_CSIS_INTSRC_ERR_UNKNOWN,	"Unknown ID error" },
 	/* Non-image data receive events */
 	{ MIPI_CSIS_INTSRC_EVEN_BEFORE,	"Non-image data before even frame" },
 	{ MIPI_CSIS_INTSRC_EVEN_AFTER,	"Non-image data after even frame" },
 	{ MIPI_CSIS_INTSRC_ODD_BEFORE,	"Non-image data before odd frame" },
 	{ MIPI_CSIS_INTSRC_ODD_AFTER,	"Non-image data after odd frame" },
 	/* Frame start/end */
-	{ MIPI_CSIS_INTSRC_FRAME_START,	"Frame Start" },
-	{ MIPI_CSIS_INTSRC_FRAME_END,	"Frame End" },
+	{ MIPI_CSIS_INTSRC_FRAME_START,	"FS packet is received" },
+	{ MIPI_CSIS_INTSRC_FRAME_END,	"FE packet is received" },
 };
 #define MIPI_CSIS_NUM_EVENTS ARRAY_SIZE(mipi_csis_events)
 
@@ -461,7 +462,7 @@ struct csi_state {
 
 static int debug;
 module_param(debug, int, 0644);
-MODULE_PARM_DESC(debug, "Debug level (0-2)");
+MODULE_PARM_DESC(debug, "Debug level (0-3)");
 
 static const struct csis_pix_format mipi_csis_formats[] = {
 	{
@@ -1388,7 +1389,7 @@ static int csis_s_fmt(struct v4l2_subdev *sd, struct csi_sam_format *fmt)
 	    break;
 	case V4L2_PIX_FMT_Y12:
 		code = MEDIA_BUS_FMT_Y12_1X12;
-	    break;
+		break;
 	case V4L2_PIX_FMT_SBGGR12:
 	    code = MEDIA_BUS_FMT_SBGGR12_1X12;
 	    break;
@@ -1610,11 +1611,11 @@ static irqreturn_t mipi_csis_irq_handler(int irq, void *dev_id)
 			if (!(status & state->events[i].mask))
 				continue;
 			state->events[i].counter++;
-			v4l2_dbg(2, debug, &state->sd, "%s: %d\n",
+			v4l2_dbg(3, debug, &state->sd, "%s: %d\n",
 				 state->events[i].name,
 				 state->events[i].counter);
 		}
-		v4l2_dbg(2, debug, &state->sd, "status: %08x\n", status);
+		v4l2_dbg(3, debug, &state->sd, "status: %08x\n", status);
 	}
 	spin_unlock_irqrestore(&state->slock, flags);
 
-- 
2.25.1

